
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Generado.Parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\005\003\000\002\007\004" +
    "\000\002\007\003\000\002\006\012\000\002\006\007\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\022\004\000\002\022" +
    "\002\000\002\011\005\000\002\011\005\000\002\011\002" +
    "\000\002\012\006\000\002\012\002\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\016\004\000\002" +
    "\016\002\000\002\045\003\000\002\045\003\000\002\013" +
    "\006\000\002\015\004\000\002\015\002\000\002\014\005" +
    "\000\002\014\002\000\002\023\005\000\002\024\010\000" +
    "\002\024\010\000\002\024\006\000\002\024\005\000\002" +
    "\026\010\000\002\026\010\000\002\026\006\000\002\026" +
    "\005\000\002\026\003\000\002\025\006\000\002\025\005" +
    "\000\002\025\005\000\002\025\002\000\002\027\010\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\031\010\000\002\031\006\000\002\032\007\000\002\106" +
    "\004\000\002\106\004\000\002\021\004\000\002\021\003" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\002\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\066\005\000\002\067" +
    "\004\000\002\067\002\000\002\070\005\000\002\070\002" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\005\000\002\063\003\000\002" +
    "\063\005\000\002\063\004\000\002\063\005\000\002\063" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\004" +
    "\000\002\064\005\000\002\064\005\000\002\100\005\000" +
    "\002\100\003\000\002\071\004\000\002\071\002\000\002" +
    "\072\004\000\002\072\002\000\002\101\004\000\002\101" +
    "\002\000\002\103\004\000\002\103\002\000\002\102\003" +
    "\000\002\102\003\000\002\104\006\000\002\104\003\000" +
    "\002\105\006\000\002\105\003\000\002\004\004\000\002" +
    "\107\004\000\002\107\002\000\002\110\003\000\002\110" +
    "\003\000\002\110\003\000\002\043\004\000\002\043\004" +
    "\000\002\043\004\000\002\035\004\000\002\035\003\000" +
    "\002\041\005\000\002\111\002\000\002\041\005\000\002" +
    "\033\003\000\002\037\004\000\002\034\006\000\002\034" +
    "\005\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\076\003\000\002\076\003\000\002\075\003\000\002" +
    "\077\003\000\002\077\003\000\002\074\003\000\002\074" +
    "\003\000\002\074\003\000\002\046\003\000\002\047\003" +
    "\000\002\050\003\000\002\051\003\000\002\052\003\000" +
    "\002\055\003\000\002\054\003\000\002\053\003\000\002" +
    "\056\003\000\002\057\003\000\002\060\003\000\002\061" +
    "\003\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\010\003\011\023\015\024\004\001\002\000" +
    "\006\003\201\004\202\001\002\000\004\002\uffff\001\002" +
    "\000\050\002\ufffb\003\175\004\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\022\ufffb\024\004\025\ufffb\026\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\051\ufffb\053\ufffb\054\ufffb\060" +
    "\ufffb\001\002\000\010\003\175\024\004\053\176\001\002" +
    "\000\004\002\000\001\002\000\012\002\ufffe\003\uff71\024" +
    "\uff71\053\uff71\001\002\000\004\002\174\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\uff8d\001\002\000\006\003" +
    "\017\004\020\001\002\000\006\003\024\022\025\001\002" +
    "\000\006\003\uff7b\022\uff7b\001\002\000\004\052\021\001" +
    "\002\000\006\003\024\022\025\001\002\000\004\004\172" +
    "\001\002\000\004\002\uff8b\001\002\000\046\002\uff7a\003" +
    "\uff7a\004\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\022\uff7a" +
    "\024\uff7a\025\uff7a\026\uff7a\036\uff7a\037\uff7a\040\uff7a\041" +
    "\uff7a\051\uff7a\054\uff7a\060\uff7a\001\002\000\006\003\024" +
    "\004\171\001\002\000\010\003\uff91\022\uff91\024\uff91\001" +
    "\002\000\010\003\030\022\025\024\004\001\002\000\012" +
    "\003\uff71\004\uff7a\024\uff71\053\uff71\001\002\000\046\002" +
    "\uff8f\003\uff8f\004\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f" +
    "\022\uff8f\025\uff8f\026\uff8f\036\uff8f\037\uff8f\040\uff8f\041" +
    "\uff8f\051\uff8f\053\035\054\uff8f\060\uff8f\001\002\000\010" +
    "\003\uff92\022\uff92\024\uff92\001\002\000\004\002\uff8c\001" +
    "\002\000\044\002\uffe8\003\uffe8\004\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\022\uffe8\025\uffe8\026\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\051\uffe8\054\uffe8\060\uffe8\001\002" +
    "\000\044\002\uffe8\003\uffe8\004\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\022\uffe8\025\uffe8\026\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\051\uffe8\054\uffe8\060\uffe8\001\002\000" +
    "\004\002\uff90\001\002\000\044\002\uff99\003\024\004\uff99" +
    "\006\uff99\007\uff99\010\uff99\011\uff99\022\041\025\uff99\026" +
    "\uff99\036\uff99\037\uff99\040\uff99\041\uff99\051\uff99\054\uff99" +
    "\060\uff99\001\002\000\004\004\166\001\002\000\006\003" +
    "\024\004\165\001\002\000\044\002\uffe9\003\uffe9\004\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\022\uffe9\025\uffe9\026" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\051\uffe9\054\uffe9" +
    "\060\uffe9\001\002\000\042\002\uff9b\003\067\004\101\006" +
    "\044\007\060\010\045\011\057\025\062\026\063\036\077" +
    "\037\047\040\075\041\046\051\065\054\052\060\071\001" +
    "\002\000\070\002\uffc3\003\uffc3\004\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\013\uffc3\025\uffc3\026\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\001\002\000\070\002\uffc1\003\uffc1" +
    "\004\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\013\uffc1\025" +
    "\uffc1\026\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\047\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\001\002" +
    "\000\034\003\uff82\004\uff82\006\uff82\007\uff82\010\uff82\011" +
    "\uff82\025\uff82\026\uff82\040\uff82\041\uff82\051\uff82\054\uff82" +
    "\060\uff82\001\002\000\004\054\161\001\002\000\060\002" +
    "\uff96\003\uff96\004\uff96\006\uff96\007\uff96\010\uff96\011\uff96" +
    "\013\114\025\uff96\026\uff96\036\uff96\037\uff96\040\131\041" +
    "\120\042\127\043\115\044\116\045\123\047\122\050\130" +
    "\051\117\054\uff96\060\uff96\001\002\000\070\002\uffb1\003" +
    "\uffb1\004\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\013\uffb1" +
    "\025\uffb1\026\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\001" +
    "\002\000\034\003\106\004\110\006\044\007\060\010\045" +
    "\011\057\025\062\026\063\040\075\041\046\051\065\054" +
    "\052\060\071\001\002\000\042\002\uffa0\003\uffa0\004\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\011\uffa0\025\uffa0\026\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\041\uffa0\051\uffa0\054\uffa0\060\uffa0" +
    "\001\002\000\042\002\uff98\003\uff98\004\uff98\006\uff98\007" +
    "\uff98\010\uff98\011\uff98\025\uff98\026\uff98\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\051\uff98\054\uff98\060\uff98\001\002\000" +
    "\042\002\uff9c\003\uff9c\004\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\025\uff9c\026\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\051\uff9c\054\uff9c\060\uff9c\001\002\000\070\002\uffb7" +
    "\003\uffb7\004\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\013" +
    "\uffb7\025\uffb7\026\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\047\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\001\002\000\070\002\uffc0\003\uffc0\004\uffc0\006\uffc0\007" +
    "\uffc0\010\uffc0\011\uffc0\013\uffc0\025\uffc0\026\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\001\002\000\070\002\uffc2\003" +
    "\uffc2\004\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\013\uffc2" +
    "\025\uffc2\026\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\001" +
    "\002\000\070\002\uffb9\003\uffb9\004\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\013\uffb9\025\uffb9\026\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\001\002\000\070\002\uffb0\003\uffb0" +
    "\004\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\013\uffb0\025" +
    "\uffb0\026\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\047\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\001\002" +
    "\000\070\002\uffaf\003\uffaf\004\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\013\uffaf\025\uffaf\026\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\001\002\000\042\002\uffaa\003\uffaa\004" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\025\uffaa\026\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\051\uffaa\054\uffaa\060" +
    "\uffaa\001\002\000\034\003\106\004\110\006\044\007\060" +
    "\010\045\011\057\025\062\026\063\040\075\041\046\051" +
    "\065\054\052\060\071\001\002\000\070\002\uffb5\003\uffb5" +
    "\004\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\013\uffb5\025" +
    "\uffb5\026\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\001\002" +
    "\000\060\002\uff77\003\uff77\004\uff77\006\uff77\007\uff77\010" +
    "\uff77\011\uff77\013\uff77\025\uff77\026\uff77\036\uff77\037\uff77" +
    "\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77\047" +
    "\uff77\050\uff77\051\uff77\054\uff77\060\uff77\001\002\000\042" +
    "\002\uffa1\003\uffa1\004\uffa1\006\uffa1\007\uffa1\010\uffa1\011" +
    "\uffa1\025\uffa1\026\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\051\uffa1\054\uffa1\060\uffa1\001\002\000\036\003\106\004" +
    "\110\006\044\007\060\010\045\011\057\025\062\026\063" +
    "\040\075\041\046\051\065\054\052\057\uffbd\060\071\001" +
    "\002\000\042\002\uff97\003\uff97\004\uff97\006\uff97\007\uff97" +
    "\010\uff97\011\uff97\025\uff97\026\uff97\036\uff97\037\uff97\040" +
    "\uff97\041\uff97\051\uff97\054\uff97\060\uff97\001\002\000\034" +
    "\003\106\004\110\006\044\007\060\010\045\011\057\025" +
    "\062\026\063\040\075\041\046\051\065\054\052\060\071" +
    "\001\002\000\042\002\uff9e\003\uff9e\004\uff9e\006\uff9e\007" +
    "\uff9e\010\uff9e\011\uff9e\025\uff9e\026\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\051\uff9e\054\uff9e\060\uff9e\001\002\000" +
    "\034\003\uff83\004\uff83\006\uff83\007\uff83\010\uff83\011\uff83" +
    "\025\uff83\026\uff83\040\uff83\041\uff83\051\uff83\054\uff83\060" +
    "\uff83\001\002\000\070\002\uffba\003\uffba\004\uffba\006\uffba" +
    "\007\uffba\010\uffba\011\uffba\013\uffba\025\uffba\026\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba" +
    "\045\uffba\047\uffba\050\uffba\051\uffba\052\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\uffba\001\002\000\004\054\141" +
    "\001\002\000\042\002\uff9a\003\uff9a\004\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\011\uff9a\025\uff9a\026\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\051\uff9a\054\uff9a\060\uff9a\001\002\000" +
    "\064\002\uffb8\003\uffb8\004\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\013\uffb8\014\103\025\uffb8\026\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\054\104\060\uffb8\061\102\001" +
    "\002\000\004\004\137\001\002\000\034\003\106\004\110" +
    "\006\044\007\060\010\045\011\057\025\062\026\063\040" +
    "\075\041\046\051\065\054\052\060\071\001\002\000\036" +
    "\003\106\004\110\006\044\007\060\010\045\011\057\025" +
    "\062\026\063\040\075\041\046\051\065\054\052\055\uffe3" +
    "\060\071\001\002\000\032\013\114\040\131\041\120\042" +
    "\127\043\115\044\116\045\123\047\122\050\130\051\117" +
    "\055\uffe1\056\113\001\002\000\070\002\uff77\003\uff77\004" +
    "\uff77\006\uff77\007\uff77\010\uff77\011\uff77\013\uff77\025\uff77" +
    "\026\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043" +
    "\uff77\044\uff77\045\uff77\047\uff77\050\uff77\051\uff77\052\uff77" +
    "\054\uff77\055\uff77\056\uff77\057\uff77\060\uff77\001\002\000" +
    "\004\055\111\001\002\000\072\002\uffb8\003\uffb8\004\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\011\uffb8\013\uffb8\025\uffb8\026" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\054" +
    "\104\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\102\001\002" +
    "\000\070\002\uffe5\003\uffe5\004\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\013\uffe5\025\uffe5\026\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\001\002\000\034\003\uff81\004\uff81\006" +
    "\uff81\007\uff81\010\uff81\011\uff81\025\uff81\026\uff81\040\uff81" +
    "\041\uff81\051\uff81\054\uff81\060\uff81\001\002\000\034\003" +
    "\106\004\110\006\044\007\060\010\045\011\057\025\062" +
    "\026\063\040\075\041\046\051\065\054\052\060\071\001" +
    "\002\000\034\003\uff80\004\uff80\006\uff80\007\uff80\010\uff80" +
    "\011\uff80\025\uff80\026\uff80\040\uff80\041\uff80\051\uff80\054" +
    "\uff80\060\uff80\001\002\000\034\003\uff86\004\uff86\006\uff86" +
    "\007\uff86\010\uff86\011\uff86\025\uff86\026\uff86\040\uff86\041" +
    "\uff86\051\uff86\054\uff86\060\uff86\001\002\000\034\003\uff85" +
    "\004\uff85\006\uff85\007\uff85\010\uff85\011\uff85\025\uff85\026" +
    "\uff85\040\uff85\041\uff85\051\uff85\054\uff85\060\uff85\001\002" +
    "\000\034\003\uff7c\004\uff7c\006\uff7c\007\uff7c\010\uff7c\011" +
    "\uff7c\025\uff7c\026\uff7c\040\uff7c\041\uff7c\051\uff7c\054\uff7c" +
    "\060\uff7c\001\002\000\034\003\uff88\004\uff88\006\uff88\007" +
    "\uff88\010\uff88\011\uff88\025\uff88\026\uff88\040\uff88\041\uff88" +
    "\051\uff88\054\uff88\060\uff88\001\002\000\004\055\uffe4\001" +
    "\002\000\034\003\uff7e\004\uff7e\006\uff7e\007\uff7e\010\uff7e" +
    "\011\uff7e\025\uff7e\026\uff7e\040\uff7e\041\uff7e\051\uff7e\054" +
    "\uff7e\060\uff7e\001\002\000\034\003\uff84\004\uff84\006\uff84" +
    "\007\uff84\010\uff84\011\uff84\025\uff84\026\uff84\040\uff84\041" +
    "\uff84\051\uff84\054\uff84\060\uff84\001\002\000\034\003\106" +
    "\004\110\006\044\007\060\010\045\011\057\025\062\026" +
    "\063\040\075\041\046\051\065\054\052\060\071\001\002" +
    "\000\034\003\106\004\110\006\044\007\060\010\045\011" +
    "\057\025\062\026\063\040\075\041\046\051\065\054\052" +
    "\060\071\001\002\000\034\003\uff7f\004\uff7f\006\uff7f\007" +
    "\uff7f\010\uff7f\011\uff7f\025\uff7f\026\uff7f\040\uff7f\041\uff7f" +
    "\051\uff7f\054\uff7f\060\uff7f\001\002\000\034\003\uff87\004" +
    "\uff87\006\uff87\007\uff87\010\uff87\011\uff87\025\uff87\026\uff87" +
    "\040\uff87\041\uff87\051\uff87\054\uff87\060\uff87\001\002\000" +
    "\034\003\uff7d\004\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d" +
    "\025\uff7d\026\uff7d\040\uff7d\041\uff7d\051\uff7d\054\uff7d\060" +
    "\uff7d\001\002\000\034\003\uff89\004\uff89\006\uff89\007\uff89" +
    "\010\uff89\011\uff89\025\uff89\026\uff89\040\uff89\041\uff89\051" +
    "\uff89\054\uff89\060\uff89\001\002\000\070\002\uffad\003\uffad" +
    "\004\uffad\006\uffad\007\uffad\010\uffad\011\uffad\013\114\025" +
    "\uffad\026\uffad\036\uffad\037\uffad\040\131\041\120\042\127" +
    "\043\115\044\116\045\123\047\122\050\130\051\117\052" +
    "\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\001\002" +
    "\000\070\002\uffb4\003\uffb4\004\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\013\114\025\uffb4\026\uffb4\036\uffb4\037\uffb4" +
    "\040\131\041\120\042\127\043\115\044\116\045\123\047" +
    "\122\050\130\051\117\052\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\001\002\000\032\013\114\040\131\041" +
    "\120\042\127\043\115\044\116\045\123\047\122\050\130" +
    "\051\117\055\uffe1\056\113\001\002\000\004\055\uffe2\001" +
    "\002\000\060\002\uffab\003\uffab\004\uffab\006\uffab\007\uffab" +
    "\010\uffab\011\uffab\013\114\025\uffab\026\uffab\036\uffab\037" +
    "\uffab\040\131\041\120\042\127\043\115\044\116\045\123" +
    "\047\122\050\130\051\uffab\054\uffab\060\uffab\001\002\000" +
    "\004\054\104\001\002\000\070\002\uffb2\003\uffb2\004\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\013\uffb2\025\uffb2\026" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\001\002\000\034" +
    "\003\106\004\110\006\044\007\060\010\045\011\057\025" +
    "\062\026\063\040\075\041\046\051\065\054\052\060\071" +
    "\001\002\000\030\013\114\040\131\041\120\042\127\043" +
    "\115\044\116\045\123\047\122\050\130\051\117\055\143" +
    "\001\002\000\042\002\uff9d\003\uff9d\004\uff9d\006\uff9d\007" +
    "\uff9d\010\uff9d\011\uff9d\025\uff9d\026\uff9d\036\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\051\uff9d\054\uff9d\060\uff9d\001\002\000" +
    "\070\002\uffb3\003\uffb3\004\uffb3\006\uffb3\007\uffb3\010\uffb3" +
    "\011\uffb3\013\114\025\uffb3\026\uffb3\036\uffb3\037\uffb3\040" +
    "\131\041\120\042\127\043\115\044\116\045\123\047\122" +
    "\050\130\051\117\052\uffb3\054\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\060\uffb3\001\002\000\032\013\114\040\131\041\120" +
    "\042\127\043\115\044\116\045\123\047\122\050\130\051" +
    "\117\056\150\057\uffbb\001\002\000\004\057\147\001\002" +
    "\000\070\002\uffbf\003\uffbf\004\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\013\uffbf\025\uffbf\026\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\001\002\000\034\003\106\004\110\006" +
    "\044\007\060\010\045\011\057\025\062\026\063\040\075" +
    "\041\046\051\065\054\052\060\071\001\002\000\004\057" +
    "\uffbe\001\002\000\032\013\114\040\131\041\120\042\127" +
    "\043\115\044\116\045\123\047\122\050\130\051\117\056" +
    "\150\057\uffbb\001\002\000\004\057\uffbc\001\002\000\070" +
    "\002\uffae\003\uffae\004\uffae\006\uffae\007\uffae\010\uffae\011" +
    "\uffae\013\114\025\uffae\026\uffae\036\uffae\037\uffae\040\131" +
    "\041\120\042\127\043\115\044\116\045\123\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\001\002\000\030\013\114\040\131\041\120\042" +
    "\127\043\115\044\116\045\123\047\122\050\130\051\117" +
    "\055\160\001\002\000\030\013\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\055\157\001\002\000\070\002\uffac\003\uffac\004\uffac\006" +
    "\uffac\007\uffac\010\uffac\011\uffac\013\uffac\025\uffac\026\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\047\uffac\050\uffac\051\uffac\052\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\001\002\000\070\002" +
    "\uffb6\003\uffb6\004\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6" +
    "\013\uffb6\025\uffb6\026\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\001\002\000\034\003\106\004\110\006\044\007\060" +
    "\010\045\011\057\025\062\026\063\040\075\041\046\051" +
    "\065\054\052\060\071\001\002\000\030\013\114\040\131" +
    "\041\120\042\127\043\115\044\116\045\123\047\122\050" +
    "\130\051\117\055\163\001\002\000\042\002\uff9f\003\uff9f" +
    "\004\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\025\uff9f\026" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\051\uff9f\054\uff9f" +
    "\060\uff9f\001\002\000\044\002\uffeb\003\uffeb\004\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\022\uffeb\025\uffeb\026\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\051\uffeb\054\uffeb\060" +
    "\uffeb\001\002\000\044\002\uffec\003\uffec\004\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\022\uffec\025\uffec\026\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\051\uffec\054\uffec\060\uffec" +
    "\001\002\000\044\002\uffea\003\uffea\004\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\022\uffea\025\uffea\026\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\051\uffea\054\uffea\060\uffea\001" +
    "\002\000\004\002\uff8e\001\002\000\010\003\uff94\022\uff94" +
    "\024\uff94\001\002\000\010\003\uff95\022\uff95\024\uff95\001" +
    "\002\000\010\003\uff93\022\uff93\024\uff93\001\002\000\004" +
    "\002\uff8a\001\002\000\004\002\001\001\002\000\010\003" +
    "\uff71\024\uff71\053\uff71\001\002\000\050\002\ufff4\003\ufff4" +
    "\004\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\022\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\051\ufff4\053\ufff4\054\ufff4\060\ufff4\001\002\000\050\002" +
    "\ufff5\003\ufff5\004\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\022\ufff5\024\ufff5\025\ufff5\026\ufff5\036\ufff5\037\ufff5\040" +
    "\ufff5\041\ufff5\051\ufff5\053\ufff5\054\ufff5\060\ufff5\001\002" +
    "\000\046\002\ufffc\003\ufffc\004\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\022\ufffc\025\ufffc\026\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\041\ufffc\051\ufffc\053\ufffc\054\ufffc\060\ufffc\001" +
    "\002\000\052\002\uff79\003\uff79\004\uff79\006\uff79\007\uff79" +
    "\010\uff79\011\uff79\022\uff79\024\uff79\025\uff79\026\uff79\036" +
    "\uff79\037\uff79\040\uff79\041\uff79\051\uff79\052\uff71\053\uff79" +
    "\054\uff79\060\uff79\001\002\000\004\054\270\001\002\000" +
    "\050\002\ufff6\003\ufff6\004\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\022\ufff6\024\ufff6\025\ufff6\026\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\051\ufff6\053\ufff6\054\ufff6\060\ufff6" +
    "\001\002\000\006\052\205\053\206\001\002\000\006\027" +
    "\210\053\ufff2\001\002\000\050\002\ufff8\003\ufff8\004\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\022\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\051\ufff8" +
    "\053\ufff8\054\ufff8\060\ufff8\001\002\000\004\053\266\001" +
    "\002\000\034\003\217\004\110\006\044\007\060\010\045" +
    "\011\057\025\062\026\063\040\075\041\046\051\065\054" +
    "\052\060\071\001\002\000\006\027\210\053\ufff2\001\002" +
    "\000\006\027\ufff3\053\ufff3\001\002\000\004\053\264\001" +
    "\002\000\012\027\uffd3\030\227\031\226\053\uffd3\001\002" +
    "\000\026\013\114\040\131\041\120\042\127\043\115\044" +
    "\116\045\123\047\122\050\130\051\117\001\002\000\030" +
    "\013\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\052\257\001\002\000\040" +
    "\013\uff77\027\uff79\030\uff79\031\uff79\040\uff77\041\uff77\042" +
    "\uff77\043\uff77\044\uff77\045\uff77\047\uff77\050\uff77\051\uff77" +
    "\052\uff76\053\uff79\001\002\000\004\052\221\001\002\000" +
    "\006\027\210\053\ufff2\001\002\000\004\053\223\001\002" +
    "\000\012\027\uffd3\030\227\031\226\053\uffd3\001\002\000" +
    "\006\027\uffd7\053\uffd7\001\002\000\006\027\uffde\053\uffde" +
    "\001\002\000\034\003\217\004\110\006\044\007\060\010" +
    "\045\011\057\025\062\026\063\040\075\041\046\051\065" +
    "\054\052\060\071\001\002\000\006\003\230\052\233\001" +
    "\002\000\006\027\uff79\053\uff79\001\002\000\004\053\237" +
    "\001\002\000\006\027\210\053\ufff2\001\002\000\006\027" +
    "\210\053\ufff2\001\002\000\004\053\235\001\002\000\006" +
    "\027\uffd6\053\uffd6\001\002\000\006\027\uffd4\053\uffd4\001" +
    "\002\000\006\027\uffd5\053\uffd5\001\002\000\004\053\255" +
    "\001\002\000\012\027\uffd3\030\227\031\226\053\uffd3\001" +
    "\002\000\030\013\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\047\uffb1\050\uffb1\051\uffb1\052\250\001" +
    "\002\000\004\052\244\001\002\000\006\027\210\053\ufff2" +
    "\001\002\000\004\053\246\001\002\000\012\027\uffd3\030" +
    "\227\031\226\053\uffd3\001\002\000\006\027\uffda\053\uffda" +
    "\001\002\000\006\027\210\053\ufff2\001\002\000\004\053" +
    "\252\001\002\000\012\027\uffd3\030\227\031\226\053\uffd3" +
    "\001\002\000\006\027\uffdb\053\uffdb\001\002\000\006\027" +
    "\uffd8\053\uffd8\001\002\000\012\027\uffd3\030\227\031\226" +
    "\053\uffd3\001\002\000\006\027\uffd9\053\uffd9\001\002\000" +
    "\006\027\210\053\ufff2\001\002\000\004\053\261\001\002" +
    "\000\012\027\uffd3\030\227\031\226\053\uffd3\001\002\000" +
    "\006\027\uffdf\053\uffdf\001\002\000\006\027\uffdc\053\uffdc" +
    "\001\002\000\012\027\uffd3\030\227\031\226\053\uffd3\001" +
    "\002\000\006\027\uffdd\053\uffdd\001\002\000\050\002\ufff9" +
    "\003\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\022" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\051\ufff9\053\ufff9\054\ufff9\060\ufff9\001\002\000" +
    "\050\002\ufff7\003\ufff7\004\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7\036\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\051\ufff7\053\ufff7\054\ufff7\060\ufff7" +
    "\001\002\000\006\022\272\055\uffef\001\002\000\004\055" +
    "\304\001\002\000\006\003\273\004\274\001\002\000\006" +
    "\055\uff70\056\uff70\001\002\000\006\055\uffed\056\277\001" +
    "\002\000\006\055\uffed\056\277\001\002\000\004\055\ufff0" +
    "\001\002\000\004\022\300\001\002\000\004\004\301\001" +
    "\002\000\006\055\uffed\056\277\001\002\000\004\055\uffee" +
    "\001\002\000\004\055\ufff1\001\002\000\004\052\305\001" +
    "\002\000\006\027\210\053\ufff2\001\002\000\004\053\307" +
    "\001\002\000\050\002\ufffa\003\ufffa\004\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\022\ufffa\024\ufffa\025\ufffa\026\ufffa" +
    "\036\ufffa\037\ufffa\040\ufffa\041\ufffa\051\ufffa\053\ufffa\054" +
    "\ufffa\060\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\020\002\011\005\007\006\005\007\012\033" +
    "\004\034\013\060\006\001\001\000\006\050\202\060\203" +
    "\001\001\000\002\001\001\000\010\006\005\007\177\060" +
    "\006\001\001\000\006\006\176\060\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\015\001\001\000\012" +
    "\035\026\037\172\043\025\047\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\035\026\037\022\043\025" +
    "\047\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\167\001\001\000\002\001\001" +
    "\000\016\006\005\007\030\041\032\043\031\047\021\060" +
    "\006\001\001\000\002\001\001\000\004\111\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\166\016" +
    "\036\001\001\000\006\004\035\016\036\001\001\000\002" +
    "\001\001\000\010\003\041\047\037\107\042\001\001\000" +
    "\002\001\001\000\004\047\163\001\001\000\002\001\001" +
    "\000\040\013\055\052\065\054\063\056\073\057\054\063" +
    "\047\064\050\065\075\066\060\076\072\100\071\102\053" +
    "\104\067\105\052\110\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\073\111\074\125\075\123\077\124\001\001\000\002\001" +
    "\001\000\020\013\055\052\065\063\154\064\155\065\075" +
    "\066\060\076\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\055\052\065" +
    "\063\153\064\050\065\075\066\060\076\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\055\052\065\063\144\064\050\065\075\066\060\067" +
    "\145\076\072\001\001\000\002\001\001\000\020\013\055" +
    "\052\065\063\143\064\050\065\075\066\060\076\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\137\001\001\000\020\013\055\052\065\063\135" +
    "\064\050\065\075\066\060\076\072\001\001\000\022\013" +
    "\055\015\106\052\065\063\104\064\050\065\075\066\060" +
    "\076\072\001\001\000\014\014\120\073\111\074\125\075" +
    "\123\077\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\055\052\065\063\133\064\050\065\075\066\060" +
    "\076\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\055\052\065\063\132\064\050\065\075\066\060\076\072" +
    "\001\001\000\020\013\055\052\065\063\131\064\050\065" +
    "\075\066\060\076\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\073" +
    "\111\074\125\075\123\077\124\001\001\000\012\073\111" +
    "\074\125\075\123\077\124\001\001\000\014\014\134\073" +
    "\111\074\125\075\123\077\124\001\001\000\002\001\001" +
    "\000\012\073\111\074\125\075\123\077\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\055\052\065" +
    "\063\141\064\050\065\075\066\060\076\072\001\001\000" +
    "\012\073\111\074\125\075\123\077\124\001\001\000\002" +
    "\001\001\000\012\073\111\074\125\075\123\077\124\001" +
    "\001\000\014\070\150\073\111\074\125\075\123\077\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\055\052\065\063\151\064\050\065\075\066\060\076\072" +
    "\001\001\000\002\001\001\000\014\070\152\073\111\074" +
    "\125\075\123\077\124\001\001\000\002\001\001\000\012" +
    "\073\111\074\125\075\123\077\124\001\001\000\012\073" +
    "\111\074\125\075\123\077\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\055\052" +
    "\065\063\161\064\050\065\075\066\060\076\072\001\001" +
    "\000\012\073\111\074\125\075\123\077\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\266\060\006\001\001\000\002\001\001\000\006\022" +
    "\206\024\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\013\055\050\213\052\065\053\212\055\217\063" +
    "\214\064\215\065\075\066\060\076\072\001\001\000\006" +
    "\022\211\024\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\223\026\262\001\001\000\012\073\111" +
    "\074\125\075\123\077\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\221\024\210" +
    "\001\001\000\002\001\001\000\006\025\223\026\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\013\055" +
    "\050\240\052\065\053\237\055\242\063\214\064\241\065" +
    "\075\066\060\076\072\001\001\000\006\050\231\053\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\235\024\210\001\001\000\006\022\233\024\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\223\026\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\244\024\210\001\001\000\002\001\001\000\006\025\223" +
    "\026\246\001\001\000\002\001\001\000\006\022\250\024" +
    "\210\001\001\000\002\001\001\000\006\025\223\026\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\223\026\255\001\001\000\002\001\001\000\006\022\257" +
    "\024\210\001\001\000\002\001\001\000\006\025\223\026" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\223\026\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\270\001\001\000\002" +
    "\001\001\000\004\061\274\001\001\000\002\001\001\000" +
    "\004\012\302\001\001\000\004\012\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\305\024\210\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;

  ArrayList<String> errores;

  public Analizador(java_cup.runtime.Scanner s, boolean type) {
    super(s);
    errores = new ArrayList<String>();
  }
  
  public void addError(String error){
    errores.add(error);
    /*ProyectoCompi.PoyectoCompi.consola.impirmir(error);*/
  }

  public ArrayList<String> retornarLista(){
    return errores;
  }
  public void syntax_error(Symbol s){
    System.out.println("Error en la linea : " + s.value);
   
  }
/*public void unrecovered_syntax_error(Symbol s){
    System.out.println("Error crítico en la linea : " + s.value);
  }*/
protected int error_sync_size(){
    return 1;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {



  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Funcional 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo Funcional."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= OOP 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo OOP."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= error 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Error por final de archivo.");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Funcional ::= DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcional",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DefFunciones ::= DefFuncion DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DefFunciones ::= DefFuncion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DefFuncion ::= def identificador parenAbierto DefParametrosFact parenCerrado dosPuntos BloqueNuevo puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DefFuncion ::= def errDecFuncion dosPuntos BloqueNuevo puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DefFuncion ::= def errDecFuncion puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DefFuncion ::= def errPuntoYComa DefFuncion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DefFuncion ::= def errPuntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DefFuncion ::= errDecFuncion DefFuncion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DefFuncion ::= errDecFuncion puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BloqueNuevo ::= If BloqueNuevo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BloqueNuevo ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DefParametrosFact ::= var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DefParametrosFact ::= var errParametro1 DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DefParametrosFact ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DefParametros ::= coma var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DefParametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Variable ::= var identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Variable ::= var errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Variable ::= errDecVariables identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Variables ::= Variables Variable 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Variables ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DosPuntos ::= dosPuntos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DosPuntos ::= errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Funcion ::= identificador parenAbierto Parametros parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcion",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Parametros ::= Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Parametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Parametro ::= coma Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Parametro ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DecIf ::= DecIf Elif Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DecIf",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // If ::= iif ExpresionB dosPuntos BloqueNuevo puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // If ::= iif errExpresionB dosPuntos BloqueNuevo puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // If ::= iif errIf puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // If ::= iif errPuntoYComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Elif ::= elif ExpresionB dosPuntos BloqueNuevo puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Elif ::= elif errExpresionB dosPuntos BloqueNuevo puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Elif ::= elif errIf puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Elif ::= elif errPuntoYComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Elif ::= Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Else ::= eelse dosPuntos BloqueNuevo puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Else ::= eelse errIf puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Else ::= eelse errPuntoYComa BloqueNuevo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Else ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ForFact ::= ffor identificador in For DosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ForFact",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // For ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // For ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // For ::= Range 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Range ::= range parenAbierto INT coma INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Range ::= range parenAbierto INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // While ::= wwhile ExpresionB DosPuntos BloquePuntoComa Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BloquePuntoComa ::= Bloque puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BloquePuntoComa ::= Bloque errPuntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Bloques ::= Bloque Bloques 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloques",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Bloques ::= Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloques",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Bloque ::= ForFact Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Bloque ::= While Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Bloque ::= If Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Bloque ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Literal ::= INT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Literal ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Literal ::= CHAR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Literal ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Lista ::= cuadradoAbierto ElementosLista cuadradoCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Lista",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ElementosLista ::= Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MasElementosLista ::= coma Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MasElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expresion ::= Literal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expresion ::= Lista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expresion ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expresion ::= Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expresion ::= parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expresion ::= errExpresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expresion ::= Expresion OpBinario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expresion ::= OpUnario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expresion ::= identificador punto Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expresion ::= ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExpresionB ::= ffalse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExpresionB ::= ttrue 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExpresionB ::= opNot Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExpresionB ::= Expresion OpBinarioB Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExpresionB ::= parenAbierto ExpresionB parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Asignacion ::= identificador opAsignaciones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Asignacion ::= errAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expresiones ::= Expresiones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExpresionesB ::= ExpresionesB ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpresionesB ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Asignaciones ::= Asignaciones Asignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Asignaciones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FuncionesPredefinidas ::= FuncionesPredefinidas FuncionPredefinida 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FuncionesPredefinidas ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FuncionPredefinida ::= Input 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FuncionPredefinida ::= Print 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Input ::= iinput parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Input ::= errInput 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Print ::= pprint parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Print ::= errPrint 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CodigoPrincipal ::= Variables CualquierCosas 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CodigoPrincipal",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CualquierCosas ::= CualquierCosas CualquierCosa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosas",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CualquierCosas ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosas",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CualquierCosa ::= FuncionPredefinida 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosa",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CualquierCosa ::= Asignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosa",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CualquierCosa ::= Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosa",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VariableOOP ::= var identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariableOOP",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VariableOOP ::= var errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariableOOP",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VariableOOP ::= errDecVariables identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariableOOP",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VariablesOOP ::= VariablesOOP VariableOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariablesOOP",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VariablesOOP ::= VariableOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariablesOOP",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FuncionesOOP ::= DefFunciones puntoComa CodigoPrincipal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesOOP",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$0 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 errores.add("Falto el ; de la clase principal en la línea: " + cleft); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$0",71, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FuncionesOOP ::= DefFunciones NT$0 CodigoPrincipal 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesOOP",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OOP ::= HeaderOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OOP",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BloqueOOP ::= VariablesOOP FuncionesOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueOOP",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // HeaderOOP ::= clas identificador dosPuntos BloqueOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // HeaderOOP ::= clas errHeaderOOP BloqueOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OpAritmeticos ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OpAritmeticos ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OpAritmeticos ::= opMultiplicacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OpAritmeticos ::= opDivision 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OpAritmeticos ::= opDivisionE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OpAritmeticos ::= opModulo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OpUnario ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OpUnario ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OpBinario ::= OpAritmeticos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinario",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OpBinarioB ::= opComparadores 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OpBinarioB ::= OpLogicos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OpLogicos ::= opAnd 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OpLogicos ::= opOr 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OpLogicos ::= opNot 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // errHeaderOOP ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en el header del fuente de tipo OOP. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errHeaderOOP",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // errDecVariables ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error al declarar variables. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecVariables",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // errPuntoYComa ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Falto cerrar un bloque con ';'. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPuntoYComa",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // errClase ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la clase. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errClase",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // errExpresion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresion",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // errExpresionB ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Debe ser booleana. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresionB",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // errAsignacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la asignación. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errAsignacion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // errIf ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la definicion del if. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errIf",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // errInput ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en input(). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errInput",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // errPrint ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en print() Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPrint",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // errDecFuncion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecFuncion",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // errParametro1 ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de los parametros de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errParametro1",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // errBloque ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error Bloque. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errBloque",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
