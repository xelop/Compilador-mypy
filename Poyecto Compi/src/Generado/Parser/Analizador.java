
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Generado.Parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\257\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\005\003\000\002\007\004" +
    "\000\002\007\002\000\002\006\011\000\002\006\006\000" +
    "\002\006\005\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\024\004\000\002\024\002\000\002\011" +
    "\005\000\002\011\005\000\002\011\002\000\002\012\006" +
    "\000\002\012\002\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\020\004\000\002\020\002\000\002" +
    "\017\004\000\002\017\004\000\002\016\005\000\002\016" +
    "\005\000\002\016\004\000\002\016\002\000\002\013\006" +
    "\000\002\015\004\000\002\015\002\000\002\014\005\000" +
    "\002\014\002\000\002\026\007\000\002\127\002\000\002" +
    "\026\010\000\002\030\007\000\002\130\002\000\002\030" +
    "\010\000\002\030\003\000\002\027\005\000\002\027\006" +
    "\000\002\027\002\000\002\031\010\000\002\031\010\000" +
    "\002\031\011\000\002\031\010\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\033" +
    "\010\000\002\033\006\000\002\033\005\000\002\033\004" +
    "\000\002\034\007\000\002\034\010\000\002\131\002\000" +
    "\002\034\010\000\002\132\002\000\002\034\011\000\002" +
    "\133\002\000\002\034\011\000\002\120\004\000\002\120" +
    "\004\000\002\047\003\000\002\047\004\000\002\023\004" +
    "\000\002\023\003\000\002\022\004\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\124\006\000\002" +
    "\124\006\000\002\125\007\000\002\134\002\000\002\125" +
    "\010\000\002\126\005\000\002\126\006\000\002\126\002" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\100\005\000\002\101\004\000\002" +
    "\101\002\000\002\102\005\000\002\102\002\000\002\075" +
    "\003\000\002\075\003\000\002\075\003\000\002\075\003" +
    "\000\002\075\005\000\002\075\003\000\002\075\005\000" +
    "\002\075\004\000\002\075\005\000\002\075\003\000\002" +
    "\076\003\000\002\076\003\000\002\076\004\000\002\076" +
    "\005\000\002\076\005\000\002\112\005\000\002\112\003" +
    "\000\002\103\004\000\002\103\002\000\002\104\004\000" +
    "\002\104\002\000\002\113\004\000\002\113\002\000\002" +
    "\115\004\000\002\115\002\000\002\114\003\000\002\114" +
    "\003\000\002\116\006\000\002\116\005\000\002\116\003" +
    "\000\002\117\006\000\002\117\003\000\002\004\004\000" +
    "\002\121\004\000\002\121\002\000\002\122\003\000\002" +
    "\122\003\000\002\122\003\000\002\037\003\000\002\043" +
    "\005\000\002\135\002\000\002\043\005\000\002\035\003" +
    "\000\002\041\004\000\002\036\006\000\002\036\005\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\110\003\000\002\110\003\000\002\107\003" +
    "\000\002\111\003\000\002\111\003\000\002\106\003\000" +
    "\002\106\003\000\002\106\003\000\002\050\003\000\002" +
    "\051\003\000\002\052\003\000\002\053\003\000\002\054" +
    "\003\000\002\057\003\000\002\056\003\000\002\055\003" +
    "\000\002\060\003\000\002\061\003\000\002\062\003\000" +
    "\002\063\003\000\002\064\003\000\002\066\003\000\002" +
    "\065\003\000\002\067\003\000\002\070\003\000\002\071" +
    "\003\000\002\072\003\000\002\073\003\000\002\074\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\012\002\ufffb\003\010\023\013\024\004\001" +
    "\002\000\006\003\202\004\203\001\002\000\004\002\uffff" +
    "\001\002\000\050\002\ufffb\003\ufffb\004\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\022\ufffb\024\004\025\ufffb\026\ufffb" +
    "\036\ufffb\037\ufffb\043\ufffb\044\ufffb\054\ufffb\056\ufffb\057" +
    "\ufffb\063\ufffb\001\002\000\004\002\000\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\200\001\002\000\004\002" +
    "\ufffd\001\002\000\006\003\016\004\017\001\002\000\004" +
    "\002\uff7a\001\002\000\050\002\uffe9\003\uffe9\004\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\022\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\036\uffe9\037\uffe9\043\uffe9\044\uffe9\054\uffe9\056" +
    "\uffe9\057\uffe9\063\uffe9\001\002\000\050\002\uff67\003\uff67" +
    "\004\uff67\006\uff67\007\uff67\010\uff67\011\uff67\022\uff67\024" +
    "\uff67\025\uff67\026\uff67\036\uff67\037\uff67\043\uff67\044\uff67" +
    "\054\uff67\056\uff67\057\uff67\063\uff67\001\002\000\004\055" +
    "\020\001\002\000\050\002\uffe9\003\uffe9\004\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\022\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\036\uffe9\037\uffe9\043\uffe9\044\uffe9\054\uffe9\056\uffe9" +
    "\057\uffe9\063\uffe9\001\002\000\004\002\uff78\001\002\000" +
    "\050\002\ufffb\003\ufffb\004\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\022\ufffb\024\004\025\ufffb\026\ufffb\036\ufffb\037" +
    "\ufffb\043\ufffb\044\ufffb\054\ufffb\056\ufffb\057\ufffb\063\ufffb" +
    "\001\002\000\050\002\uff7e\003\025\004\uff7e\006\uff7e\007" +
    "\uff7e\010\uff7e\011\uff7e\022\026\024\uff7e\025\uff7e\026\uff7e" +
    "\036\uff7e\037\uff7e\043\uff7e\044\uff7e\054\uff7e\056\uff7e\057" +
    "\uff7e\063\uff7e\001\002\000\004\004\044\001\002\000\052" +
    "\002\uff66\003\uff66\004\uff66\006\uff66\007\uff66\010\uff66\011" +
    "\uff66\022\uff66\024\uff66\025\uff66\026\uff66\036\uff66\037\uff66" +
    "\043\uff66\044\uff66\054\uff66\056\uff66\057\uff66\061\uff66\063" +
    "\uff66\001\002\000\006\003\025\004\031\001\002\000\050" +
    "\002\uffea\003\uffea\004\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\022\uffea\024\uffea\025\uffea\026\uffea\036\uffea\037\uffea" +
    "\043\uffea\044\uffea\054\uffea\056\uffea\057\uffea\063\uffea\001" +
    "\002\000\052\002\uffec\003\025\004\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\022\uffec\024\uffec\025\uffec\026\uffec\036" +
    "\uffec\037\uffec\043\uffec\044\uffec\054\uffec\056\uffec\057\uffec" +
    "\061\034\063\uffec\001\002\000\052\002\uffe3\003\025\004" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\022\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\036\uffe3\037\uffe3\043\uffe3\044\uffe3\054" +
    "\uffe3\056\uffe3\057\uffe3\061\034\063\uffe3\001\002\000\050" +
    "\002\uffed\003\uffed\004\uffed\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\022\uffed\024\uffed\025\uffed\026\uffed\036\uffed\037\uffed" +
    "\043\uffed\044\uffed\054\uffed\056\uffed\057\uffed\063\uffed\001" +
    "\002\000\052\002\uffe3\003\025\004\040\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\036" +
    "\uffe3\037\uffe3\043\uffe3\044\uffe3\054\uffe3\056\uffe3\057\uffe3" +
    "\061\034\063\uffe3\001\002\000\004\004\036\001\002\000" +
    "\050\002\uffe8\003\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\036\uffe8\037" +
    "\uffe8\043\uffe8\044\uffe8\054\uffe8\056\uffe8\057\uffe8\063\uffe8" +
    "\001\002\000\052\002\uffe3\003\025\004\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\036\uffe3\037\uffe3\043\uffe3\044\uffe3\054\uffe3\056\uffe3\057" +
    "\uffe3\061\034\063\uffe3\001\002\000\050\002\uffe6\003\uffe6" +
    "\004\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\022\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\036\uffe6\037\uffe6\043\uffe6\044\uffe6" +
    "\054\uffe6\056\uffe6\057\uffe6\063\uffe6\001\002\000\052\002" +
    "\uffe3\003\025\004\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\022\uffe3\024\uffe3\025\uffe3\026\uffe3\036\uffe3\037\uffe3\043" +
    "\uffe3\044\uffe3\054\uffe3\056\uffe3\057\uffe3\061\034\063\uffe3" +
    "\001\002\000\050\002\uffe4\003\uffe4\004\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\036\uffe4\037\uffe4\043\uffe4\044\uffe4\054\uffe4\056\uffe4\057" +
    "\uffe4\063\uffe4\001\002\000\050\002\uffe5\003\uffe5\004\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\022\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\036\uffe5\037\uffe5\043\uffe5\044\uffe5\054\uffe5" +
    "\056\uffe5\057\uffe5\063\uffe5\001\002\000\050\002\uffe7\003" +
    "\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\022\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\036\uffe7\037\uffe7\043\uffe7\044" +
    "\uffe7\054\uffe7\056\uffe7\057\uffe7\063\uffe7\001\002\000\050" +
    "\002\uffeb\003\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\036\uffeb\037\uffeb" +
    "\043\uffeb\044\uffeb\054\uffeb\056\uffeb\057\uffeb\063\uffeb\001" +
    "\002\000\046\002\uff7c\003\uff7c\004\uff7c\006\uff7c\007\uff7c" +
    "\010\uff7c\011\uff7c\022\uff7c\025\uff7c\026\uff7c\036\uff7c\037" +
    "\uff7c\043\uff7c\044\uff7c\054\uff7c\056\047\057\uff7c\063\uff7c" +
    "\001\002\000\004\002\uff79\001\002\000\044\002\uffe9\003" +
    "\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\022\uffe9" +
    "\025\uffe9\026\uffe9\036\uffe9\037\uffe9\043\uffe9\044\uffe9\054" +
    "\uffe9\057\uffe9\063\uffe9\001\002\000\044\002\uffe9\003\uffe9" +
    "\004\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\022\uffe9\025" +
    "\uffe9\026\uffe9\036\uffe9\037\uffe9\043\uffe9\044\uffe9\054\uffe9" +
    "\057\uffe9\063\uffe9\001\002\000\044\002\uff82\003\025\004" +
    "\uff82\006\uff82\007\uff82\010\uff82\011\uff82\022\026\025\uff82" +
    "\026\uff82\036\uff82\037\uff82\043\uff82\044\uff82\054\uff82\057" +
    "\uff82\063\uff82\001\002\000\004\002\uff7b\001\002\000\042" +
    "\002\uff84\003\077\004\111\006\054\007\070\010\055\011" +
    "\067\025\073\026\072\036\107\037\057\043\105\044\056" +
    "\054\075\057\062\063\101\001\002\000\072\002\uffad\003" +
    "\uffad\004\uffad\006\uffad\007\uffad\010\uffad\011\uffad\013\uffad" +
    "\025\uffad\026\uffad\036\uffad\037\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063" +
    "\uffad\001\002\000\072\002\uffab\003\uffab\004\uffab\006\uffab" +
    "\007\uffab\010\uffab\011\uffab\013\uffab\025\uffab\026\uffab\036" +
    "\uffab\037\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\057" +
    "\uffab\060\uffab\061\uffab\062\uffab\063\uffab\001\002\000\034" +
    "\003\uff6e\004\uff6e\006\uff6e\007\uff6e\010\uff6e\011\uff6e\025" +
    "\uff6e\026\uff6e\043\uff6e\044\uff6e\054\uff6e\057\uff6e\063\uff6e" +
    "\001\002\000\004\057\172\001\002\000\062\002\uff7f\003" +
    "\uff7f\004\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\013\124" +
    "\025\uff7f\026\uff7f\036\uff7f\037\uff7f\043\141\044\130\045" +
    "\137\046\125\047\126\050\135\051\133\052\132\053\142" +
    "\054\127\057\uff7f\063\uff7f\001\002\000\072\002\uff9b\003" +
    "\uff9b\004\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\013\uff9b" +
    "\025\uff9b\026\uff9b\036\uff9b\037\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\001\002\000\034\003\116\004\120\006\054\007\070" +
    "\010\055\011\067\025\073\026\072\043\105\044\056\054" +
    "\075\057\062\063\101\001\002\000\042\002\uff8a\003\uff8a" +
    "\004\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\025\uff8a\026" +
    "\uff8a\036\uff8a\037\uff8a\043\uff8a\044\uff8a\054\uff8a\057\uff8a" +
    "\063\uff8a\001\002\000\042\002\uff81\003\uff81\004\uff81\006" +
    "\uff81\007\uff81\010\uff81\011\uff81\025\uff81\026\uff81\036\uff81" +
    "\037\uff81\043\uff81\044\uff81\054\uff81\057\uff81\063\uff81\001" +
    "\002\000\042\002\uff85\003\uff85\004\uff85\006\uff85\007\uff85" +
    "\010\uff85\011\uff85\025\uff85\026\uff85\036\uff85\037\uff85\043" +
    "\uff85\044\uff85\054\uff85\057\uff85\063\uff85\001\002\000\072" +
    "\002\uffa1\003\uffa1\004\uffa1\006\uffa1\007\uffa1\010\uffa1\011" +
    "\uffa1\013\uffa1\025\uffa1\026\uffa1\036\uffa1\037\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\057\uffa1\060\uffa1\061\uffa1" +
    "\062\uffa1\063\uffa1\001\002\000\072\002\uffaa\003\uffaa\004" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\013\uffaa\025\uffaa" +
    "\026\uffaa\036\uffaa\037\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\055\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\001" +
    "\002\000\072\002\uffac\003\uffac\004\uffac\006\uffac\007\uffac" +
    "\010\uffac\011\uffac\013\uffac\025\uffac\026\uffac\036\uffac\037" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\063\uffac\001\002\000\072\002\uffa3" +
    "\003\uffa3\004\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\013" +
    "\uffa3\025\uffa3\026\uffa3\036\uffa3\037\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3" +
    "\063\uffa3\001\002\000\072\002\uff99\003\uff99\004\uff99\006" +
    "\uff99\007\uff99\010\uff99\011\uff99\013\uff99\025\uff99\026\uff99" +
    "\036\uff99\037\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047" +
    "\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99" +
    "\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99\001\002\000" +
    "\072\002\uff9a\003\uff9a\004\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\013\uff9a\025\uff9a\026\uff9a\036\uff9a\037\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\054\uff9a\055\uff9a\057\uff9a\060\uff9a\061" +
    "\uff9a\062\uff9a\063\uff9a\001\002\000\042\002\uff94\003\uff94" +
    "\004\uff94\006\uff94\007\uff94\010\uff94\011\uff94\025\uff94\026" +
    "\uff94\036\uff94\037\uff94\043\uff94\044\uff94\054\uff94\057\uff94" +
    "\063\uff94\001\002\000\034\003\116\004\120\006\054\007" +
    "\070\010\055\011\067\025\073\026\072\043\105\044\056" +
    "\054\075\057\062\063\101\001\002\000\072\002\uff9f\003" +
    "\uff9f\004\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\013\uff9f" +
    "\025\uff9f\026\uff9f\036\uff9f\037\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063" +
    "\uff9f\001\002\000\062\002\uff63\003\uff63\004\uff63\006\uff63" +
    "\007\uff63\010\uff63\011\uff63\013\uff63\025\uff63\026\uff63\036" +
    "\uff63\037\uff63\043\uff63\044\uff63\045\uff63\046\uff63\047\uff63" +
    "\050\uff63\051\uff63\052\uff63\053\uff63\054\uff63\057\uff63\063" +
    "\uff63\001\002\000\042\002\uff8b\003\uff8b\004\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\011\uff8b\025\uff8b\026\uff8b\036\uff8b\037" +
    "\uff8b\043\uff8b\044\uff8b\054\uff8b\057\uff8b\063\uff8b\001\002" +
    "\000\036\003\116\004\120\006\054\007\070\010\055\011" +
    "\067\025\073\026\072\043\105\044\056\054\075\057\062" +
    "\062\uffa7\063\101\001\002\000\042\002\uff80\003\uff80\004" +
    "\uff80\006\uff80\007\uff80\010\uff80\011\uff80\025\uff80\026\uff80" +
    "\036\uff80\037\uff80\043\uff80\044\uff80\054\uff80\057\uff80\063" +
    "\uff80\001\002\000\034\003\116\004\120\006\054\007\070" +
    "\010\055\011\067\025\073\026\072\043\105\044\056\054" +
    "\075\057\062\063\101\001\002\000\042\002\uff87\003\uff87" +
    "\004\uff87\006\uff87\007\uff87\010\uff87\011\uff87\025\uff87\026" +
    "\uff87\036\uff87\037\uff87\043\uff87\044\uff87\054\uff87\057\uff87" +
    "\063\uff87\001\002\000\034\003\uff6f\004\uff6f\006\uff6f\007" +
    "\uff6f\010\uff6f\011\uff6f\025\uff6f\026\uff6f\043\uff6f\044\uff6f" +
    "\054\uff6f\057\uff6f\063\uff6f\001\002\000\072\002\uffa4\003" +
    "\uffa4\004\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\013\uffa4" +
    "\025\uffa4\026\uffa4\036\uffa4\037\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\001\002\000\004\057\152\001\002\000\042\002\uff83" +
    "\003\uff83\004\uff83\006\uff83\007\uff83\010\uff83\011\uff83\025" +
    "\uff83\026\uff83\036\uff83\037\uff83\043\uff83\044\uff83\054\uff83" +
    "\057\uff83\063\uff83\001\002\000\066\002\uffa2\003\uffa2\004" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\013\uffa2\014\113" +
    "\025\uffa2\026\uffa2\036\uffa2\037\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\054\uffa2\057\114\063\uffa2\064\112\001\002\000\004\004" +
    "\150\001\002\000\034\003\116\004\120\006\054\007\070" +
    "\010\055\011\067\025\073\026\072\043\105\044\056\054" +
    "\075\057\062\063\101\001\002\000\036\003\116\004\120" +
    "\006\054\007\070\010\055\011\067\025\073\026\072\043" +
    "\105\044\056\054\075\057\062\060\uffe0\063\101\001\002" +
    "\000\034\013\124\043\141\044\130\045\137\046\125\047" +
    "\126\050\135\051\133\052\132\053\142\054\127\060\uffde" +
    "\061\123\001\002\000\072\002\uff63\003\uff63\004\uff63\006" +
    "\uff63\007\uff63\010\uff63\011\uff63\013\uff63\025\uff63\026\uff63" +
    "\036\uff63\037\uff63\043\uff63\044\uff63\045\uff63\046\uff63\047" +
    "\uff63\050\uff63\051\uff63\052\uff63\053\uff63\054\uff63\055\uff63" +
    "\057\uff63\060\uff63\061\uff63\062\uff63\063\uff63\001\002\000" +
    "\004\060\121\001\002\000\074\002\uffa2\003\uffa2\004\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\011\uffa2\013\uffa2\025\uffa2\026" +
    "\uffa2\036\uffa2\037\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\057\114\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\112" +
    "\001\002\000\072\002\uffe2\003\uffe2\004\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\013\uffe2\025\uffe2\026\uffe2\036\uffe2" +
    "\037\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\001\002\000\034\003" +
    "\uff6d\004\uff6d\006\uff6d\007\uff6d\010\uff6d\011\uff6d\025\uff6d" +
    "\026\uff6d\043\uff6d\044\uff6d\054\uff6d\057\uff6d\063\uff6d\001" +
    "\002\000\034\003\116\004\120\006\054\007\070\010\055" +
    "\011\067\025\073\026\072\043\105\044\056\054\075\057" +
    "\062\063\101\001\002\000\034\003\uff6c\004\uff6c\006\uff6c" +
    "\007\uff6c\010\uff6c\011\uff6c\025\uff6c\026\uff6c\043\uff6c\044" +
    "\uff6c\054\uff6c\057\uff6c\063\uff6c\001\002\000\034\003\uff73" +
    "\004\uff73\006\uff73\007\uff73\010\uff73\011\uff73\025\uff73\026" +
    "\uff73\043\uff73\044\uff73\054\uff73\057\uff73\063\uff73\001\002" +
    "\000\034\003\uff72\004\uff72\006\uff72\007\uff72\010\uff72\011" +
    "\uff72\025\uff72\026\uff72\043\uff72\044\uff72\054\uff72\057\uff72" +
    "\063\uff72\001\002\000\034\003\uff68\004\uff68\006\uff68\007" +
    "\uff68\010\uff68\011\uff68\025\uff68\026\uff68\043\uff68\044\uff68" +
    "\054\uff68\057\uff68\063\uff68\001\002\000\034\003\uff75\004" +
    "\uff75\006\uff75\007\uff75\010\uff75\011\uff75\025\uff75\026\uff75" +
    "\043\uff75\044\uff75\054\uff75\057\uff75\063\uff75\001\002\000" +
    "\004\060\uffe1\001\002\000\034\003\uff6a\004\uff6a\006\uff6a" +
    "\007\uff6a\010\uff6a\011\uff6a\025\uff6a\026\uff6a\043\uff6a\044" +
    "\uff6a\054\uff6a\057\uff6a\063\uff6a\001\002\000\034\003\uff70" +
    "\004\uff70\006\uff70\007\uff70\010\uff70\011\uff70\025\uff70\026" +
    "\uff70\043\uff70\044\uff70\054\uff70\057\uff70\063\uff70\001\002" +
    "\000\034\003\116\004\120\006\054\007\070\010\055\011" +
    "\067\025\073\026\072\043\105\044\056\054\075\057\062" +
    "\063\101\001\002\000\034\003\uff71\004\uff71\006\uff71\007" +
    "\uff71\010\uff71\011\uff71\025\uff71\026\uff71\043\uff71\044\uff71" +
    "\054\uff71\057\uff71\063\uff71\001\002\000\034\003\116\004" +
    "\120\006\054\007\070\010\055\011\067\025\073\026\072" +
    "\043\105\044\056\054\075\057\062\063\101\001\002\000" +
    "\034\003\uff74\004\uff74\006\uff74\007\uff74\010\uff74\011\uff74" +
    "\025\uff74\026\uff74\043\uff74\044\uff74\054\uff74\057\uff74\063" +
    "\uff74\001\002\000\034\003\uff6b\004\uff6b\006\uff6b\007\uff6b" +
    "\010\uff6b\011\uff6b\025\uff6b\026\uff6b\043\uff6b\044\uff6b\054" +
    "\uff6b\057\uff6b\063\uff6b\001\002\000\034\003\uff76\004\uff76" +
    "\006\uff76\007\uff76\010\uff76\011\uff76\025\uff76\026\uff76\043" +
    "\uff76\044\uff76\054\uff76\057\uff76\063\uff76\001\002\000\034" +
    "\003\uff69\004\uff69\006\uff69\007\uff69\010\uff69\011\uff69\025" +
    "\uff69\026\uff69\043\uff69\044\uff69\054\uff69\057\uff69\063\uff69" +
    "\001\002\000\072\002\uff97\003\uff97\004\uff97\006\uff97\007" +
    "\uff97\010\uff97\011\uff97\013\124\025\uff97\026\uff97\036\uff97" +
    "\037\uff97\043\141\044\130\045\137\046\125\047\126\050" +
    "\135\051\133\052\132\053\142\054\127\055\uff97\057\uff97" +
    "\060\uff97\061\uff97\062\uff97\063\uff97\001\002\000\072\002" +
    "\uff9e\003\uff9e\004\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e" +
    "\013\124\025\uff9e\026\uff9e\036\uff9e\037\uff9e\043\141\044" +
    "\130\045\137\046\125\047\126\050\135\051\133\052\132" +
    "\053\142\054\127\055\uff9e\057\uff9e\060\uff9e\061\uff9e\062" +
    "\uff9e\063\uff9e\001\002\000\034\013\124\043\141\044\130" +
    "\045\137\046\125\047\126\050\135\051\133\052\132\053" +
    "\142\054\127\060\uffde\061\123\001\002\000\004\060\uffdf" +
    "\001\002\000\062\002\uff95\003\uff95\004\uff95\006\uff95\007" +
    "\uff95\010\uff95\011\uff95\013\124\025\uff95\026\uff95\036\uff95" +
    "\037\uff95\043\141\044\130\045\137\046\125\047\126\050" +
    "\135\051\133\052\132\053\142\054\uff95\057\uff95\063\uff95" +
    "\001\002\000\004\057\114\001\002\000\072\002\uff9c\003" +
    "\uff9c\004\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\013\uff9c" +
    "\025\uff9c\026\uff9c\036\uff9c\037\uff9c\043\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063" +
    "\uff9c\001\002\000\036\003\116\004\120\006\054\007\070" +
    "\010\055\011\067\025\073\026\072\043\105\044\056\054" +
    "\075\057\062\060\uffa7\063\101\001\002\000\036\013\124" +
    "\043\141\044\130\045\137\046\125\047\126\050\135\051" +
    "\133\052\132\053\142\054\127\060\uffa5\061\156\062\uffa5" +
    "\001\002\000\004\060\155\001\002\000\042\002\uff86\003" +
    "\uff86\004\uff86\006\uff86\007\uff86\010\uff86\011\uff86\025\uff86" +
    "\026\uff86\036\uff86\037\uff86\043\uff86\044\uff86\054\uff86\057" +
    "\uff86\063\uff86\001\002\000\034\003\116\004\120\006\054" +
    "\007\070\010\055\011\067\025\073\026\072\043\105\044" +
    "\056\054\075\057\062\063\101\001\002\000\006\060\uffa8" +
    "\062\uffa8\001\002\000\036\013\124\043\141\044\130\045" +
    "\137\046\125\047\126\050\135\051\133\052\132\053\142" +
    "\054\127\060\uffa5\061\156\062\uffa5\001\002\000\006\060" +
    "\uffa6\062\uffa6\001\002\000\072\002\uff9d\003\uff9d\004\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\013\124\025\uff9d\026" +
    "\uff9d\036\uff9d\037\uff9d\043\141\044\130\045\137\046\125" +
    "\047\126\050\135\051\133\052\132\053\142\054\127\055" +
    "\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\001\002" +
    "\000\004\062\164\001\002\000\072\002\uffa9\003\uffa9\004" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\013\uffa9\025\uffa9" +
    "\026\uffa9\036\uffa9\037\uffa9\043\uffa9\044\uffa9\045\uffa9\046" +
    "\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\001" +
    "\002\000\072\002\uff98\003\uff98\004\uff98\006\uff98\007\uff98" +
    "\010\uff98\011\uff98\013\124\025\uff98\026\uff98\036\uff98\037" +
    "\uff98\043\141\044\130\045\137\046\125\047\126\050\135" +
    "\051\133\052\uff98\053\uff98\054\uff98\055\uff98\057\uff98\060" +
    "\uff98\061\uff98\062\uff98\063\uff98\001\002\000\032\013\124" +
    "\043\141\044\130\045\137\046\125\047\126\050\135\051" +
    "\133\052\132\053\142\054\127\060\171\001\002\000\032" +
    "\013\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\060\170\001\002" +
    "\000\072\002\uff96\003\uff96\004\uff96\006\uff96\007\uff96\010" +
    "\uff96\011\uff96\013\uff96\025\uff96\026\uff96\036\uff96\037\uff96" +
    "\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\053\uff96\054\uff96\055\uff96\057\uff96\060\uff96" +
    "\061\uff96\062\uff96\063\uff96\001\002\000\072\002\uffa0\003" +
    "\uffa0\004\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\013\uffa0" +
    "\025\uffa0\026\uffa0\036\uffa0\037\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0" +
    "\054\uffa0\055\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\001\002\000\036\003\116\004\120\006\054\007\070" +
    "\010\055\011\067\025\073\026\072\043\105\044\056\054" +
    "\075\057\062\060\174\063\101\001\002\000\032\013\124" +
    "\043\141\044\130\045\137\046\125\047\126\050\135\051" +
    "\133\052\132\053\142\054\127\060\175\001\002\000\042" +
    "\002\uff88\003\uff88\004\uff88\006\uff88\007\uff88\010\uff88\011" +
    "\uff88\025\uff88\026\uff88\036\uff88\037\uff88\043\uff88\044\uff88" +
    "\054\uff88\057\uff88\063\uff88\001\002\000\042\002\uff89\003" +
    "\uff89\004\uff89\006\uff89\007\uff89\010\uff89\011\uff89\025\uff89" +
    "\026\uff89\036\uff89\037\uff89\043\uff89\044\uff89\054\uff89\057" +
    "\uff89\063\uff89\001\002\000\004\002\uff7d\001\002\000\004" +
    "\002\uff77\001\002\000\004\002\001\001\002\000\046\002" +
    "\ufffc\003\ufffc\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\022\ufffc\025\ufffc\026\ufffc\036\ufffc\037\ufffc\043\ufffc\044" +
    "\ufffc\054\ufffc\056\ufffc\057\ufffc\063\ufffc\001\002\000\006" +
    "\055\uff5d\056\uff5d\001\002\000\004\057\u010b\001\002\000" +
    "\006\055\205\056\206\001\002\000\016\003\216\027\217" +
    "\032\222\035\220\040\207\056\ufff3\001\002\000\050\002" +
    "\ufff8\003\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\022\ufff8\024\ufff8\025\ufff8\026\ufff8\036\ufff8\037\ufff8\043" +
    "\ufff8\044\ufff8\054\ufff8\056\ufff8\057\ufff8\063\ufff8\001\002" +
    "\000\006\003\364\055\365\001\002\000\014\027\217\032" +
    "\222\035\220\040\207\056\ufff3\001\002\000\014\027\217" +
    "\032\222\035\220\040\207\056\ufff3\001\002\000\004\056" +
    "\360\001\002\000\050\002\ufff9\003\ufff9\004\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\022\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\036\ufff9\037\ufff9\043\ufff9\044\ufff9\054\ufff9\056\ufff9" +
    "\057\ufff9\063\ufff9\001\002\000\014\027\217\032\222\035" +
    "\220\040\207\056\ufff3\001\002\000\014\027\217\032\222" +
    "\035\220\040\207\056\ufff3\001\002\000\004\056\uff65\001" +
    "\002\000\034\003\333\004\120\006\054\007\070\010\055" +
    "\011\067\025\073\026\072\043\105\044\056\054\075\057" +
    "\062\063\101\001\002\000\034\003\271\004\120\006\054" +
    "\007\070\010\055\011\067\025\073\026\072\043\105\044" +
    "\056\054\075\057\267\063\101\001\002\000\004\056\265" +
    "\001\002\000\006\003\223\004\225\001\002\000\010\003" +
    "\uff58\033\uff58\055\uff58\001\002\000\004\033\261\001\002" +
    "\000\006\003\227\033\226\001\002\000\012\003\223\004" +
    "\235\011\231\034\232\001\002\000\012\003\uff59\004\uff59" +
    "\011\uff59\034\uff59\001\002\000\012\003\223\004\235\011" +
    "\231\034\232\001\002\000\006\003\uffcf\055\uffcf\001\002" +
    "\000\006\003\241\057\244\001\002\000\004\055\237\001" +
    "\002\000\006\003\uffcc\055\uffcc\001\002\000\006\003\uffce" +
    "\055\uffce\001\002\000\006\003\uffcd\055\uffcd\001\002\000" +
    "\016\003\216\027\217\032\222\035\220\040\207\056\ufff3" +
    "\001\002\000\014\027\uffd0\032\uffd0\035\uffd0\040\uffd0\056" +
    "\uffd0\001\002\000\010\003\uff58\055\uff58\060\uff5a\001\002" +
    "\000\004\060\252\001\002\000\006\003\uffc8\055\uffc8\001" +
    "\002\000\004\006\245\001\002\000\006\060\247\061\246" +
    "\001\002\000\004\006\250\001\002\000\006\003\uffca\055" +
    "\uffca\001\002\000\004\060\251\001\002\000\006\003\uffcb" +
    "\055\uffcb\001\002\000\006\003\uffc9\055\uffc9\001\002\000" +
    "\006\003\223\055\255\001\002\000\004\055\257\001\002" +
    "\000\016\003\216\027\217\032\222\035\220\040\207\056" +
    "\ufff3\001\002\000\014\027\uffd3\032\uffd3\035\uffd3\040\uffd3" +
    "\056\uffd3\001\002\000\016\003\216\027\217\032\222\035" +
    "\220\040\207\056\ufff3\001\002\000\014\027\uffd1\032\uffd1" +
    "\035\uffd1\040\uffd1\056\uffd1\001\002\000\012\003\223\004" +
    "\235\011\231\034\232\001\002\000\004\055\263\001\002" +
    "\000\016\003\216\027\217\032\222\035\220\040\207\056" +
    "\ufff3\001\002\000\014\027\uffd2\032\uffd2\035\uffd2\040\uffd2" +
    "\056\uffd2\001\002\000\070\002\uffbf\003\uffbf\004\uffbf\006" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\022\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\054\uffbf\056\uffbf\057\uffbf\063\uffbf\001\002\000\030\013" +
    "\124\043\141\044\130\045\137\046\125\047\126\050\135" +
    "\051\133\052\132\053\142\054\127\001\002\000\036\003" +
    "\321\004\120\006\054\007\070\010\055\011\067\025\073" +
    "\026\072\043\105\044\056\054\075\057\062\060\322\063" +
    "\101\001\002\000\034\003\312\013\uff9b\043\uff9b\044\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\315\001\002\000\034\013\uff63\043\uff63" +
    "\044\uff63\045\uff63\046\uff63\047\uff63\050\uff63\051\uff63\052" +
    "\uff63\053\uff63\054\uff63\055\uffc5\060\uffc3\001\002\000\004" +
    "\060\306\001\002\000\004\055\274\001\002\000\016\003" +
    "\216\027\217\032\222\035\220\040\207\056\ufff3\001\002" +
    "\000\016\027\uffd4\030\277\032\uffd4\035\uffd4\040\uffd4\056" +
    "\uffd4\001\002\000\014\027\uffc4\032\uffc4\035\uffc4\040\uffc4" +
    "\056\uffc4\001\002\000\006\003\300\055\302\001\002\000" +
    "\004\055\uff57\001\002\000\004\055\304\001\002\000\016" +
    "\003\216\027\217\032\222\035\220\040\207\056\ufff3\001" +
    "\002\000\014\027\uffd6\032\uffd6\035\uffd6\040\uffd6\056\uffd6" +
    "\001\002\000\016\003\216\027\217\032\222\035\220\040" +
    "\207\056\ufff3\001\002\000\014\027\uffd5\032\uffd5\035\uffd5" +
    "\040\uffd5\056\uffd5\001\002\000\004\055\307\001\002\000" +
    "\016\003\216\027\217\032\222\035\220\040\207\056\ufff3" +
    "\001\002\000\016\027\uffd4\030\277\032\uffd4\035\uffd4\040" +
    "\uffd4\056\uffd4\001\002\000\014\027\uffc2\032\uffc2\035\uffc2" +
    "\040\uffc2\056\uffc2\001\002\000\004\055\uff56\001\002\000" +
    "\004\055\320\001\002\000\016\003\216\027\217\032\222" +
    "\035\220\040\207\056\ufff3\001\002\000\016\003\uffbd\027" +
    "\uffbd\032\uffbd\035\uffbd\040\uffbd\056\uffbd\001\002\000\016" +
    "\027\uffd4\030\277\032\uffd4\035\uffd4\040\uffd4\056\uffd4\001" +
    "\002\000\014\027\uffc7\032\uffc7\035\uffc7\040\uffc7\056\uffc7" +
    "\001\002\000\016\003\uffbc\027\uffbc\032\uffbc\035\uffbc\040" +
    "\uffbc\056\uffbc\001\002\000\034\013\uff63\043\uff63\044\uff63" +
    "\045\uff63\046\uff63\047\uff63\050\uff63\051\uff63\052\uff63\053" +
    "\uff63\054\uff63\055\uffc1\060\uff63\001\002\000\006\003\312" +
    "\055\315\001\002\000\016\003\216\027\217\032\222\035" +
    "\220\040\207\056\ufff3\001\002\000\016\027\uffd4\030\277" +
    "\032\uffd4\035\uffd4\040\uffd4\056\uffd4\001\002\000\014\027" +
    "\uffc6\032\uffc6\035\uffc6\040\uffc6\056\uffc6\001\002\000\004" +
    "\055\327\001\002\000\016\003\216\027\217\032\222\035" +
    "\220\040\207\056\ufff3\001\002\000\016\027\uffd4\030\277" +
    "\032\uffd4\035\uffd4\040\uffd4\056\uffd4\001\002\000\014\027" +
    "\uffc0\032\uffc0\035\uffc0\040\uffc0\056\uffc0\001\002\000\032" +
    "\013\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\353\001\002" +
    "\000\032\013\uff63\043\uff63\044\uff63\045\uff63\046\uff63\047" +
    "\uff63\050\uff63\051\uff63\052\uff63\053\uff63\054\uff63\055\uffdc" +
    "\001\002\000\004\055\335\001\002\000\016\003\216\027" +
    "\217\032\222\035\220\040\207\056\ufff3\001\002\000\020" +
    "\027\uffd4\030\277\031\341\032\uffd4\035\uffd4\040\uffd4\056" +
    "\uffd4\001\002\000\014\027\uffd7\032\uffd7\035\uffd7\040\uffd7" +
    "\056\uffd7\001\002\000\014\027\uffdb\032\uffdb\035\uffdb\040" +
    "\uffdb\056\uffdb\001\002\000\034\003\343\004\120\006\054" +
    "\007\070\010\055\011\067\025\073\026\072\043\105\044" +
    "\056\054\075\057\062\063\101\001\002\000\032\013\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\350\001\002\000\032" +
    "\013\uff63\043\uff63\044\uff63\045\uff63\046\uff63\047\uff63\050" +
    "\uff63\051\uff63\052\uff63\053\uff63\054\uff63\055\uffd9\001\002" +
    "\000\004\055\345\001\002\000\016\003\216\027\217\032" +
    "\222\035\220\040\207\056\ufff3\001\002\000\020\027\uffd4" +
    "\030\277\031\341\032\uffd4\035\uffd4\040\uffd4\056\uffd4\001" +
    "\002\000\014\027\uffd8\032\uffd8\035\uffd8\040\uffd8\056\uffd8" +
    "\001\002\000\016\003\216\027\217\032\222\035\220\040" +
    "\207\056\ufff3\001\002\000\020\027\uffd4\030\277\031\341" +
    "\032\uffd4\035\uffd4\040\uffd4\056\uffd4\001\002\000\014\027" +
    "\uffda\032\uffda\035\uffda\040\uffda\056\uffda\001\002\000\016" +
    "\003\216\027\217\032\222\035\220\040\207\056\ufff3\001" +
    "\002\000\020\027\uffd4\030\277\031\341\032\uffd4\035\uffd4" +
    "\040\uffd4\056\uffd4\001\002\000\014\027\uffdd\032\uffdd\035" +
    "\uffdd\040\uffdd\056\uffdd\001\002\000\004\056\ufff6\001\002" +
    "\000\004\056\ufff4\001\002\000\070\002\uffbe\003\uffbe\004" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\022\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\054\uffbe\056\uffbe\057\uffbe\063\uffbe\001\002\000" +
    "\004\056\ufff7\001\002\000\004\056\ufff5\001\002\000\016" +
    "\003\216\027\217\032\222\035\220\040\207\056\ufff3\001" +
    "\002\000\016\003\uff55\027\uff55\032\uff55\035\uff55\040\uff55" +
    "\056\uff55\001\002\000\016\003\216\027\217\032\222\035" +
    "\220\040\207\056\ufff3\001\002\000\004\041\370\001\002" +
    "\000\014\027\uffb5\032\uffb5\035\uffb5\040\uffb5\056\uffb5\001" +
    "\002\000\006\003\371\004\372\001\002\000\004\055\uffb2" +
    "\001\002\000\004\055\373\001\002\000\016\003\216\027" +
    "\217\032\222\035\220\040\207\056\ufff3\001\002\000\016" +
    "\027\uffae\032\uffae\035\uffae\040\uffae\042\375\056\uffae\001" +
    "\002\000\006\003\377\055\u0100\001\002\000\014\027\uffb3" +
    "\032\uffb3\035\uffb3\040\uffb3\056\uffb3\001\002\000\004\055" +
    "\uff53\001\002\000\016\003\216\027\217\032\222\035\220" +
    "\040\207\056\ufff3\001\002\000\004\055\u0102\001\002\000" +
    "\016\003\216\027\217\032\222\035\220\040\207\056\ufff3" +
    "\001\002\000\014\027\uffaf\032\uffaf\035\uffaf\040\uffaf\056" +
    "\uffaf\001\002\000\014\027\uffb0\032\uffb0\035\uffb0\040\uffb0" +
    "\056\uffb0\001\002\000\004\055\u0106\001\002\000\016\003" +
    "\216\027\217\032\222\035\220\040\207\056\ufff3\001\002" +
    "\000\016\027\uffae\032\uffae\035\uffae\040\uffae\042\375\056" +
    "\uffae\001\002\000\014\027\uffb1\032\uffb1\035\uffb1\040\uffb1" +
    "\056\uffb1\001\002\000\004\041\370\001\002\000\014\027" +
    "\uffb4\032\uffb4\035\uffb4\040\uffb4\056\uffb4\001\002\000\006" +
    "\022\u010d\060\ufff0\001\002\000\004\060\u0117\001\002\000" +
    "\006\003\u010e\004\u010f\001\002\000\006\060\uff5c\061\uff5c" +
    "\001\002\000\006\060\uffee\061\u0112\001\002\000\006\060" +
    "\uffee\061\u0112\001\002\000\004\060\ufff1\001\002\000\004" +
    "\022\u0113\001\002\000\004\004\u0114\001\002\000\006\060" +
    "\uffee\061\u0112\001\002\000\004\060\uffef\001\002\000\004" +
    "\060\ufff2\001\002\000\004\055\u0118\001\002\000\016\003" +
    "\216\027\217\032\222\035\220\040\207\056\ufff3\001\002" +
    "\000\050\002\ufffa\003\ufffa\004\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\022\ufffa\024\ufffa\025\ufffa\026\ufffa\036\ufffa" +
    "\037\ufffa\043\ufffa\044\ufffa\054\ufffa\056\ufffa\057\ufffa\063" +
    "\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\016\002\010\005\006\006\005\007\011\035" +
    "\004\036\013\001\001\000\004\062\203\001\001\000\002" +
    "\001\001\000\006\006\005\007\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\014\001\001\000\002\001\001\000\010\020" +
    "\022\037\021\041\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\022\037\021\041\020\001\001\000" +
    "\002\001\001\000\010\006\005\007\044\043\045\001\001" +
    "\000\006\003\026\051\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\031\051\027\001\001\000\002" +
    "\001\001\000\006\016\042\051\032\001\001\000\006\016" +
    "\034\051\032\001\001\000\002\001\001\000\006\016\040" +
    "\051\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\036\051\032\001\001\000\002\001\001\000\006" +
    "\016\041\051\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\135\047" +
    "\001\001\000\002\001\001\000\006\004\175\020\050\001" +
    "\001\000\006\004\051\020\050\001\001\000\010\003\026" +
    "\051\023\121\052\001\001\000\002\001\001\000\040\013" +
    "\065\054\075\056\073\060\103\061\064\075\057\076\060" +
    "\077\105\100\070\110\102\112\101\114\063\116\077\117" +
    "\062\122\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\105\121\106" +
    "\137\107\133\111\135\001\001\000\002\001\001\000\020" +
    "\013\065\054\075\075\165\076\166\077\105\100\070\110" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\065\054\075\075\164\076" +
    "\060\077\105\100\070\110\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\065\054" +
    "\075\075\152\076\060\077\105\100\070\101\162\110\102" +
    "\001\001\000\002\001\001\000\020\013\065\054\075\075" +
    "\161\076\060\077\105\100\070\110\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\150" +
    "\001\001\000\020\013\065\054\075\075\146\076\060\077" +
    "\105\100\070\110\102\001\001\000\022\013\065\015\116" +
    "\054\075\075\114\076\060\077\105\100\070\110\102\001" +
    "\001\000\014\014\130\105\121\106\137\107\133\111\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\065" +
    "\054\075\075\144\076\060\077\105\100\070\110\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\065\054\075" +
    "\075\143\076\060\077\105\100\070\110\102\001\001\000" +
    "\002\001\001\000\020\013\065\054\075\075\142\076\060" +
    "\077\105\100\070\110\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\105\121\106\137\107\133\111\135\001\001\000\012\105" +
    "\121\106\137\107\133\111\135\001\001\000\014\014\145" +
    "\105\121\106\137\107\133\111\135\001\001\000\002\001" +
    "\001\000\012\105\121\106\137\107\133\111\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\065\054" +
    "\075\075\152\076\060\077\105\100\070\101\153\110\102" +
    "\001\001\000\014\102\156\105\121\106\137\107\133\111" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\065\054\075\075\157\076\060\077\105\100\070\110" +
    "\102\001\001\000\002\001\001\000\014\102\160\105\121" +
    "\106\137\107\133\111\135\001\001\000\002\001\001\000" +
    "\012\105\121\106\137\107\133\111\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\105\121\106\137\107" +
    "\133\111\135\001\001\000\012\105\121\106\137\107\133" +
    "\111\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\065\054\075\075\172\076\060" +
    "\077\105\100\070\110\102\001\001\000\012\105\121\106" +
    "\137\107\133\111\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\024\220\026\210\031\214\034" +
    "\207\052\211\120\212\124\213\001\001\000\002\001\001" +
    "\000\004\072\362\001\001\000\014\024\361\026\210\031" +
    "\214\034\207\124\213\001\001\000\014\024\360\026\210" +
    "\031\214\034\207\124\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\024\356\026\210\031\214\034\207" +
    "\124\213\001\001\000\014\024\355\026\210\031\214\034" +
    "\207\124\213\001\001\000\002\001\001\000\020\013\065" +
    "\054\075\075\265\076\331\077\105\100\070\110\102\001" +
    "\001\000\020\013\065\054\075\075\265\076\267\077\105" +
    "\100\070\110\102\001\001\000\002\001\001\000\004\067" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\227\001\001\000\010\032\252\033\235\067\233\001" +
    "\001\000\002\001\001\000\010\032\232\033\235\067\233" +
    "\001\001\000\002\001\001\000\006\066\241\067\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\024\220\026\210\031\214\034" +
    "\207\052\211\120\237\124\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\253\001\001\000\002\001\001\000\020" +
    "\024\220\026\210\031\214\034\207\052\211\120\255\124" +
    "\213\001\001\000\002\001\001\000\020\024\220\026\210" +
    "\031\214\034\207\052\211\120\257\124\213\001\001\000" +
    "\002\001\001\000\010\032\261\033\235\067\233\001\001" +
    "\000\002\001\001\000\020\024\220\026\210\031\214\034" +
    "\207\052\211\120\263\124\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\105\121\106\137\107\133\111" +
    "\135\001\001\000\020\013\065\054\075\075\165\076\166" +
    "\077\105\100\070\110\102\001\001\000\006\047\313\071" +
    "\312\001\001\000\006\131\272\132\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\024\220\026\210\031" +
    "\214\034\207\052\211\120\274\124\213\001\001\000\004" +
    "\027\275\001\001\000\002\001\001\000\004\070\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\024\220" +
    "\026\210\031\214\034\207\052\211\120\302\124\213\001" +
    "\001\000\002\001\001\000\020\024\220\026\210\031\214" +
    "\034\207\052\211\120\304\124\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\024\220\026\210\031\214" +
    "\034\207\052\211\120\307\124\213\001\001\000\004\027" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\024\220\026\210\031\214\034\207\052" +
    "\211\120\315\124\213\001\001\000\002\001\001\000\004" +
    "\027\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\133\325\001\001\000\006\047\322\071\312\001\001" +
    "\000\020\024\220\026\210\031\214\034\207\052\211\120" +
    "\323\124\213\001\001\000\004\027\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\024\220\026\210\031" +
    "\214\034\207\052\211\120\327\124\213\001\001\000\004" +
    "\027\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\333\001\001\000\002\001\001\000\020\024\220" +
    "\026\210\031\214\034\207\052\211\120\335\124\213\001" +
    "\001\000\006\027\336\030\337\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\065\054\075\075\265\076" +
    "\341\077\105\100\070\110\102\001\001\000\002\001\001" +
    "\000\004\130\343\001\001\000\002\001\001\000\020\024" +
    "\220\026\210\031\214\034\207\052\211\120\345\124\213" +
    "\001\001\000\006\027\336\030\346\001\001\000\002\001" +
    "\001\000\020\024\220\026\210\031\214\034\207\052\211" +
    "\120\350\124\213\001\001\000\006\027\336\030\351\001" +
    "\001\000\002\001\001\000\020\024\220\026\210\031\214" +
    "\034\207\052\211\120\353\124\213\001\001\000\006\027" +
    "\336\030\354\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\024\220\026\210\031\214\034\207" +
    "\052\211\120\u0108\124\213\001\001\000\002\001\001\000" +
    "\020\024\220\026\210\031\214\034\207\052\211\120\365" +
    "\124\213\001\001\000\004\125\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\134\u0104\001\001\000\002" +
    "\001\001\000\020\024\220\026\210\031\214\034\207\052" +
    "\211\120\373\124\213\001\001\000\004\126\375\001\001" +
    "\000\004\074\u0100\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\024\220\026\210\031\214\034\207\052\211" +
    "\120\u0103\124\213\001\001\000\002\001\001\000\020\024" +
    "\220\026\210\031\214\034\207\052\211\120\u0102\124\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\024\220\026\210\031\214\034\207\052\211" +
    "\120\u0106\124\213\001\001\000\004\126\u0107\001\001\000" +
    "\002\001\001\000\004\125\u0109\001\001\000\002\001\001" +
    "\000\004\011\u010b\001\001\000\002\001\001\000\004\063" +
    "\u010f\001\001\000\002\001\001\000\004\012\u0115\001\001" +
    "\000\004\012\u0110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\024" +
    "\220\026\210\031\214\034\207\052\211\120\u0118\124\213" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;

  ArrayList<String> errores;

  public Analizador(java_cup.runtime.Scanner s, boolean type) {
    super(s);
    errores = new ArrayList<String>();
  }
  
  public void addError(String error){
    errores.add(error);
    /*ProyectoCompi.PoyectoCompi.consola.impirmir(error);*/
  }

  public ArrayList<String> retornarLista(){
    return errores;
  }
  public void syntax_error(Symbol s){
    System.out.println("Error en la linea : " + s.value);
   
  }
/*public void unrecovered_syntax_error(Symbol s){
    System.out.println("Error crítico en la linea : " + s.value);
  }*/
protected int error_sync_size(){
    return 1;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {



  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Funcional 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo Funcional."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= OOP 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo OOP."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= error 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Error por final de archivo. (Simbolos extra?)");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Funcional ::= DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcional",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DefFunciones ::= DefFuncion DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DefFunciones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DefFuncion ::= def identificador parenAbierto DefParametrosFact parenCerrado dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DefFuncion ::= def errDecFuncion dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DefFuncion ::= def errDecFuncion puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BloqueNuevo ::= If BloqueNuevo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BloqueNuevo ::= ForFact BloqueNuevo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BloqueNuevo ::= While BloqueNuevo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BloqueNuevo ::= Try BloqueNuevo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BloqueNuevo ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DefParametrosFact ::= var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DefParametrosFact ::= var errParametro1 DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DefParametrosFact ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DefParametros ::= coma var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DefParametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Variable ::= var DefVariablesFact 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Variable ::= var errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Variable ::= errDecVariables identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Variables ::= Variables Variable 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Variables ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefVariablesFact ::= identificador DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariablesFact",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefVariablesFact ::= errDecVariables DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariablesFact",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DefVariables ::= coma identificador DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DefVariables ::= errDecVariables identificador DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DefVariables ::= errDecVariables DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DefVariables ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Funcion ::= identificador parenAbierto Parametros parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcion",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Parametros ::= Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Parametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Parametro ::= coma Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Parametro ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // If ::= iif ExpresionB dosPuntos BloquePuntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 parser.addError("Hay un error en la expresion del If" + 
" (revisar dos puntos). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$0",85, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // If ::= iif error NT$0 dosPuntos BloquePuntoComa Elif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Elif ::= elif ExpresionB dosPuntos BloquePuntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 parser.addError("Hay un error en la expresion del If" + 
" (revisar dos puntos). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$1",86, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Elif ::= elif error NT$1 dosPuntos BloquePuntoComa Elif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Elif ::= Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Else ::= eelse dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Else ::= eelse errElse dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Else ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ForFact ::= ffor identificador in For dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ForFact",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ForFact ::= ffor errFor in For dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ForFact",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ForFact ::= ffor identificador in For errFor dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ForFact",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ForFact ::= ffor identificador errIn For dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ForFact",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // For ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // For ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // For ::= Range 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // For ::= errFor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Range ::= range parenAbierto INT coma INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Range ::= range parenAbierto INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Range ::= range errRange parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Range ::= range errFor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // While ::= wwhile ExpresionB DosPuntos BloquePuntoComa Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // While ::= wwhile parenAbierto parenCerrado DosPuntos BloquePuntoComa Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 parser.addError("Falta abrir parentesis" + 
" (revisar dos puntos). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$2",87, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // While ::= wwhile error NT$2 dosPuntos BloquePuntoComa Else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$3 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 parser.addError("Falta cerrar parentesis" + 
". Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$3",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // While ::= wwhile error NT$3 parenCerrado dosPuntos BloquePuntoComa Else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 parser.addError("Hay un error en la expresion del While" + 
". Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$4",89, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // While ::= wwhile parenAbierto error NT$4 dosPuntos BloquePuntoComa Else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BloquePuntoComa ::= BloqueNuevo puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",78, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BloquePuntoComa ::= errPuntoYComa puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",78, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DosPuntos ::= dosPuntos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DosPuntos ::= errDosPuntos dosPuntos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Bloques ::= Bloque Bloques 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloques",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Bloques ::= Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloques",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Bloque ::= ForFact Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Bloque ::= While Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Bloque ::= If Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Bloque ::= Try Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Try ::= ttry dosPuntos BloquePuntoComa Except 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Try",82, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Try ::= ttry errTry BloquePuntoComa Except 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Try",82, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Except ::= eexcept identificador dosPuntos BloquePuntoComa Finally 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Except",83, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$5 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 parser.addError("Hay un error con la definición del except" + 
" (revisar dos puntos o identificador). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$5",90, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Except ::= eexcept error NT$5 dosPuntos BloquePuntoComa Finally 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Except",83, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Finally ::= ffinally dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Finally",84, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Finally ::= ffinally errFinally dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Finally",84, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Finally ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Finally",84, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Literal ::= INT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Literal ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Literal ::= CHAR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Literal ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Lista ::= cuadradoAbierto ElementosLista cuadradoCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Lista",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ElementosLista ::= Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MasElementosLista ::= coma Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MasElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expresion ::= Literal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expresion ::= Lista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expresion ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expresion ::= Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expresion ::= parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expresion ::= errExpresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expresion ::= Expresion OpBinario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expresion ::= OpUnario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expresion ::= identificador punto Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expresion ::= ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExpresionB ::= ffalse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExpresionB ::= ttrue 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExpresionB ::= opNot Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpresionB ::= Expresion OpBinarioB Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpresionB ::= parenAbierto ExpresionB parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Asignacion ::= identificador opAsignaciones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",72, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Asignacion ::= errAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",72, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expresiones ::= Expresiones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExpresionesB ::= ExpresionesB ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ExpresionesB ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Asignaciones ::= Asignaciones Asignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",73, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Asignaciones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",73, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FuncionesPredefinidas ::= FuncionesPredefinidas FuncionPredefinida 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",75, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FuncionesPredefinidas ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",75, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FuncionPredefinida ::= Input 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",74, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FuncionPredefinida ::= Print 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",74, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Input ::= iinput parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",76, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Input ::= iinput parenAbierto parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",76, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Input ::= errInput 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",76, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Print ::= pprint parenAbierto ElementosLista parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",77, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Print ::= errPrint 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",77, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CodigoPrincipal ::= Variables CualquierCosas 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CodigoPrincipal",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CualquierCosas ::= CualquierCosas CualquierCosa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosas",79, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CualquierCosas ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosas",79, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CualquierCosa ::= FuncionPredefinida 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosa",80, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CualquierCosa ::= Asignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosa",80, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CualquierCosa ::= Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosa",80, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VariablesOOP ::= Variables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariablesOOP",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FuncionesOOP ::= DefFunciones puntoComa CodigoPrincipal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesOOP",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$6 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 errores.add("Falto el ; de la clase principal en la línea: " + cleft); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$6",91, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FuncionesOOP ::= DefFunciones NT$6 CodigoPrincipal 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesOOP",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OOP ::= HeaderOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OOP",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // BloqueOOP ::= VariablesOOP FuncionesOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueOOP",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // HeaderOOP ::= clas identificador dosPuntos BloqueOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // HeaderOOP ::= clas errHeaderOOP BloqueOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OpAritmeticos ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OpAritmeticos ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OpAritmeticos ::= opMultiplicacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OpAritmeticos ::= opDivision 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OpAritmeticos ::= opDivisionE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OpAritmeticos ::= opModulo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OpAritmeticos ::= opPotencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OpUnario ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OpUnario ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OpBinario ::= OpAritmeticos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinario",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OpBinarioB ::= opComparadores 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",71, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OpBinarioB ::= OpLogicos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",71, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OpLogicos ::= opAnd 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OpLogicos ::= opOr 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OpLogicos ::= opNot 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // errHeaderOOP ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en el header del fuente de tipo OOP. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errHeaderOOP",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // errDecVariables ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error al declarar variables. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecVariables",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // errPuntoYComa ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Falto cerrar un bloque con ';'. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPuntoYComa",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // errClase ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la clase. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errClase",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // errExpresion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // errExpresionB ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Debe ser booleana. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresionB",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // errAsignacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la asignación. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errAsignacion",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // errIf ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la definicion del if. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errIf",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // errInput ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en input(). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errInput",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // errPrint ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en print() Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPrint",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // errDecFuncion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecFuncion",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // errParametro1 ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de los parametros de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errParametro1",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // errBloque ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error Bloque. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errBloque",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // errRange ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en el range. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errRange",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // errIn ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error, falta 'in'. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errIn",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // errFor ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en el for. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errFor",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // errElse ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error, faltan dos puntos en else. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errElse",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // errDosPuntos ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error, faltan los dos puntos. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDosPuntos",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // errTry ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error, en el try. Faltan dos puntos. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errTry",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // errExcept ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error, except. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExcept",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // errFinally ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error, finally. Faltan dos puntos. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errFinally",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
