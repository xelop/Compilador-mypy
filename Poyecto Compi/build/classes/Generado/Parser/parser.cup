package Generado.Parser;
import java_cup.runtime.*;
import java.util.ArrayList;
parser code
{:
  public boolean syntaxErrors;

  ArrayList<String> errores;

  public Analizador(java_cup.runtime.Scanner s, boolean type) {
    super(s);
    errores = new ArrayList<String>();
  }
  
  public void addError(String error){
    errores.add(error);
    /*ProyectoCompi.PoyectoCompi.consola.impirmir(error);*/
  }

  public ArrayList<String> retornarLista(){
    return errores;
  }
  public void syntax_error(Symbol s){
    System.out.println("Error en la linea : " + s.value);
  }
/*public void unrecovered_syntax_error(Symbol s){
    System.out.println("Error en la linea : " + s.value);
  }*/

:}
action code
{:
:}

/*----------------------------------------------------------------------*/
/* Declaracion de terminales */
terminal identificador,palabraReservada, INT,FLOAT,CHAR,STRING,opAritmeticos,opComparadores,opAsignaciones,opDelimitadores,opBits,opLogicos,ERROR,END;

terminal var,clas,def;

/*Delimitadores*/
terminal dosPuntos,puntoComa,parenAbierto,parenCerrado,coma;

/*--------------------------------------------------------------------------*/

/* Declaracion de no terminales */
non terminal Programa, Variable, CodigoPrincipal;
non terminal Funcional,Funcion,Funciones,FuncionesFact,ParametrosFact,Parametros;
non terminal Variables,VariableRec;

/* Zona OOP */
non terminal OOP, HeaderOOP, VariablesOOP, Clase,BloqueOOP, cuerpoOOP;

/* Operadores*/
non terminal PuntoComa;

/**Errores**/
non terminal errHeaderOOP, errDecVariables, errPuntoYComa, errClase;

/*--------------------- Configuraciones -------------- */
precedence left opDelimitadores,var;

/* inicio de gramatica */
start with Programa;


/*----------------- Producciones ---------------------- */
Programa::= Funcional {: ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo Funcional."); :}
| OOP                 {: ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo OOP."); :}
; 


Funcional ::= FuncionesFact;

FuncionesFact ::= Funcion Funciones;
Funciones ::= Funcion Funciones | ;
Funcion ::= def identificador parenAbierto ParametrosFact parenCerrado dosPuntos;

ParametrosFact ::= Variable Parametros | ; /* si variable se inicializa en isma linea se debe cambiar */
Parametros::= coma Variable  Parametros | ; 

CodigoPrincipal::=  identificador;
/*-----------------------------------------------------------------------------------------*/

Variable::= var identificador | errDecVariables Variables; 
Variables ::= Variables Variable| ;

PuntoComa ::= puntoComa Variables| errPuntoYComa Variables;
/*----------------------------------------------------------------------------------------*/

VariablesOOP ::= Variables PuntoComa;

OOP ::= Clase;
Clase ::= BloqueOOP;
BloqueOOP::= HeaderOOP;

HeaderOOP ::= clas identificador dosPuntos VariablesOOP| errHeaderOOP VariablesOOP;




/*-----------------------------------------------------------------------------------------*/


/* --- Errores personalizados --- */
errHeaderOOP::= error:e       {: parser.addError("Hay un error en el header del fuente de tipo OOP. Línea: "  + eleft+ ". Columna: " + eright); :};
errDecVariables::= error:e    {: parser.addError("Hay un error al declarar variables. Línea: "  + eleft+ ". Columna: " + eright); :};
errPuntoYComa::= error:e      {: parser.addError("Falto cerrar un bloque con ';'. Línea: "  + eleft+ ". Columna: " + eright); :};
errClase::= error:e           {: parser.addError("Hay un error en la clase. Línea: "  + eleft+ ". Columna: " + eright); :};