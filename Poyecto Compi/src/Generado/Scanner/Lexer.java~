/* The following code was generated by JFlex 1.6.1 */

package Generado.Scanner;
import static Generado.Scanner.Token.*;
import Generado.Parser.sym;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Generado/Scanner/lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MYSTRING = 2;
  public static final int MYCHAR = 4;
  public static final int COMENTARIOBLOQUE = 6;
  public static final int COMENTARIOBLOQUE2 = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\75\1\11\1\13\1\14\1\14\1\12\22\75\1\10\1\51\1\16"+
    "\1\15\1\75\1\47\1\54\1\61\1\65\1\66\1\45\1\44\1\6"+
    "\1\44\1\55\1\46\1\3\1\4\6\5\2\2\1\56\1\60\1\52"+
    "\1\50\1\53\2\75\1\1\1\62\3\1\1\71\7\1\1\43\1\63"+
    "\4\1\1\72\3\1\1\64\2\1\1\67\1\76\1\70\1\54\1\1"+
    "\1\75\1\25\1\31\1\33\1\7\1\32\1\22\1\30\1\34\1\17"+
    "\1\1\1\35\1\23\1\42\1\20\1\24\1\40\1\1\1\27\1\26"+
    "\1\21\1\36\1\1\1\73\1\37\1\41\1\1\1\57\1\54\1\57"+
    "\1\54\1\75\5\74\1\77\32\74\1\0\u15df\74\1\0\u097f\74\13\0"+
    "\35\74\1\77\1\77\5\74\1\0\57\74\1\0\u0fa0\74\1\0\uffff\74\uffff\74\uffff\74\uffff\74\uffff\74\uffff\74\uffff\74\uffff\74\uffff\74\uffff\74\uffff\74\uffff\74\uffff\74\uffff\74\uffff\74\uffff\74\ud00f\74";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\4\1\2\3\5\1\6"+
    "\17\2\4\7\1\10\1\1\2\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\3\2\1\23"+
    "\1\24\1\25\2\26\1\27\1\23\1\30\2\31\2\23"+
    "\1\32\1\33\1\0\3\33\1\2\1\0\1\34\1\35"+
    "\1\36\11\2\1\37\20\2\1\10\1\11\1\0\3\2"+
    "\1\40\1\41\1\42\2\0\1\43\3\3\1\44\1\45"+
    "\1\46\3\2\1\47\25\2\1\50\3\2\1\51\11\2"+
    "\1\52\1\53\5\2\1\54\4\2\1\55\3\2\1\56"+
    "\1\2\1\57\1\60\2\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0140\0\u0240\0\u0140\0\u0280\0\u02c0\0\u0300\0\u0340"+
    "\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740"+
    "\0\u0780\0\u0140\0\u07c0\0\u07c0\0\u0800\0\u0840\0\u0140\0\u0140"+
    "\0\u0140\0\u0140\0\u0880\0\u0140\0\u0140\0\u0140\0\u0140\0\u08c0"+
    "\0\u0900\0\u0940\0\u0140\0\u0140\0\u0140\0\u0980\0\u0140\0\u0140"+
    "\0\u09c0\0\u0140\0\u0140\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0180"+
    "\0\u0180\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80"+
    "\0\u0ec0\0\u0f00\0\u0180\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040"+
    "\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240"+
    "\0\u1280\0\u12c0\0\u1300\0\u0140\0\u0140\0\u1340\0\u1380\0\u13c0"+
    "\0\u1400\0\u0140\0\u0140\0\u0140\0\u1440\0\u1480\0\u0b40\0\u0b80"+
    "\0\u0bc0\0\u0c00\0\u0180\0\u0140\0\u0180\0\u14c0\0\u1500\0\u1540"+
    "\0\u0180\0\u1580\0\u0cc0\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0"+
    "\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0"+
    "\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u0140\0\u1a80"+
    "\0\u1ac0\0\u1b00\0\u0140\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40"+
    "\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u0180\0\u0180\0\u1d80\0\u1dc0"+
    "\0\u1e00\0\u1e40\0\u1e80\0\u0180\0\u1ec0\0\u1f00\0\u1f40\0\u1f80"+
    "\0\u0180\0\u1fc0\0\u2000\0\u2040\0\u0180\0\u2080\0\u0180\0\u0180"+
    "\0\u20c0\0\u2100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\2\10\1\12\1\13\2\14"+
    "\1\15\1\14\1\0\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\4\7\1\35\2\7\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\50\1\52\1\53\3\7\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\3\6\1\0\1\6\7\63"+
    "\1\64\1\65\1\66\1\67\1\0\1\63\1\70\57\63"+
    "\1\71\1\0\61\63\1\72\16\63\1\73\7\63\1\64"+
    "\1\73\1\74\2\73\1\63\1\75\57\63\1\71\2\73"+
    "\7\63\1\64\1\73\1\74\2\73\44\63\1\76\14\63"+
    "\1\71\1\73\100\0\1\77\5\7\1\0\1\7\7\0"+
    "\25\7\16\0\3\7\4\0\3\7\1\77\2\0\1\77"+
    "\1\0\1\100\4\10\1\0\1\100\7\0\25\100\11\0"+
    "\1\101\4\0\3\100\4\0\3\100\5\0\1\100\4\10"+
    "\1\0\1\100\7\0\5\100\1\102\4\100\1\103\5\100"+
    "\1\104\4\100\11\0\1\101\4\0\1\103\1\102\1\104"+
    "\4\0\3\100\4\0\1\77\5\7\1\0\1\7\7\0"+
    "\13\7\1\105\11\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\1\77\13\0\1\14\64\0\12\16\1\15\1\14"+
    "\64\16\16\0\1\106\61\0\1\77\5\7\1\0\1\7"+
    "\7\0\1\7\1\107\1\7\1\110\3\7\1\111\13\7"+
    "\1\112\1\7\16\0\3\7\4\0\3\7\1\77\2\0"+
    "\2\77\5\7\1\0\1\7\7\0\5\7\1\113\17\7"+
    "\16\0\3\7\4\0\3\7\1\77\2\0\2\77\5\7"+
    "\1\0\1\7\7\0\10\7\1\114\14\7\16\0\3\7"+
    "\4\0\3\7\1\77\2\0\2\77\5\7\1\0\1\7"+
    "\7\0\1\115\3\7\1\116\1\117\2\7\1\120\14\7"+
    "\16\0\3\7\4\0\3\7\1\77\2\0\2\77\5\7"+
    "\1\0\1\7\7\0\1\121\5\7\1\122\16\7\16\0"+
    "\3\7\4\0\3\7\1\77\2\0\2\77\5\7\1\0"+
    "\1\7\7\0\10\7\1\123\14\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\2\77\5\7\1\0\1\7\7\0"+
    "\1\7\1\124\5\7\1\125\15\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\2\77\5\7\1\0\1\7\7\0"+
    "\2\7\1\126\22\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\2\77\5\7\1\0\1\7\7\0\6\7\1\127"+
    "\4\7\1\130\11\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\2\77\5\7\1\0\1\7\7\0\4\7\1\131"+
    "\20\7\16\0\3\7\4\0\3\7\1\77\2\0\2\77"+
    "\5\7\1\0\1\7\7\0\5\7\1\132\2\7\1\133"+
    "\14\7\16\0\3\7\4\0\3\7\1\77\2\0\2\77"+
    "\5\7\1\0\1\7\7\0\4\7\1\134\13\7\1\135"+
    "\4\7\16\0\3\7\4\0\3\7\1\77\2\0\2\77"+
    "\5\7\1\0\1\7\7\0\4\7\1\136\1\137\7\7"+
    "\1\140\7\7\16\0\3\7\4\0\3\7\1\77\2\0"+
    "\2\77\5\7\1\0\1\7\7\0\6\7\1\141\1\7"+
    "\1\142\14\7\16\0\3\7\4\0\3\7\1\77\2\0"+
    "\2\77\5\7\1\0\1\7\7\0\5\7\1\143\17\7"+
    "\16\0\3\7\4\0\3\7\1\77\2\0\1\77\50\0"+
    "\1\144\74\0\1\37\2\0\1\144\75\0\1\37\1\0"+
    "\1\144\77\0\1\145\77\0\1\145\1\0\1\47\1\145"+
    "\74\0\1\145\2\0\1\47\105\0\1\146\16\0\1\77"+
    "\5\7\1\0\1\7\7\0\6\7\1\147\16\7\16\0"+
    "\3\7\4\0\3\7\1\77\2\0\2\77\5\7\1\0"+
    "\1\7\7\0\10\7\1\150\14\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\2\77\5\7\1\0\1\7\7\0"+
    "\15\7\1\151\7\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\1\77\13\0\1\67\102\0\1\152\1\0\1\153"+
    "\1\65\5\0\1\154\63\0\1\73\102\0\1\155\142\0"+
    "\1\156\16\0\6\77\1\0\1\77\7\0\25\77\16\0"+
    "\3\77\4\0\4\77\2\0\1\77\1\0\5\100\1\0"+
    "\1\100\7\0\25\100\16\0\3\100\4\0\3\100\6\0"+
    "\4\157\73\0\2\100\3\160\1\0\1\100\7\0\25\100"+
    "\16\0\3\100\4\0\3\100\5\0\2\100\2\161\1\100"+
    "\1\0\1\100\7\0\25\100\16\0\3\100\4\0\3\100"+
    "\5\0\1\100\4\162\1\0\1\162\7\0\3\100\1\162"+
    "\2\100\1\162\3\100\3\162\10\100\16\0\3\100\4\0"+
    "\3\100\4\0\1\77\5\7\1\0\1\7\7\0\3\7"+
    "\1\163\1\111\20\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\1\77\16\0\1\164\61\0\1\77\5\7\1\0"+
    "\1\7\7\0\2\7\1\165\22\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\2\77\5\7\1\0\1\7\7\0"+
    "\21\7\1\166\3\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\2\77\5\7\1\0\1\7\7\0\2\7\1\123"+
    "\22\7\16\0\3\7\4\0\3\7\1\77\2\0\2\77"+
    "\5\7\1\0\1\7\7\0\22\7\1\111\2\7\16\0"+
    "\3\7\4\0\3\7\1\77\2\0\2\77\5\7\1\0"+
    "\1\7\7\0\1\7\1\167\23\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\2\77\5\7\1\0\1\7\7\0"+
    "\5\7\1\170\17\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\2\77\5\7\1\0\1\7\7\0\10\7\1\171"+
    "\14\7\16\0\3\7\4\0\3\7\1\77\2\0\2\77"+
    "\5\7\1\0\1\7\7\0\5\7\1\172\17\7\16\0"+
    "\3\7\4\0\3\7\1\77\2\0\2\77\5\7\1\0"+
    "\1\7\7\0\7\7\1\173\15\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\2\77\5\7\1\0\1\7\7\0"+
    "\23\7\1\174\1\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\2\77\5\7\1\0\1\123\7\0\25\7\16\0"+
    "\3\7\4\0\3\7\1\77\2\0\2\77\5\7\1\0"+
    "\1\7\7\0\7\7\1\175\15\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\2\77\5\7\1\0\1\7\7\0"+
    "\10\7\1\176\14\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\2\77\5\7\1\0\1\7\7\0\1\177\1\200"+
    "\23\7\16\0\3\7\4\0\3\7\1\77\2\0\2\77"+
    "\5\7\1\0\1\7\7\0\2\7\1\201\22\7\16\0"+
    "\3\7\4\0\3\7\1\77\2\0\2\77\5\7\1\0"+
    "\1\7\7\0\5\7\1\202\17\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\2\77\5\7\1\0\1\7\7\0"+
    "\5\7\1\203\17\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\2\77\5\7\1\0\1\7\7\0\13\7\1\204"+
    "\11\7\16\0\3\7\4\0\3\7\1\77\2\0\2\77"+
    "\5\7\1\0\1\7\7\0\1\205\6\7\1\206\15\7"+
    "\16\0\3\7\4\0\3\7\1\77\2\0\2\77\5\7"+
    "\1\0\1\7\7\0\13\7\1\207\1\210\10\7\16\0"+
    "\3\7\4\0\3\7\1\77\2\0\2\77\5\7\1\0"+
    "\1\7\7\0\6\7\1\211\16\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\2\77\5\7\1\0\1\7\7\0"+
    "\1\7\1\212\23\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\2\77\5\7\1\0\1\7\7\0\6\7\1\213"+
    "\16\7\16\0\3\7\4\0\3\7\1\77\2\0\2\77"+
    "\5\7\1\0\1\7\7\0\7\7\1\214\15\7\16\0"+
    "\3\7\4\0\3\7\1\77\2\0\2\77\5\7\1\0"+
    "\1\7\7\0\1\215\24\7\16\0\3\7\4\0\3\7"+
    "\1\77\2\0\2\77\5\7\1\0\1\7\7\0\1\7"+
    "\1\216\23\7\16\0\3\7\4\0\3\7\1\77\2\0"+
    "\1\77\61\0\1\217\16\0\1\77\5\7\1\0\1\7"+
    "\7\0\4\7\1\220\20\7\16\0\3\7\4\0\3\7"+
    "\1\77\2\0\2\77\5\7\1\0\1\7\7\0\17\7"+
    "\1\221\5\7\16\0\3\7\4\0\3\7\1\77\2\0"+
    "\2\77\5\7\1\0\1\7\7\0\1\222\24\7\16\0"+
    "\3\7\4\0\3\7\1\77\2\0\1\77\16\0\1\223"+
    "\142\0\1\223\16\0\1\77\5\7\1\0\1\7\7\0"+
    "\5\7\1\224\17\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\2\77\5\7\1\0\1\7\7\0\6\7\1\225"+
    "\16\7\16\0\3\7\4\0\3\7\1\77\2\0\2\77"+
    "\5\7\1\0\1\7\7\0\6\7\1\173\16\7\16\0"+
    "\3\7\4\0\3\7\1\77\2\0\2\77\5\7\1\0"+
    "\1\7\7\0\23\7\1\111\1\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\2\77\5\7\1\0\1\7\7\0"+
    "\12\7\1\226\12\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\2\77\5\7\1\0\1\7\7\0\13\7\1\224"+
    "\11\7\16\0\3\7\4\0\3\7\1\77\2\0\2\77"+
    "\5\7\1\0\1\7\7\0\1\227\24\7\16\0\3\7"+
    "\4\0\3\7\1\77\2\0\2\77\5\7\1\0\1\7"+
    "\7\0\7\7\1\216\15\7\16\0\3\7\4\0\3\7"+
    "\1\77\2\0\2\77\5\7\1\0\1\7\7\0\11\7"+
    "\1\230\13\7\16\0\3\7\4\0\3\7\1\77\2\0"+
    "\2\77\5\7\1\0\1\7\7\0\17\7\1\231\5\7"+
    "\16\0\3\7\4\0\3\7\1\77\2\0\2\77\5\7"+
    "\1\0\1\7\7\0\12\7\1\232\12\7\16\0\3\7"+
    "\4\0\3\7\1\77\2\0\2\77\5\7\1\0\1\7"+
    "\7\0\4\7\1\233\20\7\16\0\3\7\4\0\3\7"+
    "\1\77\2\0\2\77\5\7\1\0\1\7\7\0\6\7"+
    "\1\234\16\7\16\0\3\7\4\0\3\7\1\77\2\0"+
    "\2\77\5\7\1\0\1\7\7\0\3\7\1\235\21\7"+
    "\16\0\3\7\4\0\3\7\1\77\2\0\2\77\5\7"+
    "\1\0\1\7\7\0\13\7\1\236\11\7\16\0\3\7"+
    "\4\0\3\7\1\77\2\0\2\77\5\7\1\0\1\7"+
    "\7\0\14\7\1\111\10\7\16\0\3\7\4\0\3\7"+
    "\1\77\2\0\2\77\5\7\1\0\1\7\7\0\13\7"+
    "\1\237\11\7\16\0\3\7\4\0\3\7\1\77\2\0"+
    "\2\77\5\7\1\0\1\7\7\0\7\7\1\240\15\7"+
    "\16\0\3\7\4\0\3\7\1\77\2\0\2\77\5\7"+
    "\1\0\1\7\7\0\2\7\1\241\22\7\16\0\3\7"+
    "\4\0\3\7\1\77\2\0\2\77\5\7\1\0\1\7"+
    "\7\0\10\7\1\165\14\7\16\0\3\7\4\0\3\7"+
    "\1\77\2\0\2\77\5\7\1\0\1\7\7\0\7\7"+
    "\1\111\15\7\16\0\3\7\4\0\3\7\1\77\2\0"+
    "\2\77\5\7\1\0\1\7\7\0\1\7\1\242\23\7"+
    "\16\0\3\7\4\0\3\7\1\77\2\0\2\77\5\7"+
    "\1\0\1\7\7\0\13\7\1\111\11\7\16\0\3\7"+
    "\4\0\3\7\1\77\2\0\2\77\5\7\1\0\1\7"+
    "\7\0\7\7\1\243\15\7\16\0\3\7\4\0\3\7"+
    "\1\77\2\0\2\77\5\7\1\0\1\7\7\0\13\7"+
    "\1\244\11\7\16\0\3\7\4\0\3\7\1\77\2\0"+
    "\2\77\5\7\1\0\1\7\7\0\4\7\1\245\20\7"+
    "\16\0\3\7\4\0\3\7\1\77\2\0\2\77\5\7"+
    "\1\0\1\7\7\0\10\7\1\242\14\7\16\0\3\7"+
    "\4\0\3\7\1\77\2\0\2\77\5\7\1\0\1\7"+
    "\7\0\4\7\1\246\20\7\16\0\3\7\4\0\3\7"+
    "\1\77\2\0\2\77\5\7\1\0\1\247\7\0\25\7"+
    "\16\0\3\7\4\0\3\7\1\77\2\0\2\77\5\7"+
    "\1\0\1\7\7\0\1\7\1\250\23\7\16\0\3\7"+
    "\4\0\3\7\1\77\2\0\2\77\5\7\1\0\1\7"+
    "\7\0\13\7\1\251\11\7\16\0\3\7\4\0\3\7"+
    "\1\77\2\0\2\77\5\7\1\0\1\7\7\0\10\7"+
    "\1\252\14\7\16\0\3\7\4\0\3\7\1\77\2\0"+
    "\2\77\5\7\1\0\1\7\7\0\6\7\1\253\16\7"+
    "\16\0\3\7\4\0\3\7\1\77\2\0\2\77\5\7"+
    "\1\0\1\7\7\0\13\7\1\254\11\7\16\0\3\7"+
    "\4\0\3\7\1\77\2\0\2\77\5\7\1\0\1\7"+
    "\7\0\16\7\1\111\6\7\16\0\3\7\4\0\3\7"+
    "\1\77\2\0\2\77\5\7\1\0\1\7\7\0\21\7"+
    "\1\242\3\7\16\0\3\7\4\0\3\7\1\77\2\0"+
    "\2\77\5\7\1\0\1\7\7\0\7\7\1\255\15\7"+
    "\16\0\3\7\4\0\3\7\1\77\2\0\2\77\5\7"+
    "\1\0\1\7\7\0\1\256\24\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\2\77\5\7\1\0\1\7\7\0"+
    "\2\7\1\111\22\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\2\77\5\7\1\0\1\7\7\0\13\7\1\257"+
    "\11\7\16\0\3\7\4\0\3\7\1\77\2\0\2\77"+
    "\5\7\1\0\1\7\7\0\13\7\1\260\11\7\16\0"+
    "\3\7\4\0\3\7\1\77\2\0\2\77\5\7\1\0"+
    "\1\7\7\0\4\7\1\114\20\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\2\77\5\7\1\0\1\7\7\0"+
    "\6\7\1\111\16\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\2\77\5\7\1\0\1\7\7\0\11\7\1\165"+
    "\13\7\16\0\3\7\4\0\3\7\1\77\2\0\2\77"+
    "\5\7\1\0\1\7\7\0\1\7\1\111\23\7\16\0"+
    "\3\7\4\0\3\7\1\77\2\0\2\77\5\7\1\0"+
    "\1\7\7\0\4\7\1\111\20\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\2\77\5\7\1\0\1\7\7\0"+
    "\6\7\1\261\16\7\16\0\3\7\4\0\3\7\1\77"+
    "\2\0\2\77\5\7\1\0\1\7\7\0\1\7\1\262"+
    "\23\7\16\0\3\7\4\0\3\7\1\77\2\0\2\77"+
    "\5\7\1\0\1\7\7\0\1\7\1\165\23\7\16\0"+
    "\3\7\4\0\3\7\1\77\2\0\2\77\5\7\1\0"+
    "\1\7\7\0\17\7\1\216\5\7\16\0\3\7\4\0"+
    "\3\7\1\77\2\0\1\77";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8512];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\3\1\1\11\1\1\1\11\25\1\1\11"+
    "\4\1\4\11\1\1\4\11\3\1\3\11\1\1\2\11"+
    "\1\1\2\11\5\1\1\0\4\1\1\0\35\1\2\11"+
    "\1\0\3\1\3\11\2\0\5\1\1\11\32\1\1\11"+
    "\3\1\1\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //esto se copia directamente

    StringBuffer string = new StringBuffer();
    Boolean cambioLinea = false;

    public String lexeme;
    public int getLine(){
        return yyline;
    }

    private Symbol symbol(int type) {
        return new Symbol(type, yyline+1, yycolumn+1);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case MYSTRING: {
              yybegin(YYINITIAL); lexeme = "String sin terminar: " + string.toString(); return symbol(sym.ERROR);
            }
            case 179: break;
            case MYCHAR: {
              yybegin(YYINITIAL); lexeme = "Char sin terminar: " + string.toString(); return symbol(sym.ERROR);
            }
            case 180: break;
            case COMENTARIOBLOQUE: {
              yybegin(YYINITIAL); lexeme = "Comentario de bloque sin terminar: " + "\"\"\"" + string.toString(); return symbol(sym.ERROR, lexeme);
            }
            case 181: break;
            case COMENTARIOBLOQUE2: {
              yybegin(YYINITIAL); lexeme = "Comentario de bloque sin terminar: " + "\'\'\'" + string.toString(); return symbol(sym.ERROR, lexeme);
            }
            case 182: break;
            default:
          {   return new java_cup.runtime.Symbol(sym.EOF);
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext();return symbol(sym.ERROR, lexeme);
            }
          case 49: break;
          case 2: 
            { lexeme=yytext(); return symbol(sym.identificador, lexeme);
            }
          case 50: break;
          case 3: 
            { lexeme=yytext(); return symbol(sym.INT, lexeme);
            }
          case 51: break;
          case 4: 
            { lexeme = yytext(); return symbol(sym.coma, lexeme);
            }
          case 52: break;
          case 5: 
            { /* ignore */
            }
          case 53: break;
          case 6: 
            { string.setLength(0); cambioLinea = false; yybegin(MYSTRING);
            }
          case 54: break;
          case 7: 
            { lexeme = yytext(); return symbol(sym.opAritmeticos, lexeme);
            }
          case 55: break;
          case 8: 
            { lexeme = yytext(); return symbol(sym.opAsignaciones, lexeme);
            }
          case 56: break;
          case 9: 
            { lexeme = yytext(); return symbol(sym.opComparadores, lexeme);
            }
          case 57: break;
          case 10: 
            { lexeme = yytext(); return symbol(sym.opBits, lexeme);
            }
          case 58: break;
          case 11: 
            { lexeme = yytext(); return symbol(sym.opDelimitadores, lexeme);
            }
          case 59: break;
          case 12: 
            { lexeme = yytext(); return symbol(sym.dosPuntos, lexeme);
            }
          case 60: break;
          case 13: 
            { lexeme = yytext(); return symbol(sym.puntoComa, lexeme);
            }
          case 61: break;
          case 14: 
            { string.setLength(0); yybegin(MYCHAR);
            }
          case 62: break;
          case 15: 
            { lexeme = yytext(); return symbol(sym.parenAbierto, lexeme);
            }
          case 63: break;
          case 16: 
            { lexeme = yytext(); return symbol(sym.parenCerrado, lexeme);
            }
          case 64: break;
          case 17: 
            { lexeme = yytext(); return symbol(sym.cuadradoAbierto, lexeme);
            }
          case 65: break;
          case 18: 
            { lexeme = yytext(); return symbol(sym.cuadradoCerrado, lexeme);
            }
          case 66: break;
          case 19: 
            { string.append( yytext() );
            }
          case 67: break;
          case 20: 
            { string.append(' ');
            }
          case 68: break;
          case 21: 
            { string.append('\t');
            }
          case 69: break;
          case 22: 
            { cambioLinea = true; string.append('\n');
            }
          case 70: break;
          case 23: 
            { yybegin(YYINITIAL);
                                     lexeme = "\"" +string.toString()+"\"";
                                     if(cambioLinea){
                                          return symbol(sym.ERROR, lexeme);
                                     }else{
                                          return symbol(sym.STRING, lexeme);
                                     }
            }
          case 71: break;
          case 24: 
            { yybegin(YYINITIAL); lexeme = "'"+ string.toString()+"'"; 
                                     if(string.length()>1)
                                        return symbol(sym.ERROR, lexeme);
                                     else
                                        return symbol(sym.CHAR, lexeme);
            }
          case 72: break;
          case 25: 
            { string.append(yytext());
            }
          case 73: break;
          case 26: 
            { lexeme=yytext(); return symbol(sym.ERROR, lexeme);
            }
          case 74: break;
          case 27: 
            { lexeme = yytext(); return symbol(sym.INT, lexeme);
            }
          case 75: break;
          case 28: 
            { lexeme = yytext(); return symbol(sym.in, lexeme);
            }
          case 76: break;
          case 29: 
            { lexeme = yytext(); return symbol(sym.iif, lexeme);
            }
          case 77: break;
          case 30: 
            { lexeme = yytext(); return symbol(sym.palabraReservada, lexeme);
            }
          case 78: break;
          case 31: 
            { lexeme = yytext(); return symbol(sym.opLogicos, lexeme);
            }
          case 79: break;
          case 32: 
            { string.append('\"');
            }
          case 80: break;
          case 33: 
            { string.append('\n');
            }
          case 81: break;
          case 34: 
            { string.append('\r');
            }
          case 82: break;
          case 35: 
            { lexeme=yytext(); return symbol(sym.FLOAT, lexeme);
            }
          case 83: break;
          case 36: 
            { lexeme = yytext(); return symbol(sym.def, lexeme);
            }
          case 84: break;
          case 37: 
            { string.setLength(0); yybegin(COMENTARIOBLOQUE);
            }
          case 85: break;
          case 38: 
            { lexeme = yytext(); return symbol(sym.var, lexeme);
            }
          case 86: break;
          case 39: 
            { lexeme = yytext(); return symbol(sym.ffor, lexeme);
            }
          case 87: break;
          case 40: 
            { string.setLength(0); yybegin(COMENTARIOBLOQUE2);
            }
          case 88: break;
          case 41: 
            { yybegin(YYINITIAL);
            }
          case 89: break;
          case 42: 
            { lexeme = yytext(); return symbol(sym.elif, lexeme);
            }
          case 90: break;
          case 43: 
            { lexeme = yytext(); return symbol(sym.eelse, lexeme);
            }
          case 91: break;
          case 44: 
            { lexeme = yytext(); return symbol(sym.ttrue, lexeme);
            }
          case 92: break;
          case 45: 
            { lexeme = yytext(); return symbol(sym.range, lexeme);
            }
          case 93: break;
          case 46: 
            { lexeme = yytext(); return symbol(sym.clas, lexeme);
            }
          case 94: break;
          case 47: 
            { lexeme = yytext(); return symbol(sym.ffalse, lexeme);
            }
          case 95: break;
          case 48: 
            { lexeme = yytext(); return symbol(sym.wwhile, lexeme);
            }
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
