
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Generado.Parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\005\003\000\002\010\004" +
    "\000\002\010\006\000\002\007\004\000\002\007\002\000" +
    "\002\006\011\000\002\006\006\000\002\006\005\000\002" +
    "\006\006\000\002\011\005\000\002\011\005\000\002\011" +
    "\002\000\002\012\006\000\002\012\002\000\002\004\003" +
    "\000\002\003\004\000\002\003\003\000\002\016\004\000" +
    "\002\016\002\000\002\042\003\000\002\042\003\000\002" +
    "\043\003\000\002\043\003\000\002\013\006\000\002\015" +
    "\004\000\002\015\002\000\002\014\005\000\002\014\002" +
    "\000\002\021\005\000\002\022\007\000\002\022\007\000" +
    "\002\022\006\000\002\025\003\000\002\023\005\000\002" +
    "\023\005\000\002\023\002\000\002\024\007\000\002\024" +
    "\007\000\002\024\006\000\002\024\003\000\002\026\011" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\030\010\000\002\030\006\000\002\031\010\000\002" +
    "\104\004\000\002\104\003\000\002\020\004\000\002\020" +
    "\004\000\002\020\004\000\002\020\002\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\064\005\000\002\065\004\000\002\065\002\000\002" +
    "\066\005\000\002\066\002\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\005" +
    "\000\002\061\003\000\002\061\005\000\002\061\004\000" +
    "\002\061\005\000\002\061\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\004\000\002\062\005\000\002\062" +
    "\005\000\002\076\005\000\002\076\003\000\002\067\004" +
    "\000\002\067\002\000\002\070\004\000\002\070\002\000" +
    "\002\077\004\000\002\077\002\000\002\101\004\000\002" +
    "\101\002\000\002\100\003\000\002\100\003\000\002\102" +
    "\006\000\002\102\003\000\002\103\006\000\002\103\003" +
    "\000\002\034\005\000\002\041\004\000\002\041\004\000" +
    "\002\040\004\000\002\032\004\000\002\035\003\000\002" +
    "\036\003\000\002\033\006\000\002\033\004\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\074\003\000" +
    "\002\074\003\000\002\073\003\000\002\075\003\000\002" +
    "\075\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\044\003\000\002\045\003\000\002\046\003" +
    "\000\002\047\003\000\002\050\003\000\002\053\003\000" +
    "\002\052\003\000\002\051\003\000\002\054\003\000\002" +
    "\055\003\000\002\056\003\000\002\057\003\000\002\060" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\012\003\015\023\022\024\006\027\020\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\ufffe\001\002" +
    "\000\006\003\025\004\266\001\002\000\004\002\uffff\001" +
    "\002\000\012\002\ufff9\003\025\022\ufff9\024\006\001\002" +
    "\000\006\003\025\024\006\001\002\000\004\004\252\001" +
    "\002\000\004\002\000\001\002\000\010\002\uffeb\003\uffeb" +
    "\022\uffeb\001\002\000\010\003\uff89\004\uff7f\024\uff89\001" +
    "\002\000\010\002\uff9b\003\uff9b\022\uff9b\001\002\000\004" +
    "\002\250\001\002\000\034\003\147\004\070\006\045\007" +
    "\055\010\046\011\054\025\057\026\060\040\066\041\047" +
    "\051\061\054\051\060\064\001\002\000\010\002\uff9a\003" +
    "\uff9a\022\uff9a\001\002\000\004\004\023\001\002\000\004" +
    "\052\024\001\002\000\006\003\025\024\006\001\002\000" +
    "\016\002\uff7f\003\uff7f\004\uff7f\022\uff7f\024\uff7f\052\uff7f" +
    "\001\002\000\006\003\031\022\032\001\002\000\010\002" +
    "\uff99\003\uff99\022\uff99\001\002\000\012\002\uffed\003\uffed" +
    "\022\uffed\053\uffed\001\002\000\020\002\uff88\003\uff88\022" +
    "\uff88\027\uff88\032\uff88\035\uff88\053\uff88\001\002\000\004" +
    "\004\142\001\002\000\010\003\uffeb\022\uffeb\053\uffeb\001" +
    "\002\000\010\002\uff9d\003\uff9d\022\uff9d\001\002\000\010" +
    "\003\037\022\032\053\042\001\002\000\010\002\uffa0\003" +
    "\uffa0\022\uffa0\001\002\000\042\002\uff87\003\uff88\004\uff87" +
    "\006\uff87\007\uff87\010\uff87\011\uff87\022\uff88\025\uff87\026" +
    "\uff87\040\uff87\041\uff87\051\uff87\053\uff88\054\uff87\060\uff87" +
    "\001\002\000\012\002\uffec\003\uffec\022\uffec\053\uffec\001" +
    "\002\000\040\002\uffad\003\uffad\004\uffad\006\uffad\007\uffad" +
    "\010\uffad\011\uffad\022\uffad\025\uffad\026\uffad\040\uffad\041" +
    "\uffad\051\uffad\054\uffad\060\uffad\001\002\000\040\002\uffad" +
    "\003\uffad\004\uffad\006\uffad\007\uffad\010\uffad\011\uffad\022" +
    "\uffad\025\uffad\026\uffad\040\uffad\041\uffad\051\uffad\054\uffad" +
    "\060\uffad\001\002\000\040\002\uffef\003\063\004\070\006" +
    "\045\007\055\010\046\011\054\022\uffef\025\057\026\060" +
    "\040\066\041\047\051\061\054\051\060\064\001\002\000" +
    "\010\002\uff9f\003\uff9f\022\uff9f\001\002\000\066\002\uffc8" +
    "\003\uffc8\004\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\013" +
    "\uffc8\022\uffc8\025\uffc8\026\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\001\002" +
    "\000\066\002\uffc6\003\uffc6\004\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\013\uffc6\022\uffc6\025\uffc6\026\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\001\002\000\034\003\uff90\004\uff90\006\uff90\007" +
    "\uff90\010\uff90\011\uff90\025\uff90\026\uff90\040\uff90\041\uff90" +
    "\051\uff90\054\uff90\060\uff90\001\002\000\056\002\uffae\003" +
    "\uffae\004\uffae\006\uffae\007\uffae\010\uffae\011\uffae\013\100" +
    "\022\uffae\025\uffae\026\uffae\040\114\041\104\042\115\043" +
    "\101\044\102\045\110\047\106\050\112\051\103\054\uffae" +
    "\060\uffae\001\002\000\034\003\063\004\070\006\045\007" +
    "\055\010\046\011\054\025\057\026\060\040\066\041\047" +
    "\051\061\054\051\060\064\001\002\000\066\002\uffb6\003" +
    "\uffb6\004\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\013\uffb6" +
    "\022\uffb6\025\uffb6\026\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\001\002\000" +
    "\066\002\uffbc\003\uffbc\004\uffbc\006\uffbc\007\uffbc\010\uffbc" +
    "\011\uffbc\013\uffbc\022\uffbc\025\uffbc\026\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\001\002\000\066\002\uffc5\003\uffc5\004\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\013\uffc5\022\uffc5\025\uffc5\026" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\060\uffc5\001\002\000\066\002\uffc7\003\uffc7" +
    "\004\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\013\uffc7\022" +
    "\uffc7\025\uffc7\026\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\001\002\000\066" +
    "\002\uffbe\003\uffbe\004\uffbe\006\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\013\uffbe\022\uffbe\025\uffbe\026\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\001\002\000\066\002\uffb5\003\uffb5\004\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\013\uffb5\022\uffb5\025\uffb5\026\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\057\uffb5\060\uffb5\001\002\000\066\002\uffb4\003\uffb4\004" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\013\uffb4\022\uffb4" +
    "\025\uffb4\026\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\001\002\000\034\003" +
    "\063\004\070\006\045\007\055\010\046\011\054\025\057" +
    "\026\060\040\066\041\047\051\061\054\051\060\064\001" +
    "\002\000\066\002\uffba\003\uffba\004\uffba\006\uffba\007\uffba" +
    "\010\uffba\011\uffba\013\uffba\022\uffba\025\uffba\026\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\001\002\000\066\002\uff85\003\uff85\004\uff85" +
    "\006\uff85\007\uff85\010\uff85\011\uff85\013\uff85\022\uff85\025" +
    "\uff85\026\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85" +
    "\045\uff85\047\uff85\050\uff85\051\uff85\052\uff85\054\uff85\055" +
    "\uff85\056\uff85\057\uff85\060\uff85\001\002\000\036\003\063" +
    "\004\070\006\045\007\055\010\046\011\054\025\057\026" +
    "\060\040\066\041\047\051\061\054\051\057\uffc2\060\064" +
    "\001\002\000\034\003\063\004\070\006\045\007\055\010" +
    "\046\011\054\025\057\026\060\040\066\041\047\051\061" +
    "\054\051\060\064\001\002\000\034\003\uff91\004\uff91\006" +
    "\uff91\007\uff91\010\uff91\011\uff91\025\uff91\026\uff91\040\uff91" +
    "\041\uff91\051\uff91\054\uff91\060\uff91\001\002\000\066\002" +
    "\uffbf\003\uffbf\004\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\013\uffbf\022\uffbf\025\uffbf\026\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\001" +
    "\002\000\070\002\uffbd\003\uffbd\004\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\013\uffbd\022\uffbd\025\uffbd\026\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\054\072\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\071\001\002\000\004\004\122\001\002" +
    "\000\036\003\063\004\070\006\045\007\055\010\046\011" +
    "\054\025\057\026\060\040\066\041\047\051\061\054\051" +
    "\055\uffe4\060\064\001\002\000\032\013\100\040\114\041" +
    "\104\042\115\043\101\044\102\045\110\047\106\050\112" +
    "\051\103\055\uffe2\056\077\001\002\000\004\055\075\001" +
    "\002\000\066\002\uffe6\003\uffe6\004\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\013\uffe6\022\uffe6\025\uffe6\026\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\001\002\000\034\003\uff8f\004\uff8f\006\uff8f" +
    "\007\uff8f\010\uff8f\011\uff8f\025\uff8f\026\uff8f\040\uff8f\041" +
    "\uff8f\051\uff8f\054\uff8f\060\uff8f\001\002\000\034\003\063" +
    "\004\070\006\045\007\055\010\046\011\054\025\057\026" +
    "\060\040\066\041\047\051\061\054\051\060\064\001\002" +
    "\000\034\003\uff8e\004\uff8e\006\uff8e\007\uff8e\010\uff8e\011" +
    "\uff8e\025\uff8e\026\uff8e\040\uff8e\041\uff8e\051\uff8e\054\uff8e" +
    "\060\uff8e\001\002\000\034\003\uff94\004\uff94\006\uff94\007" +
    "\uff94\010\uff94\011\uff94\025\uff94\026\uff94\040\uff94\041\uff94" +
    "\051\uff94\054\uff94\060\uff94\001\002\000\034\003\uff93\004" +
    "\uff93\006\uff93\007\uff93\010\uff93\011\uff93\025\uff93\026\uff93" +
    "\040\uff93\041\uff93\051\uff93\054\uff93\060\uff93\001\002\000" +
    "\034\003\uff8a\004\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a" +
    "\025\uff8a\026\uff8a\040\uff8a\041\uff8a\051\uff8a\054\uff8a\060" +
    "\uff8a\001\002\000\034\003\uff96\004\uff96\006\uff96\007\uff96" +
    "\010\uff96\011\uff96\025\uff96\026\uff96\040\uff96\041\uff96\051" +
    "\uff96\054\uff96\060\uff96\001\002\000\004\055\uffe5\001\002" +
    "\000\034\003\uff8c\004\uff8c\006\uff8c\007\uff8c\010\uff8c\011" +
    "\uff8c\025\uff8c\026\uff8c\040\uff8c\041\uff8c\051\uff8c\054\uff8c" +
    "\060\uff8c\001\002\000\034\003\063\004\070\006\045\007" +
    "\055\010\046\011\054\025\057\026\060\040\066\041\047" +
    "\051\061\054\051\060\064\001\002\000\034\003\uff92\004" +
    "\uff92\006\uff92\007\uff92\010\uff92\011\uff92\025\uff92\026\uff92" +
    "\040\uff92\041\uff92\051\uff92\054\uff92\060\uff92\001\002\000" +
    "\034\003\063\004\070\006\045\007\055\010\046\011\054" +
    "\025\057\026\060\040\066\041\047\051\061\054\051\060" +
    "\064\001\002\000\034\003\uff8b\004\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\011\uff8b\025\uff8b\026\uff8b\040\uff8b\041\uff8b\051" +
    "\uff8b\054\uff8b\060\uff8b\001\002\000\034\003\uff8d\004\uff8d" +
    "\006\uff8d\007\uff8d\010\uff8d\011\uff8d\025\uff8d\026\uff8d\040" +
    "\uff8d\041\uff8d\051\uff8d\054\uff8d\060\uff8d\001\002\000\034" +
    "\003\uff97\004\uff97\006\uff97\007\uff97\010\uff97\011\uff97\025" +
    "\uff97\026\uff97\040\uff97\041\uff97\051\uff97\054\uff97\060\uff97" +
    "\001\002\000\034\003\uff95\004\uff95\006\uff95\007\uff95\010" +
    "\uff95\011\uff95\025\uff95\026\uff95\040\uff95\041\uff95\051\uff95" +
    "\054\uff95\060\uff95\001\002\000\066\002\uffb2\003\uffb2\004" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\013\100\022\uffb2" +
    "\025\uffb2\026\uffb2\040\114\041\104\042\115\043\101\044" +
    "\102\045\110\047\106\050\112\051\103\052\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\001\002\000\066\002" +
    "\uffb9\003\uffb9\004\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\013\100\022\uffb9\025\uffb9\026\uffb9\040\114\041\104\042" +
    "\115\043\101\044\102\045\110\047\106\050\112\051\103" +
    "\052\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\001" +
    "\002\000\032\013\100\040\114\041\104\042\115\043\101" +
    "\044\102\045\110\047\106\050\112\051\103\055\uffe2\056" +
    "\077\001\002\000\004\055\uffe3\001\002\000\004\054\072" +
    "\001\002\000\066\002\uffb7\003\uffb7\004\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\011\uffb7\013\uffb7\022\uffb7\025\uffb7\026\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\001\002\000\066\002\uffb8\003\uffb8\004" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\013\100\022\uffb8" +
    "\025\uffb8\026\uffb8\040\114\041\104\042\115\043\101\044" +
    "\102\045\110\047\106\050\112\051\103\052\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\001\002\000\032\013" +
    "\100\040\114\041\104\042\115\043\101\044\102\045\110" +
    "\047\106\050\112\051\103\056\130\057\uffc0\001\002\000" +
    "\004\057\127\001\002\000\066\002\uffc4\003\uffc4\004\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\011\uffc4\013\uffc4\022\uffc4\025" +
    "\uffc4\026\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\060\uffc4\001\002\000\034\003\063" +
    "\004\070\006\045\007\055\010\046\011\054\025\057\026" +
    "\060\040\066\041\047\051\061\054\051\060\064\001\002" +
    "\000\004\057\uffc3\001\002\000\032\013\100\040\114\041" +
    "\104\042\115\043\101\044\102\045\110\047\106\050\112" +
    "\051\103\056\130\057\uffc0\001\002\000\004\057\uffc1\001" +
    "\002\000\066\002\uffb3\003\uffb3\004\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\013\100\022\uffb3\025\uffb3\026\uffb3\040" +
    "\114\041\104\042\115\043\101\044\102\045\110\047\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\054\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\060\uffb3\001\002\000\030\013\100\040\114\041\104" +
    "\042\115\043\101\044\102\045\110\047\106\050\112\051" +
    "\103\055\140\001\002\000\030\013\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\055\137\001\002\000\066\002\uffb1\003\uffb1\004\uffb1" +
    "\006\uffb1\007\uffb1\010\uffb1\011\uffb1\013\uffb1\022\uffb1\025" +
    "\uffb1\026\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\060\uffb1\001\002\000\066\002\uffbb" +
    "\003\uffbb\004\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\013" +
    "\uffbb\022\uffbb\025\uffbb\026\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\047\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\001\002" +
    "\000\010\002\uff9e\003\uff9e\022\uff9e\001\002\000\012\002" +
    "\uffee\003\uffee\022\uffee\053\uffee\001\002\000\014\003\157" +
    "\027\020\032\161\035\160\053\uffc9\001\002\000\026\013" +
    "\100\040\114\041\104\042\115\043\101\044\102\045\110" +
    "\047\106\050\112\051\103\001\002\000\030\013\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\243\001\002\000\004\052\150\001" +
    "\002\000\042\003\uff82\013\uff85\027\uff82\032\uff82\035\uff82" +
    "\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\047" +
    "\uff85\050\uff85\051\uff85\052\uff84\053\uff82\001\002\000\014" +
    "\003\157\027\020\032\161\035\160\053\uffc9\001\002\000" +
    "\014\003\uffc9\027\020\032\161\035\160\053\uffc9\001\002" +
    "\000\014\003\uffc9\027\020\032\161\035\160\053\uffc9\001" +
    "\002\000\004\053\240\001\002\000\026\002\uffcd\003\uffcd" +
    "\022\uffcd\024\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\035" +
    "\uffcd\053\uffcd\001\002\000\022\002\uffda\003\uffda\027\uffda" +
    "\030\213\031\224\032\uffda\035\uffda\053\uffda\001\002\000" +
    "\014\003\uffc9\027\020\032\161\035\160\053\uffc9\001\002" +
    "\000\026\002\uff87\003\uff87\022\uff87\024\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\035\uff87\053\uff87\001\002\000\034" +
    "\003\063\004\070\006\045\007\055\010\046\011\054\025" +
    "\057\026\060\040\066\041\047\051\061\054\051\060\064" +
    "\001\002\000\004\004\162\001\002\000\004\033\163\001" +
    "\002\000\010\004\167\011\164\034\165\001\002\000\006" +
    "\003\uffd4\052\uffd4\001\002\000\004\054\200\001\002\000" +
    "\006\003\031\052\172\001\002\000\006\003\uffd3\052\uffd3" +
    "\001\002\000\006\003\uffd2\052\uffd2\001\002\000\014\003" +
    "\uffe7\027\uffe7\032\uffe7\035\uffe7\053\uffe7\001\002\000\014" +
    "\003\uffe8\027\uffe8\032\uffe8\035\uffe8\053\uffe8\001\002\000" +
    "\014\003\uffc9\027\020\032\161\035\160\053\uffc9\001\002" +
    "\000\006\003\157\053\176\001\002\000\016\003\uffe9\027" +
    "\uffe9\030\uffe9\032\uffe9\035\uffe9\053\uffe9\001\002\000\016" +
    "\003\uffea\027\uffea\030\uffea\032\uffea\035\uffea\053\uffea\001" +
    "\002\000\014\003\uffd5\027\uffd5\032\uffd5\035\uffd5\053\uffd5" +
    "\001\002\000\004\006\201\001\002\000\006\055\203\056" +
    "\202\001\002\000\004\006\204\001\002\000\006\003\uffd0" +
    "\052\uffd0\001\002\000\004\055\205\001\002\000\006\003" +
    "\uffd1\052\uffd1\001\002\000\032\003\031\013\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\052\172\001\002\000\014\003\uffc9\027\020" +
    "\032\161\035\160\053\uffc9\001\002\000\006\003\157\053" +
    "\176\001\002\000\016\003\uffda\027\uffda\030\213\032\uffda" +
    "\035\uffda\053\uffda\001\002\000\014\003\uffcf\027\uffcf\032" +
    "\uffcf\035\uffcf\053\uffcf\001\002\000\006\003\214\052\216" +
    "\001\002\000\014\003\uff82\027\uff82\032\uff82\035\uff82\053" +
    "\uff82\001\002\000\014\003\157\027\020\032\161\035\160" +
    "\053\uffc9\001\002\000\014\003\157\027\020\032\161\035" +
    "\160\053\uffc9\001\002\000\016\002\uffdc\003\uffdc\027\uffdc" +
    "\032\uffdc\035\uffdc\053\uffdc\001\002\000\016\002\uffdb\003" +
    "\uffdb\027\uffdb\032\uffdb\035\uffdb\053\uffdb\001\002\000\006" +
    "\003\uffcc\053\uffcc\001\002\000\016\002\uffd6\003\uffd6\027" +
    "\uffd6\032\uffd6\035\uffd6\053\uffd6\001\002\000\016\002\uffdf" +
    "\003\uffdf\027\uffdf\032\uffdf\035\uffdf\053\uffdf\001\002\000" +
    "\034\003\147\004\070\006\045\007\055\010\046\011\054" +
    "\025\057\026\060\040\066\041\047\051\061\054\051\060" +
    "\064\001\002\000\014\003\157\027\020\032\161\035\160" +
    "\053\uffc9\001\002\000\030\013\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\052\233\001\002\000\004\052\230\001\002\000\014\003" +
    "\157\027\020\032\161\035\160\053\uffc9\001\002\000\022" +
    "\002\uffda\003\uffda\027\uffda\030\213\031\224\032\uffda\035" +
    "\uffda\053\uffda\001\002\000\016\002\uffd8\003\uffd8\027\uffd8" +
    "\032\uffd8\035\uffd8\053\uffd8\001\002\000\014\003\157\027" +
    "\020\032\161\035\160\053\uffc9\001\002\000\022\002\uffda" +
    "\003\uffda\027\uffda\030\213\031\224\032\uffda\035\uffda\053" +
    "\uffda\001\002\000\016\002\uffd9\003\uffd9\027\uffd9\032\uffd9" +
    "\035\uffd9\053\uffd9\001\002\000\022\002\uffda\003\uffda\027" +
    "\uffda\030\213\031\224\032\uffda\035\uffda\053\uffda\001\002" +
    "\000\016\002\uffd7\003\uffd7\027\uffd7\032\uffd7\035\uffd7\053" +
    "\uffd7\001\002\000\026\002\uffce\003\uffce\022\uffce\024\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\035\uffce\053\uffce\001" +
    "\002\000\006\003\uffcb\053\uffcb\001\002\000\006\003\uffca" +
    "\053\uffca\001\002\000\014\003\157\027\020\032\161\035" +
    "\160\053\uffc9\001\002\000\022\002\uffda\003\uffda\027\uffda" +
    "\030\213\031\224\032\uffda\035\uffda\053\uffda\001\002\000" +
    "\016\002\uffe0\003\uffe0\027\uffe0\032\uffe0\035\uffe0\053\uffe0" +
    "\001\002\000\022\002\uffda\003\uffda\027\uffda\030\213\031" +
    "\224\032\uffda\035\uffda\053\uffda\001\002\000\016\002\uffde" +
    "\003\uffde\027\uffde\032\uffde\035\uffde\053\uffde\001\002\000" +
    "\004\002\001\001\002\000\010\002\uff9c\003\031\022\032" +
    "\001\002\000\004\003\253\001\002\000\022\002\ufff9\003" +
    "\257\022\ufff9\024\006\027\020\032\161\035\160\053\uffc9" +
    "\001\002\000\012\002\ufff9\003\025\022\ufff9\024\006\001" +
    "\002\000\012\002\ufff5\003\ufff5\022\ufff5\024\ufff5\001\002" +
    "\000\004\004\261\001\002\000\014\002\uff87\003\uff87\004" +
    "\uff7f\022\uff87\024\uff87\001\002\000\010\002\ufffb\003\ufffb" +
    "\022\ufffb\001\002\000\004\003\262\001\002\000\014\003" +
    "\157\027\020\032\161\035\160\053\uffc9\001\002\000\012" +
    "\002\ufffa\003\ufffa\022\ufffa\024\ufffa\001\002\000\010\002" +
    "\uff98\003\uff98\022\uff98\001\002\000\010\002\ufffc\003\ufffc" +
    "\022\ufffc\001\002\000\004\054\273\001\002\000\014\002" +
    "\ufff9\003\025\022\ufff9\024\006\052\271\001\002\000\012" +
    "\002\ufff6\003\ufff6\022\ufff6\024\ufff6\001\002\000\014\003" +
    "\157\027\020\032\161\035\160\053\uffc9\001\002\000\012" +
    "\002\ufff7\003\ufff7\022\ufff7\024\ufff7\001\002\000\006\022" +
    "\275\055\ufff2\001\002\000\004\055\307\001\002\000\006" +
    "\003\276\004\277\001\002\000\006\055\uff7e\056\uff7e\001" +
    "\002\000\006\055\ufff0\056\302\001\002\000\006\055\ufff0" +
    "\056\302\001\002\000\004\055\ufff3\001\002\000\004\022" +
    "\303\001\002\000\004\004\304\001\002\000\006\055\ufff0" +
    "\056\302\001\002\000\004\055\ufff1\001\002\000\004\055" +
    "\ufff4\001\002\000\004\052\310\001\002\000\014\003\157" +
    "\027\020\032\161\035\160\053\uffc9\001\002\000\012\002" +
    "\ufff8\003\ufff8\022\ufff8\024\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\030\002\016\005\012\006\007\010\003\022" +
    "\004\032\006\033\020\035\013\036\015\044\010\056\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\266\001\001\000\002\001\001\000\010\006\253\007\264" +
    "\056\255\001\001\000\012\006\007\010\025\040\263\056" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\013\052\050\061\051\142\053\145" +
    "\061\143\062\144\063\066\064\055\074\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\007\010\025\040\026\056\011\001\001\000\002\001" +
    "\001\000\010\003\032\034\033\045\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\034\001\001\000\002\001\001\000\012" +
    "\003\037\041\035\045\027\046\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\140" +
    "\067\042\001\001\000\006\004\043\067\042\001\001\000" +
    "\020\013\052\050\061\061\047\062\051\063\066\064\055" +
    "\074\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\071\075\072\112" +
    "\073\106\075\110\001\001\000\020\013\052\050\061\061" +
    "\134\062\135\063\066\064\055\074\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\052\050\061\061\133\062\051\063\066\064" +
    "\055\074\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\052\050\061\061\124\062\051\063\066\064" +
    "\055\065\125\074\064\001\001\000\020\013\052\050\061" +
    "\061\123\062\051\063\066\064\055\074\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\122\001\001\000\022\013\052\015\073\050\061\061" +
    "\072\062\051\063\066\064\055\074\064\001\001\000\014" +
    "\014\104\071\075\072\112\073\106\075\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\052\050\061\061\117\062\051\063\066\064\055\074" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\052\050\061\061\116" +
    "\062\051\063\066\064\055\074\064\001\001\000\002\001" +
    "\001\000\020\013\052\050\061\061\115\062\051\063\066" +
    "\064\055\074\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\071\075" +
    "\072\112\073\106\075\110\001\001\000\012\071\075\072" +
    "\112\073\106\075\110\001\001\000\014\014\120\071\075" +
    "\072\112\073\106\075\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\071\075\072\112" +
    "\073\106\075\110\001\001\000\014\066\130\071\075\072" +
    "\112\073\106\075\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\052\050\061\061\131\062\051\063" +
    "\066\064\055\074\064\001\001\000\002\001\001\000\014" +
    "\066\132\071\075\072\112\073\106\075\110\001\001\000" +
    "\002\001\001\000\012\071\075\072\112\073\106\075\110" +
    "\001\001\000\012\071\075\072\112\073\106\075\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\152\022" +
    "\150\026\155\031\151\046\153\104\245\001\001\000\012" +
    "\071\075\072\112\073\106\075\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\152" +
    "\022\150\026\155\031\151\046\153\104\154\001\001\000" +
    "\012\020\241\022\150\026\155\031\151\001\001\000\012" +
    "\020\240\022\150\026\155\031\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\221\024\222\001\001" +
    "\000\012\020\220\022\150\026\155\031\151\001\001\000" +
    "\002\001\001\000\020\013\052\050\061\061\143\062\205" +
    "\063\066\064\055\074\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\165\030\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\172\045\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\173\022\150\026\155\031" +
    "\151\001\001\000\006\042\176\046\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\206\045" +
    "\170\001\001\000\012\020\207\022\150\026\155\031\151" +
    "\001\001\000\006\042\210\046\174\001\001\000\004\023" +
    "\211\001\001\000\002\001\001\000\004\051\214\001\001" +
    "\000\002\001\001\000\016\020\152\022\150\026\155\031" +
    "\151\046\153\104\217\001\001\000\016\020\152\022\150" +
    "\026\155\031\151\046\153\104\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\013\052\050\061\051\224\053" +
    "\226\061\143\062\225\063\066\064\055\074\064\001\001" +
    "\000\016\020\152\022\150\026\155\031\151\046\153\104" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\152\022\150\026\155\031\151\046\153\104\230\001" +
    "\001\000\006\023\221\024\231\001\001\000\002\001\001" +
    "\000\016\020\152\022\150\026\155\031\151\046\153\104" +
    "\233\001\001\000\006\023\221\024\234\001\001\000\002" +
    "\001\001\000\006\023\221\024\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\020\152\022\150\026\155\031\151\046\153\104" +
    "\243\001\001\000\006\023\221\024\244\001\001\000\002" +
    "\001\001\000\006\023\221\024\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\037\045\027\001\001" +
    "\000\002\001\001\000\024\006\253\007\257\020\152\022" +
    "\150\026\155\031\151\046\153\056\255\104\254\001\001" +
    "\000\010\006\253\007\262\056\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\020\152\022\150\026\155\031" +
    "\151\046\153\104\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\253\007\267\056\255\001\001\000\002\001\001\000\016" +
    "\020\152\022\150\026\155\031\151\046\153\104\271\001" +
    "\001\000\002\001\001\000\004\011\273\001\001\000\002" +
    "\001\001\000\004\057\277\001\001\000\002\001\001\000" +
    "\004\012\305\001\001\000\004\012\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\152\022\150\026\155\031\151\046" +
    "\153\104\310\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;

  ArrayList<String> errores;

  public Analizador(java_cup.runtime.Scanner s, boolean type) {
    super(s);
    errores = new ArrayList<String>();
  }
  
  public void addError(String error){
    errores.add(error);
    /*ProyectoCompi.PoyectoCompi.consola.impirmir(error);*/
  }

  public ArrayList<String> retornarLista(){
    return errores;
  }
  public void syntax_error(Symbol s){
    System.out.println("Error en la linea : " + s.value);
   
  }
/*public void unrecovered_syntax_error(Symbol s){
    System.out.println("Error crítico en la linea : " + s.value);
  }*/
protected int error_sync_size(){
    return 1;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {



  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Funcional 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo Funcional."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= OOP 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo OOP."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= If 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Error por final de archivo.");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Funcional ::= DefFuncionesFact 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcional",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DefFuncionesFact ::= DefFuncion DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncionesFact",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DefFuncionesFact ::= errDecFuncion identificador error DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncionesFact",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DefFunciones ::= DefFuncion DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DefFunciones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DefFuncion ::= def identificador parenAbierto DefParametrosFact parenCerrado dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DefFuncion ::= def errDecFuncion dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DefFuncion ::= def errDecFuncion DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DefFuncion ::= errDecFuncion identificador error BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DefParametrosFact ::= var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DefParametrosFact ::= var errParametro1 DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DefParametrosFact ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DefParametros ::= coma var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DefParametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CodigoPrincipal ::= Expresiones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CodigoPrincipal",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Variable ::= var identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Variable ::= errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Variables ::= Variables Variable 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Variables ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PuntoComa ::= puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PuntoComa",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PuntoComa ::= errPuntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PuntoComa",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DosPuntos ::= dosPuntos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DosPuntos ::= errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Funcion ::= identificador parenAbierto Parametros parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcion",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Parametros ::= Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Parametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Parametro ::= coma Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Parametro ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DecIf ::= DecIf Elif Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DecIf",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // If ::= iif ExpresionB dosPuntos BloquePuntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // If ::= iif errExpresionB dosPuntos BloquePuntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // If ::= iif errIf BloquePuntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Finif ::= PuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Finif",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Else ::= eelse dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Else ::= eelse errIf BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Else ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Elif ::= elif ExpresionB dosPuntos BloquePuntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Elif ::= elif errExpresionB dosPuntos BloquePuntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Elif ::= elif errIf BloquePuntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Elif ::= Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ForFact ::= ffor identificador in For DosPuntos Bloque PuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ForFact",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // For ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // For ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // For ::= Range 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Range ::= range parenAbierto INT coma INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Range ::= range parenAbierto INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // While ::= wwhile ExpresionB DosPuntos Bloque PuntoComa Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BloquePuntoComa ::= Bloque puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BloquePuntoComa ::= errPuntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bloque ::= ForFact Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bloque ::= While Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bloque ::= If Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Bloque ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Literal ::= INT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Literal ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Literal ::= CHAR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Literal ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Lista ::= cuadradoAbierto ElementosLista cuadradoCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Lista",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ElementosLista ::= Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MasElementosLista ::= coma Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MasElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expresion ::= Literal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expresion ::= Lista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expresion ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expresion ::= Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expresion ::= parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expresion ::= errExpresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expresion ::= Expresion OpBinario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expresion ::= OpUnario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expresion ::= identificador punto Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expresion ::= ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExpresionB ::= ffalse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ExpresionB ::= ttrue 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ExpresionB ::= opNot Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ExpresionB ::= Expresion OpBinarioB Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ExpresionB ::= parenAbierto ExpresionB parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Asignacion ::= identificador opAsignaciones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Asignacion ::= errAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expresiones ::= Expresiones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExpresionesB ::= ExpresionesB ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExpresionesB ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Asignaciones ::= Asignaciones Asignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Asignaciones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FuncionesPredefinidas ::= FuncionesPredefinidas FuncionPredefinida 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FuncionesPredefinidas ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FuncionPredefinida ::= Input 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FuncionPredefinida ::= Print 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Input ::= iinput parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Input ::= errInput 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Print ::= pprint parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Print ::= errPrint 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VariablesOOP ::= Variable Variables PuntoComaOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariablesOOP",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PuntoComaOOP ::= puntoComa CodigoPrincipal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PuntoComaOOP",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PuntoComaOOP ::= errPuntoYComa CodigoPrincipal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PuntoComaOOP",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FuncionesOOP ::= DefFuncionesFact VariablesOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesOOP",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OOP ::= Clase Variables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OOP",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Clase ::= BloqueOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Clase",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BloqueOOP ::= HeaderOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueOOP",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // HeaderOOP ::= clas identificador dosPuntos FuncionesOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // HeaderOOP ::= errHeaderOOP FuncionesOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OpAritmeticos ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OpAritmeticos ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OpAritmeticos ::= opMultiplicacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OpAritmeticos ::= opDivision 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OpAritmeticos ::= opDivisionE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OpAritmeticos ::= opModulo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OpUnario ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OpUnario ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OpBinario ::= OpAritmeticos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinario",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OpBinarioB ::= opComparadores 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OpBinarioB ::= OpLogicos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OpLogicos ::= opAnd 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OpLogicos ::= opOr 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OpLogicos ::= opNot 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // errHeaderOOP ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en el header del fuente de tipo OOP. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errHeaderOOP",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // errDecVariables ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error al declarar variables. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecVariables",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // errPuntoYComa ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Falto cerrar un bloque con ';'. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPuntoYComa",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // errClase ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la clase. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errClase",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // errExpresion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresion",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // errExpresionB ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Debe ser booleana. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresionB",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // errAsignacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la asignación. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errAsignacion",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // errIf ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la definicion del if. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errIf",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // errInput ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en input(). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errInput",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // errPrint ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en print() Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPrint",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // errDecFuncion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecFuncion",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // errParametro1 ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de los parametros de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errParametro1",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // errBloque ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error Bloque. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errBloque",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
