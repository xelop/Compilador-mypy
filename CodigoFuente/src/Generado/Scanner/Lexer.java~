/* The following code was generated by JFlex 1.6.1 */

package Generado.Scanner;
import static Generado.Scanner.Token.*;
import Generado.Parser.sym;
import java_cup.runtime.*;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Generado/Scanner/lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MYSTRING = 2;
  public static final int MYCHAR = 4;
  public static final int COMENTARIOBLOQUE = 6;
  public static final int COMENTARIOBLOQUE2 = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\76\1\11\1\13\1\14\1\14\1\12\22\76\1\10\1\47\1\16"+
    "\1\15\1\76\1\45\1\52\1\57\1\63\1\64\1\43\1\41\1\6"+
    "\1\42\1\53\1\44\1\3\1\4\6\5\2\2\1\54\1\56\1\50"+
    "\1\46\1\51\2\76\1\1\1\60\3\1\1\67\7\1\1\40\1\61"+
    "\4\1\1\70\3\1\1\62\2\1\1\65\1\77\1\66\1\52\1\1"+
    "\1\76\1\22\1\31\1\33\1\7\1\32\1\17\1\30\1\34\1\26"+
    "\1\1\1\74\1\20\1\37\1\27\1\21\1\36\1\1\1\25\1\24"+
    "\1\23\1\71\1\1\1\72\1\35\1\73\1\1\1\55\1\52\1\55"+
    "\1\52\1\76\5\75\1\100\32\75\1\0\u15df\75\1\0\u097f\75\13\0"+
    "\35\75\1\100\1\100\5\75\1\0\57\75\1\0\u0fa0\75\1\0\uffff\75\uffff\75\uffff\75\uffff\75\uffff\75\uffff\75\uffff\75\uffff\75\uffff\75\uffff\75\uffff\75\uffff\75\uffff\75\uffff\75\uffff\75\uffff\75\ud00f\75";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\4\1\2\3\5\1\6"+
    "\17\2\1\7\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\2\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\3\2\1\30\1\31\1\32\2\33"+
    "\1\34\1\30\1\35\2\36\2\30\1\37\1\40\1\0"+
    "\3\40\1\2\1\0\6\2\1\41\6\2\1\42\1\43"+
    "\1\44\15\2\1\14\1\45\1\46\1\43\1\15\1\0"+
    "\3\2\1\47\1\50\1\51\2\0\1\52\3\3\1\53"+
    "\1\54\1\55\1\2\1\56\5\2\1\57\1\60\4\2"+
    "\1\61\2\2\1\62\15\2\1\63\3\2\1\64\2\2"+
    "\1\65\10\2\1\66\1\67\5\2\1\70\5\2\1\71"+
    "\1\2\1\72\2\2\1\73\1\2\1\74\1\2\1\75"+
    "\1\76\1\77\1\2\1\100\1\2\1\101\1\2\1\102"+
    "\1\2\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0145\0\u0249\0\u0145\0\u028a\0\u02cb\0\u030c\0\u034d"+
    "\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555"+
    "\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u071c"+
    "\0\u075d\0\u079e\0\u0145\0\u07df\0\u07df\0\u0820\0\u0861\0\u0145"+
    "\0\u0145\0\u0145\0\u0145\0\u0145\0\u08a2\0\u0145\0\u0145\0\u0145"+
    "\0\u0145\0\u08e3\0\u0924\0\u0965\0\u0145\0\u0145\0\u0145\0\u09a6"+
    "\0\u0145\0\u0145\0\u09e7\0\u0145\0\u0145\0\u0a28\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2"+
    "\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0186\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0186\0\u0186\0\u0fff"+
    "\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207"+
    "\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u0145\0\u071c\0\u071c"+
    "\0\u0145\0\u0145\0\u138d\0\u13ce\0\u140f\0\u1450\0\u0145\0\u0145"+
    "\0\u0145\0\u1491\0\u14d2\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0186"+
    "\0\u0186\0\u0145\0\u1513\0\u0186\0\u1554\0\u1595\0\u15d6\0\u1617"+
    "\0\u1658\0\u0186\0\u0186\0\u1699\0\u16da\0\u171b\0\u175c\0\u0186"+
    "\0\u179d\0\u17de\0\u0186\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923"+
    "\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b"+
    "\0\u0145\0\u1b6c\0\u1bad\0\u1bee\0\u0145\0\u1c2f\0\u1c70\0\u0186"+
    "\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78"+
    "\0\u0186\0\u0186\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u0186"+
    "\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u0186\0\u2143\0\u0186"+
    "\0\u2184\0\u21c5\0\u0186\0\u2206\0\u0186\0\u2247\0\u0186\0\u0186"+
    "\0\u0186\0\u2288\0\u0186\0\u22c9\0\u0186\0\u230a\0\u0186\0\u234b"+
    "\0\u0186";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\2\10\1\12\1\13\2\14"+
    "\1\15\1\14\1\0\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\2\7\1\35\1\7\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\3\7\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\7\1\64\2\7\3\6"+
    "\1\0\1\6\7\65\1\66\1\67\1\70\1\71\1\0"+
    "\1\65\1\72\60\65\1\73\1\0\57\65\1\74\21\65"+
    "\1\75\7\65\1\66\1\75\1\76\2\75\1\65\1\77"+
    "\60\65\1\73\2\75\7\65\1\66\1\75\1\76\2\75"+
    "\42\65\1\100\17\65\1\73\1\75\101\0\1\101\5\7"+
    "\1\0\1\7\7\0\22\7\17\0\3\7\4\0\6\7"+
    "\1\101\2\0\1\101\1\0\1\102\4\10\1\0\1\102"+
    "\7\0\22\102\12\0\1\103\4\0\3\102\4\0\6\102"+
    "\5\0\1\102\4\10\1\0\1\102\7\0\2\102\1\104"+
    "\7\102\1\105\3\102\1\106\3\102\12\0\1\103\4\0"+
    "\1\105\1\104\1\106\4\0\6\102\4\0\1\101\5\7"+
    "\1\0\1\7\7\0\13\7\1\107\6\7\17\0\3\7"+
    "\4\0\6\7\1\101\2\0\1\101\13\0\1\14\65\0"+
    "\12\16\1\15\1\14\65\16\16\0\1\110\62\0\1\101"+
    "\5\7\1\0\1\7\7\0\1\7\1\111\1\112\3\7"+
    "\1\113\1\114\12\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\3\7\1\115"+
    "\3\7\1\116\12\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\6\7\1\117"+
    "\13\7\17\0\3\7\4\0\6\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\5\7\1\120\2\7\1\121"+
    "\11\7\17\0\3\7\4\0\6\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\6\7\1\122\13\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\2\101\5\7\1\0"+
    "\1\7\7\0\4\7\1\123\15\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\3\7\1\124\7\7\1\125\6\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\1\126\4\7\1\127\2\7\1\130\7\7\1\131\1\7"+
    "\17\0\3\7\4\0\6\7\1\101\2\0\2\101\5\7"+
    "\1\0\1\7\7\0\2\7\1\132\17\7\17\0\3\7"+
    "\4\0\6\7\1\101\2\0\2\101\5\7\1\0\1\7"+
    "\7\0\1\7\1\133\20\7\17\0\3\7\4\0\6\7"+
    "\1\101\2\0\2\101\5\7\1\0\1\7\7\0\2\7"+
    "\1\134\3\7\1\135\13\7\17\0\3\7\4\0\6\7"+
    "\1\101\2\0\2\101\5\7\1\0\1\7\7\0\1\7"+
    "\1\136\14\7\1\137\3\7\17\0\3\7\4\0\6\7"+
    "\1\101\2\0\2\101\5\7\1\0\1\7\7\0\1\7"+
    "\1\140\1\141\12\7\1\142\4\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\3\7\1\143\2\7\1\144\13\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\2\7\1\145\17\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\1\101\46\0\1\146\75\0\1\147\2\0\1\146"+
    "\76\0\1\150\1\0\1\146\100\0\1\151\100\0\1\152"+
    "\1\0\1\50\1\151\75\0\1\152\2\0\1\50\106\0"+
    "\1\153\21\0\1\101\5\7\1\0\1\7\7\0\3\7"+
    "\1\154\16\7\17\0\3\7\4\0\6\7\1\101\2\0"+
    "\2\101\5\7\1\0\1\7\7\0\6\7\1\155\13\7"+
    "\17\0\3\7\4\0\6\7\1\101\2\0\2\101\5\7"+
    "\1\0\1\7\7\0\15\7\1\156\4\7\17\0\3\7"+
    "\4\0\6\7\1\101\2\0\1\101\13\0\1\71\103\0"+
    "\1\157\4\0\1\67\1\0\1\160\1\0\1\161\64\0"+
    "\1\75\103\0\1\162\141\0\1\163\21\0\6\101\1\0"+
    "\1\101\7\0\22\101\17\0\3\101\4\0\7\101\2\0"+
    "\1\101\1\0\5\102\1\0\1\102\7\0\22\102\17\0"+
    "\3\102\4\0\6\102\6\0\4\164\74\0\2\102\3\165"+
    "\1\0\1\102\7\0\22\102\17\0\3\102\4\0\6\102"+
    "\5\0\2\102\2\166\1\102\1\0\1\102\7\0\22\102"+
    "\17\0\3\102\4\0\6\102\5\0\1\102\4\167\1\0"+
    "\1\167\7\0\1\167\2\102\1\167\6\102\3\167\5\102"+
    "\17\0\3\102\4\0\6\102\4\0\1\101\5\7\1\0"+
    "\1\7\7\0\1\170\1\171\20\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\1\101\16\0\1\172\62\0\1\101"+
    "\5\7\1\0\1\7\7\0\2\7\1\173\17\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\2\101\5\7\1\0"+
    "\1\7\7\0\6\7\1\174\13\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\2\7\1\175\17\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\10\7\1\176"+
    "\11\7\17\0\3\7\4\0\6\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\20\7\1\177\1\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\2\101\5\7\1\0"+
    "\1\7\7\0\5\7\1\200\14\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\5\7\1\201\14\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\202\7\0\22\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\2\101\5\7\1\0"+
    "\1\7\7\0\22\7\17\0\3\7\4\0\4\7\1\203"+
    "\1\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\6\7\1\204\13\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\7\7\1\205"+
    "\1\206\11\7\17\0\3\7\4\0\6\7\1\101\2\0"+
    "\2\101\5\7\1\0\1\7\7\0\4\7\1\207\15\7"+
    "\17\0\3\7\4\0\6\7\1\101\2\0\2\101\5\7"+
    "\1\0\1\7\7\0\4\7\1\210\12\7\1\211\2\7"+
    "\17\0\3\7\4\0\6\7\1\101\2\0\2\101\5\7"+
    "\1\0\1\7\7\0\17\7\1\212\2\7\17\0\3\7"+
    "\4\0\6\7\1\101\2\0\2\101\5\7\1\0\1\7"+
    "\7\0\4\7\1\213\15\7\17\0\3\7\4\0\6\7"+
    "\1\101\2\0\2\101\5\7\1\0\1\7\7\0\2\7"+
    "\1\214\17\7\17\0\3\7\4\0\6\7\1\101\2\0"+
    "\2\101\5\7\1\0\1\7\7\0\2\7\1\215\17\7"+
    "\17\0\3\7\4\0\6\7\1\101\2\0\2\101\5\7"+
    "\1\0\1\7\7\0\13\7\1\216\6\7\17\0\3\7"+
    "\4\0\6\7\1\101\2\0\2\101\5\7\1\0\1\7"+
    "\7\0\5\7\1\217\1\7\1\220\12\7\17\0\3\7"+
    "\4\0\6\7\1\101\2\0\2\101\5\7\1\0\1\7"+
    "\7\0\13\7\1\221\1\222\5\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\3\7\1\223\16\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\10\7\1\224"+
    "\11\7\17\0\3\7\4\0\6\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\3\7\1\225\16\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\2\101\5\7\1\0"+
    "\1\7\7\0\5\7\1\226\14\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\7\7\1\227\12\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\10\7\1\230"+
    "\11\7\17\0\3\7\4\0\6\7\1\101\2\0\1\101"+
    "\57\0\1\231\21\0\1\101\5\7\1\0\1\7\7\0"+
    "\1\7\1\232\20\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\22\7\17\0"+
    "\3\7\4\0\2\7\1\233\3\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\7\7\1\234\12\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\1\101\16\0\1\235"+
    "\141\0\1\235\21\0\1\101\5\7\1\0\1\7\7\0"+
    "\3\7\1\200\16\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\20\7\1\171"+
    "\1\7\17\0\3\7\4\0\6\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\3\7\1\236\16\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\2\101\5\7\1\0"+
    "\1\7\7\0\12\7\1\237\7\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\4\7\1\240\15\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\13\7\1\241"+
    "\6\7\17\0\3\7\4\0\6\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\7\7\1\242\12\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\2\101\5\7\1\0"+
    "\1\7\7\0\5\7\1\230\14\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\11\7\1\243\10\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\22\7\17\0"+
    "\3\7\4\0\2\7\1\244\3\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\22\7\17\0\3\7\4\0"+
    "\2\7\1\245\3\7\1\101\2\0\2\101\5\7\1\0"+
    "\1\7\7\0\2\7\1\241\17\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\12\7\1\246\7\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\1\7\1\247"+
    "\20\7\17\0\3\7\4\0\6\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\3\7\1\250\16\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\2\101\5\7\1\0"+
    "\1\7\7\0\13\7\1\251\6\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\1\252\21\7\17\0\3\7\4\0\6\7\1\101\2\0"+
    "\2\101\5\7\1\0\1\7\7\0\14\7\1\171\5\7"+
    "\17\0\3\7\4\0\6\7\1\101\2\0\2\101\5\7"+
    "\1\0\1\7\7\0\13\7\1\253\6\7\17\0\3\7"+
    "\4\0\6\7\1\101\2\0\2\101\5\7\1\0\1\7"+
    "\7\0\5\7\1\254\14\7\17\0\3\7\4\0\6\7"+
    "\1\101\2\0\2\101\5\7\1\0\1\7\7\0\4\7"+
    "\1\255\15\7\17\0\3\7\4\0\6\7\1\101\2\0"+
    "\2\101\5\7\1\0\1\7\7\0\6\7\1\240\13\7"+
    "\17\0\3\7\4\0\6\7\1\101\2\0\2\101\5\7"+
    "\1\0\1\7\7\0\5\7\1\171\14\7\17\0\3\7"+
    "\4\0\6\7\1\101\2\0\2\101\5\7\1\0\1\7"+
    "\7\0\10\7\1\256\11\7\17\0\3\7\4\0\6\7"+
    "\1\101\2\0\2\101\5\7\1\0\1\7\7\0\13\7"+
    "\1\171\6\7\17\0\3\7\4\0\6\7\1\101\2\0"+
    "\2\101\5\7\1\0\1\7\7\0\5\7\1\257\14\7"+
    "\17\0\3\7\4\0\6\7\1\101\2\0\2\101\5\7"+
    "\1\0\1\7\7\0\13\7\1\260\6\7\17\0\3\7"+
    "\4\0\6\7\1\101\2\0\2\101\5\7\1\0\1\7"+
    "\7\0\1\7\1\261\20\7\17\0\3\7\4\0\6\7"+
    "\1\101\2\0\2\101\5\7\1\0\1\7\7\0\1\7"+
    "\1\262\20\7\17\0\3\7\4\0\6\7\1\101\2\0"+
    "\2\101\5\7\1\0\1\263\7\0\22\7\17\0\3\7"+
    "\4\0\6\7\1\101\2\0\2\101\5\7\1\0\1\7"+
    "\7\0\6\7\1\264\13\7\17\0\3\7\4\0\6\7"+
    "\1\101\2\0\2\101\5\7\1\0\1\7\7\0\10\7"+
    "\1\265\11\7\17\0\3\7\4\0\6\7\1\101\2\0"+
    "\2\101\5\7\1\0\1\7\7\0\13\7\1\266\6\7"+
    "\17\0\3\7\4\0\6\7\1\101\2\0\2\101\5\7"+
    "\1\0\1\7\7\0\6\7\1\267\13\7\17\0\3\7"+
    "\4\0\6\7\1\101\2\0\2\101\5\7\1\0\1\7"+
    "\7\0\4\7\1\270\15\7\17\0\3\7\4\0\6\7"+
    "\1\101\2\0\2\101\5\7\1\0\1\7\7\0\3\7"+
    "\1\271\16\7\17\0\3\7\4\0\6\7\1\101\2\0"+
    "\2\101\5\7\1\0\1\7\7\0\13\7\1\272\6\7"+
    "\17\0\3\7\4\0\6\7\1\101\2\0\2\101\5\7"+
    "\1\0\1\7\7\0\22\7\17\0\3\7\4\0\5\7"+
    "\1\273\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\17\7\1\274\2\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\5\7\1\275"+
    "\14\7\17\0\3\7\4\0\6\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\7\7\1\276\12\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\2\101\5\7\1\0"+
    "\1\7\7\0\4\7\1\277\15\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\13\7\1\300\6\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\13\7\1\301"+
    "\6\7\17\0\3\7\4\0\6\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\1\7\1\302\20\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\2\101\5\7\1\0"+
    "\1\7\7\0\3\7\1\171\16\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\4\7\1\171\15\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\11\7\1\240"+
    "\10\7\17\0\3\7\4\0\6\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\10\7\1\303\11\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\2\101\5\7\1\0"+
    "\1\7\7\0\1\7\1\171\20\7\17\0\3\7\4\0"+
    "\6\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\3\7\1\304\16\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\4\7\1\305"+
    "\15\7\17\0\3\7\4\0\6\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\10\7\1\306\11\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\2\101\5\7\1\0"+
    "\1\7\7\0\22\7\17\0\3\7\4\0\4\7\1\307"+
    "\1\7\1\101\2\0\2\101\5\7\1\0\1\7\7\0"+
    "\10\7\1\240\11\7\17\0\3\7\4\0\6\7\1\101"+
    "\2\0\2\101\5\7\1\0\1\7\7\0\22\7\17\0"+
    "\3\7\4\0\2\7\1\310\3\7\1\101\2\0\2\101"+
    "\5\7\1\0\1\7\7\0\13\7\1\311\6\7\17\0"+
    "\3\7\4\0\6\7\1\101\2\0\1\101";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\3\1\1\11\1\1\1\11\26\1\1\11"+
    "\4\1\5\11\1\1\4\11\3\1\3\11\1\1\2\11"+
    "\1\1\2\11\5\1\1\0\4\1\1\0\35\1\1\11"+
    "\2\1\2\11\1\0\3\1\3\11\2\0\6\1\1\11"+
    "\36\1\1\11\3\1\1\11\54\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //esto se copia directamente

    StringBuffer string = new StringBuffer();
    Boolean cambioLinea = false;
    
    public ArrayList<String> errores = new ArrayList<String>();

    public void setError(){
        String error = "Error Léxico: " + lexeme + ". En la línea: " + (getLine()+1);
        errores.add(error);
    }
    

    public String lexeme;
    public int getLine(){
        return yyline;
    }

    private Symbol symbol(int type) {
        return new Symbol(type, yyline+1, yycolumn+1);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case MYSTRING: {
              yybegin(YYINITIAL); lexeme = "String sin terminar: " + string.toString(); setError();
            }
            case 202: break;
            case MYCHAR: {
              yybegin(YYINITIAL); lexeme = "Char sin terminar: " + string.toString(); setError();
            }
            case 203: break;
            case COMENTARIOBLOQUE: {
              yybegin(YYINITIAL); lexeme = "Comentario de bloque sin terminar: " + "\"\"\"" + string.toString(); setError();
            }
            case 204: break;
            case COMENTARIOBLOQUE2: {
              yybegin(YYINITIAL); lexeme = "Comentario de bloque sin terminar: " + "\'\'\'" + string.toString(); setError();
            }
            case 205: break;
            default:
          {   return new java_cup.runtime.Symbol(sym.EOF);
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext();setError();
            }
          case 68: break;
          case 2: 
            { lexeme=yytext(); return symbol(sym.identificador, lexeme);
            }
          case 69: break;
          case 3: 
            { lexeme=yytext(); return symbol(sym.INT, lexeme);
            }
          case 70: break;
          case 4: 
            { lexeme = yytext(); return symbol(sym.coma, lexeme);
            }
          case 71: break;
          case 5: 
            { /* ignore */
            }
          case 72: break;
          case 6: 
            { string.setLength(0); cambioLinea = false; yybegin(MYSTRING);
            }
          case 73: break;
          case 7: 
            { lexeme = yytext(); return symbol(sym.opSuma, lexeme);
            }
          case 74: break;
          case 8: 
            { lexeme = yytext(); return symbol(sym.opResta, lexeme);
            }
          case 75: break;
          case 9: 
            { lexeme = yytext(); return symbol(sym.opMultiplicacion, lexeme);
            }
          case 76: break;
          case 10: 
            { lexeme = yytext(); return symbol(sym.opDivision, lexeme);
            }
          case 77: break;
          case 11: 
            { lexeme = yytext(); return symbol(sym.opModulo, lexeme);
            }
          case 78: break;
          case 12: 
            { lexeme = yytext(); return symbol(sym.opAsignaciones, lexeme);
            }
          case 79: break;
          case 13: 
            { lexeme = yytext(); return symbol(sym.opComEspecifico, lexeme);
            }
          case 80: break;
          case 14: 
            { lexeme = yytext(); return symbol(sym.opBits, lexeme);
            }
          case 81: break;
          case 15: 
            { lexeme = yytext(); return symbol(sym.punto, lexeme);
            }
          case 82: break;
          case 16: 
            { lexeme = yytext(); return symbol(sym.dosPuntos, lexeme);
            }
          case 83: break;
          case 17: 
            { lexeme = yytext(); return symbol(sym.opDelimitadores, lexeme);
            }
          case 84: break;
          case 18: 
            { lexeme = yytext(); return symbol(sym.puntoComa, lexeme);
            }
          case 85: break;
          case 19: 
            { string.setLength(0); yybegin(MYCHAR);
            }
          case 86: break;
          case 20: 
            { lexeme = yytext(); return symbol(sym.parenAbierto, lexeme);
            }
          case 87: break;
          case 21: 
            { lexeme = yytext(); return symbol(sym.parenCerrado, lexeme);
            }
          case 88: break;
          case 22: 
            { lexeme = yytext(); return symbol(sym.cuadradoAbierto, lexeme);
            }
          case 89: break;
          case 23: 
            { lexeme = yytext(); return symbol(sym.cuadradoCerrado, lexeme);
            }
          case 90: break;
          case 24: 
            { string.append( yytext() );
            }
          case 91: break;
          case 25: 
            { string.append(' ');
            }
          case 92: break;
          case 26: 
            { string.append('\t');
            }
          case 93: break;
          case 27: 
            { cambioLinea = true; string.append('\n');
            }
          case 94: break;
          case 28: 
            { yybegin(YYINITIAL);
                                     lexeme = "\"" +string.toString()+"\"";
                                     if(cambioLinea){
                                          setError();
                                     }else{
                                          return symbol(sym.STRING, lexeme);
                                     }
            }
          case 95: break;
          case 29: 
            { yybegin(YYINITIAL); lexeme = "'"+ string.toString()+"'"; 
                                     if(string.length()>1)
                                        setError();
                                     else
                                        return symbol(sym.CHAR, lexeme);
            }
          case 96: break;
          case 30: 
            { string.append(yytext());
            }
          case 97: break;
          case 31: 
            { lexeme=yytext(); setError();
            }
          case 98: break;
          case 32: 
            { lexeme = yytext(); setError();
            }
          case 99: break;
          case 33: 
            { lexeme = yytext(); return symbol(sym.opOr, lexeme);
            }
          case 100: break;
          case 34: 
            { lexeme = yytext(); return symbol(sym.iif, lexeme);
            }
          case 101: break;
          case 35: 
            { lexeme = yytext(); return symbol(sym.opComGeneral, lexeme);
            }
          case 102: break;
          case 36: 
            { lexeme = yytext(); return symbol(sym.in, lexeme);
            }
          case 103: break;
          case 37: 
            { lexeme = yytext(); return symbol(sym.opPotencia, lexeme);
            }
          case 104: break;
          case 38: 
            { lexeme = yytext(); return symbol(sym.opDivisionE, lexeme);
            }
          case 105: break;
          case 39: 
            { string.append('\"');
            }
          case 106: break;
          case 40: 
            { string.append('\r');
            }
          case 107: break;
          case 41: 
            { string.append('\n');
            }
          case 108: break;
          case 42: 
            { lexeme=yytext(); return symbol(sym.FLOAT, lexeme);
            }
          case 109: break;
          case 43: 
            { lexeme = yytext(); return symbol(sym.def, lexeme);
            }
          case 110: break;
          case 44: 
            { lexeme = yytext(); return symbol(sym.palabraReservada, lexeme);
            }
          case 111: break;
          case 45: 
            { string.setLength(0); yybegin(COMENTARIOBLOQUE);
            }
          case 112: break;
          case 46: 
            { lexeme = yytext(); return symbol(sym.ffor, lexeme);
            }
          case 113: break;
          case 47: 
            { lexeme = yytext(); return symbol(sym.opAnd, lexeme);
            }
          case 114: break;
          case 48: 
            { lexeme = yytext(); return symbol(sym.ttry, lexeme);
            }
          case 115: break;
          case 49: 
            { lexeme = yytext(); return symbol(sym.intReservado, lexeme);
            }
          case 116: break;
          case 50: 
            { lexeme = yytext(); return symbol(sym.opNot, lexeme);
            }
          case 117: break;
          case 51: 
            { string.setLength(0); yybegin(COMENTARIOBLOQUE2);
            }
          case 118: break;
          case 52: 
            { yybegin(YYINITIAL);
            }
          case 119: break;
          case 53: 
            { lexeme = yytext(); return symbol(sym.var, lexeme);
            }
          case 120: break;
          case 54: 
            { lexeme = yytext(); return symbol(sym.eelse, lexeme);
            }
          case 121: break;
          case 55: 
            { lexeme = yytext(); return symbol(sym.elif, lexeme);
            }
          case 122: break;
          case 56: 
            { lexeme = yytext(); return symbol(sym.ttrue, lexeme);
            }
          case 123: break;
          case 57: 
            { lexeme = yytext(); return symbol(sym.range, lexeme);
            }
          case 124: break;
          case 58: 
            { lexeme = yytext(); return symbol(sym.iinput, lexeme);
            }
          case 125: break;
          case 59: 
            { lexeme = yytext(); return symbol(sym.bbreak, lexeme);
            }
          case 126: break;
          case 60: 
            { lexeme = yytext(); return symbol(sym.clas, lexeme);
            }
          case 127: break;
          case 61: 
            { lexeme = yytext(); return symbol(sym.pprint, lexeme);
            }
          case 128: break;
          case 62: 
            { lexeme = yytext(); return symbol(sym.ffalse, lexeme);
            }
          case 129: break;
          case 63: 
            { lexeme = yytext(); return symbol(sym.wwhile, lexeme);
            }
          case 130: break;
          case 64: 
            { lexeme = yytext(); return symbol(sym.rreturn, lexeme);
            }
          case 131: break;
          case 65: 
            { lexeme = yytext(); return symbol(sym.eexcept, lexeme);
            }
          case 132: break;
          case 66: 
            { lexeme = yytext(); return symbol(sym.ffinally, lexeme);
            }
          case 133: break;
          case 67: 
            { lexeme = yytext(); return symbol(sym.ccontinue, lexeme);
            }
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
