
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Generado.Parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\005\003\000\002\007\004" +
    "\000\002\007\002\000\002\006\011\000\002\006\006\000" +
    "\002\006\005\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\024\002\000\002\011\005\000\002\011" +
    "\005\000\002\011\002\000\002\012\006\000\002\012\002" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\020\004\000\002\020\002\000\002\017\004\000\002" +
    "\017\004\000\002\016\005\000\002\016\005\000\002\016" +
    "\004\000\002\016\002\000\002\013\006\000\002\015\004" +
    "\000\002\015\002\000\002\014\005\000\002\014\002\000" +
    "\002\026\007\000\002\120\002\000\002\026\010\000\002" +
    "\030\007\000\002\121\002\000\002\030\010\000\002\030" +
    "\003\000\002\027\005\000\002\027\006\000\002\027\002" +
    "\000\002\031\010\000\002\031\010\000\002\031\011\000" +
    "\002\031\010\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\010\000\002\033" +
    "\006\000\002\033\005\000\002\033\004\000\002\034\007" +
    "\000\002\034\010\000\002\122\002\000\002\034\010\000" +
    "\002\123\002\000\002\034\011\000\002\124\002\000\002" +
    "\034\011\000\002\115\004\000\002\115\004\000\002\047" +
    "\003\000\002\047\004\000\002\023\004\000\002\023\003" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\022\002\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\075\005\000\002\076" +
    "\004\000\002\076\002\000\002\077\005\000\002\077\002" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\005\000\002\072\003\000\002" +
    "\072\005\000\002\072\004\000\002\072\005\000\002\072" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\004" +
    "\000\002\073\005\000\002\073\005\000\002\107\005\000" +
    "\002\107\003\000\002\100\004\000\002\100\002\000\002" +
    "\101\004\000\002\101\002\000\002\110\004\000\002\110" +
    "\002\000\002\112\004\000\002\112\002\000\002\111\003" +
    "\000\002\111\003\000\002\113\006\000\002\113\005\000" +
    "\002\113\003\000\002\114\006\000\002\114\003\000\002" +
    "\004\004\000\002\116\004\000\002\116\002\000\002\117" +
    "\003\000\002\117\003\000\002\117\003\000\002\037\003" +
    "\000\002\043\005\000\002\125\002\000\002\043\005\000" +
    "\002\035\003\000\002\041\004\000\002\036\006\000\002" +
    "\036\005\000\002\102\003\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\105\003\000\002\105\003\000" +
    "\002\104\003\000\002\106\003\000\002\106\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\003\000\002\050" +
    "\003\000\002\051\003\000\002\052\003\000\002\053\003" +
    "\000\002\054\003\000\002\057\003\000\002\056\003\000" +
    "\002\055\003\000\002\060\003\000\002\061\003\000\002" +
    "\062\003\000\002\063\003\000\002\064\003\000\002\066" +
    "\003\000\002\065\003\000\002\067\003\000\002\070\003" +
    "\000\002\071\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\012\002\ufffb\003\010\023\013\024\004\001" +
    "\002\000\006\003\202\004\203\001\002\000\004\002\uffff" +
    "\001\002\000\050\002\ufffb\003\ufffb\004\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\022\ufffb\024\004\025\ufffb\026\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\051\ufffb\053\ufffb\054" +
    "\ufffb\060\ufffb\001\002\000\004\002\000\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\200\001\002\000\004\002" +
    "\ufffd\001\002\000\006\003\016\004\017\001\002\000\004" +
    "\002\uff83\001\002\000\050\002\uffea\003\uffea\004\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\022\uffea\024\uffea\025\uffea" +
    "\026\uffea\036\uffea\037\uffea\040\uffea\041\uffea\051\uffea\053" +
    "\uffea\054\uffea\060\uffea\001\002\000\050\002\uff70\003\uff70" +
    "\004\uff70\006\uff70\007\uff70\010\uff70\011\uff70\022\uff70\024" +
    "\uff70\025\uff70\026\uff70\036\uff70\037\uff70\040\uff70\041\uff70" +
    "\051\uff70\053\uff70\054\uff70\060\uff70\001\002\000\004\052" +
    "\020\001\002\000\050\002\uffea\003\uffea\004\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\022\uffea\024\uffea\025\uffea\026" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\051\uffea\053\uffea" +
    "\054\uffea\060\uffea\001\002\000\004\002\uff81\001\002\000" +
    "\050\002\ufffb\003\ufffb\004\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\022\ufffb\024\004\025\ufffb\026\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\041\ufffb\051\ufffb\053\ufffb\054\ufffb\060\ufffb" +
    "\001\002\000\050\002\uff87\003\025\004\uff87\006\uff87\007" +
    "\uff87\010\uff87\011\uff87\022\026\024\uff87\025\uff87\026\uff87" +
    "\036\uff87\037\uff87\040\uff87\041\uff87\051\uff87\053\uff87\054" +
    "\uff87\060\uff87\001\002\000\004\004\044\001\002\000\052" +
    "\002\uff6f\003\uff6f\004\uff6f\006\uff6f\007\uff6f\010\uff6f\011" +
    "\uff6f\022\uff6f\024\uff6f\025\uff6f\026\uff6f\036\uff6f\037\uff6f" +
    "\040\uff6f\041\uff6f\051\uff6f\053\uff6f\054\uff6f\056\uff6f\060" +
    "\uff6f\001\002\000\006\003\025\004\031\001\002\000\050" +
    "\002\uffeb\003\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\051\uffeb\053\uffeb\054\uffeb\060\uffeb\001" +
    "\002\000\052\002\uffed\003\025\004\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\022\uffed\024\uffed\025\uffed\026\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\051\uffed\053\uffed\054\uffed" +
    "\056\034\060\uffed\001\002\000\052\002\uffe4\003\025\004" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\022\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\051" +
    "\uffe4\053\uffe4\054\uffe4\056\034\060\uffe4\001\002\000\050" +
    "\002\uffee\003\uffee\004\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\022\uffee\024\uffee\025\uffee\026\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\051\uffee\053\uffee\054\uffee\060\uffee\001" +
    "\002\000\052\002\uffe4\003\025\004\040\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\051\uffe4\053\uffe4\054\uffe4" +
    "\056\034\060\uffe4\001\002\000\004\004\036\001\002\000" +
    "\050\002\uffe9\003\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\051\uffe9\053\uffe9\054\uffe9\060\uffe9" +
    "\001\002\000\052\002\uffe4\003\025\004\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\051\uffe4\053\uffe4\054" +
    "\uffe4\056\034\060\uffe4\001\002\000\050\002\uffe7\003\uffe7" +
    "\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\022\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\051\uffe7\053\uffe7\054\uffe7\060\uffe7\001\002\000\052\002" +
    "\uffe4\003\025\004\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\022\uffe4\024\uffe4\025\uffe4\026\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\051\uffe4\053\uffe4\054\uffe4\056\034\060\uffe4" +
    "\001\002\000\050\002\uffe5\003\uffe5\004\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\051\uffe5\053\uffe5\054" +
    "\uffe5\060\uffe5\001\002\000\050\002\uffe6\003\uffe6\004\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\022\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\051\uffe6" +
    "\053\uffe6\054\uffe6\060\uffe6\001\002\000\050\002\uffe8\003" +
    "\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\022\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\051\uffe8\053\uffe8\054\uffe8\060\uffe8\001\002\000\050" +
    "\002\uffec\003\uffec\004\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\022\uffec\024\uffec\025\uffec\026\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\051\uffec\053\uffec\054\uffec\060\uffec\001" +
    "\002\000\046\002\uff85\003\uff85\004\uff85\006\uff85\007\uff85" +
    "\010\uff85\011\uff85\022\uff85\025\uff85\026\uff85\036\uff85\037" +
    "\uff85\040\uff85\041\uff85\051\uff85\053\047\054\uff85\060\uff85" +
    "\001\002\000\004\002\uff82\001\002\000\044\002\uffea\003" +
    "\uffea\004\uffea\006\uffea\007\uffea\010\uffea\011\uffea\022\uffea" +
    "\025\uffea\026\uffea\036\uffea\037\uffea\040\uffea\041\uffea\051" +
    "\uffea\054\uffea\060\uffea\001\002\000\044\002\uffea\003\uffea" +
    "\004\uffea\006\uffea\007\uffea\010\uffea\011\uffea\022\uffea\025" +
    "\uffea\026\uffea\036\uffea\037\uffea\040\uffea\041\uffea\051\uffea" +
    "\054\uffea\060\uffea\001\002\000\044\002\uff8b\003\025\004" +
    "\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\022\026\025\uff8b" +
    "\026\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\051\uff8b\054" +
    "\uff8b\060\uff8b\001\002\000\004\002\uff84\001\002\000\042" +
    "\002\uff8d\003\077\004\111\006\054\007\070\010\055\011" +
    "\067\025\073\026\072\036\107\037\057\040\105\041\056" +
    "\051\075\054\062\060\101\001\002\000\072\002\uffb6\003" +
    "\uffb6\004\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\013\uffb6" +
    "\025\uffb6\026\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\001\002\000\072\002\uffb4\003\uffb4\004\uffb4\006\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\013\uffb4\025\uffb4\026\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\001\002\000\034" +
    "\003\uff77\004\uff77\006\uff77\007\uff77\010\uff77\011\uff77\025" +
    "\uff77\026\uff77\040\uff77\041\uff77\051\uff77\054\uff77\060\uff77" +
    "\001\002\000\004\054\172\001\002\000\062\002\uff88\003" +
    "\uff88\004\uff88\006\uff88\007\uff88\010\uff88\011\uff88\013\125" +
    "\025\uff88\026\uff88\036\uff88\037\uff88\040\141\041\130\042" +
    "\142\043\124\044\126\045\134\046\133\047\132\050\140" +
    "\051\127\054\uff88\060\uff88\001\002\000\072\002\uffa4\003" +
    "\uffa4\004\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\013\uffa4" +
    "\025\uffa4\026\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\051\uffa4\052\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\001\002\000\034\003\116\004\120\006\054\007\070" +
    "\010\055\011\067\025\073\026\072\040\105\041\056\051" +
    "\075\054\062\060\101\001\002\000\042\002\uff93\003\uff93" +
    "\004\uff93\006\uff93\007\uff93\010\uff93\011\uff93\025\uff93\026" +
    "\uff93\036\uff93\037\uff93\040\uff93\041\uff93\051\uff93\054\uff93" +
    "\060\uff93\001\002\000\042\002\uff8a\003\uff8a\004\uff8a\006" +
    "\uff8a\007\uff8a\010\uff8a\011\uff8a\025\uff8a\026\uff8a\036\uff8a" +
    "\037\uff8a\040\uff8a\041\uff8a\051\uff8a\054\uff8a\060\uff8a\001" +
    "\002\000\042\002\uff8e\003\uff8e\004\uff8e\006\uff8e\007\uff8e" +
    "\010\uff8e\011\uff8e\025\uff8e\026\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\051\uff8e\054\uff8e\060\uff8e\001\002\000\072" +
    "\002\uffaa\003\uffaa\004\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\013\uffaa\025\uffaa\026\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\054\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\001\002\000\072\002\uffb3\003\uffb3\004" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\013\uffb3\025\uffb3" +
    "\026\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\001" +
    "\002\000\072\002\uffb5\003\uffb5\004\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\013\uffb5\025\uffb5\026\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\001\002\000\072\002\uffac" +
    "\003\uffac\004\uffac\006\uffac\007\uffac\010\uffac\011\uffac\013" +
    "\uffac\025\uffac\026\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\054\uffac\055\uffac\056\uffac\057\uffac" +
    "\060\uffac\001\002\000\072\002\uffa2\003\uffa2\004\uffa2\006" +
    "\uffa2\007\uffa2\010\uffa2\011\uffa2\013\uffa2\025\uffa2\026\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\001\002\000" +
    "\072\002\uffa3\003\uffa3\004\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\013\uffa3\025\uffa3\026\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\052\uffa3\054\uffa3\055\uffa3\056" +
    "\uffa3\057\uffa3\060\uffa3\001\002\000\042\002\uff9d\003\uff9d" +
    "\004\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\025\uff9d\026" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\051\uff9d\054\uff9d" +
    "\060\uff9d\001\002\000\034\003\116\004\120\006\054\007" +
    "\070\010\055\011\067\025\073\026\072\040\105\041\056" +
    "\051\075\054\062\060\101\001\002\000\072\002\uffa8\003" +
    "\uffa8\004\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\013\uffa8" +
    "\025\uffa8\026\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060" +
    "\uffa8\001\002\000\062\002\uff6c\003\uff6c\004\uff6c\006\uff6c" +
    "\007\uff6c\010\uff6c\011\uff6c\013\uff6c\025\uff6c\026\uff6c\036" +
    "\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c" +
    "\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\054\uff6c\060" +
    "\uff6c\001\002\000\042\002\uff94\003\uff94\004\uff94\006\uff94" +
    "\007\uff94\010\uff94\011\uff94\025\uff94\026\uff94\036\uff94\037" +
    "\uff94\040\uff94\041\uff94\051\uff94\054\uff94\060\uff94\001\002" +
    "\000\036\003\116\004\120\006\054\007\070\010\055\011" +
    "\067\025\073\026\072\040\105\041\056\051\075\054\062" +
    "\057\uffb0\060\101\001\002\000\042\002\uff89\003\uff89\004" +
    "\uff89\006\uff89\007\uff89\010\uff89\011\uff89\025\uff89\026\uff89" +
    "\036\uff89\037\uff89\040\uff89\041\uff89\051\uff89\054\uff89\060" +
    "\uff89\001\002\000\034\003\116\004\120\006\054\007\070" +
    "\010\055\011\067\025\073\026\072\040\105\041\056\051" +
    "\075\054\062\060\101\001\002\000\042\002\uff90\003\uff90" +
    "\004\uff90\006\uff90\007\uff90\010\uff90\011\uff90\025\uff90\026" +
    "\uff90\036\uff90\037\uff90\040\uff90\041\uff90\051\uff90\054\uff90" +
    "\060\uff90\001\002\000\034\003\uff78\004\uff78\006\uff78\007" +
    "\uff78\010\uff78\011\uff78\025\uff78\026\uff78\040\uff78\041\uff78" +
    "\051\uff78\054\uff78\060\uff78\001\002\000\072\002\uffad\003" +
    "\uffad\004\uffad\006\uffad\007\uffad\010\uffad\011\uffad\013\uffad" +
    "\025\uffad\026\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060" +
    "\uffad\001\002\000\004\054\152\001\002\000\042\002\uff8c" +
    "\003\uff8c\004\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\025" +
    "\uff8c\026\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\051\uff8c" +
    "\054\uff8c\060\uff8c\001\002\000\066\002\uffab\003\uffab\004" +
    "\uffab\006\uffab\007\uffab\010\uffab\011\uffab\013\uffab\014\113" +
    "\025\uffab\026\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\051\uffab\054\114\060\uffab\061\112\001\002\000\004\004" +
    "\150\001\002\000\034\003\116\004\120\006\054\007\070" +
    "\010\055\011\067\025\073\026\072\040\105\041\056\051" +
    "\075\054\062\060\101\001\002\000\036\003\116\004\120" +
    "\006\054\007\070\010\055\011\067\025\073\026\072\040" +
    "\105\041\056\051\075\054\062\055\uffe1\060\101\001\002" +
    "\000\034\013\125\040\141\041\130\042\142\043\124\044" +
    "\126\045\134\046\133\047\132\050\140\051\127\055\uffdf" +
    "\056\123\001\002\000\072\002\uff6c\003\uff6c\004\uff6c\006" +
    "\uff6c\007\uff6c\010\uff6c\011\uff6c\013\uff6c\025\uff6c\026\uff6c" +
    "\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044" +
    "\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c" +
    "\054\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c\001\002\000" +
    "\004\055\121\001\002\000\074\002\uffab\003\uffab\004\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\013\uffab\025\uffab\026" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\054\114\055\uffab\056\uffab\057\uffab\060\uffab\061\112" +
    "\001\002\000\072\002\uffe3\003\uffe3\004\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\013\uffe3\025\uffe3\026\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\001\002\000\034\003" +
    "\uff76\004\uff76\006\uff76\007\uff76\010\uff76\011\uff76\025\uff76" +
    "\026\uff76\040\uff76\041\uff76\051\uff76\054\uff76\060\uff76\001" +
    "\002\000\034\003\116\004\120\006\054\007\070\010\055" +
    "\011\067\025\073\026\072\040\105\041\056\051\075\054" +
    "\062\060\101\001\002\000\034\003\uff7c\004\uff7c\006\uff7c" +
    "\007\uff7c\010\uff7c\011\uff7c\025\uff7c\026\uff7c\040\uff7c\041" +
    "\uff7c\051\uff7c\054\uff7c\060\uff7c\001\002\000\034\003\uff75" +
    "\004\uff75\006\uff75\007\uff75\010\uff75\011\uff75\025\uff75\026" +
    "\uff75\040\uff75\041\uff75\051\uff75\054\uff75\060\uff75\001\002" +
    "\000\034\003\uff7b\004\uff7b\006\uff7b\007\uff7b\010\uff7b\011" +
    "\uff7b\025\uff7b\026\uff7b\040\uff7b\041\uff7b\051\uff7b\054\uff7b" +
    "\060\uff7b\001\002\000\034\003\uff71\004\uff71\006\uff71\007" +
    "\uff71\010\uff71\011\uff71\025\uff71\026\uff71\040\uff71\041\uff71" +
    "\051\uff71\054\uff71\060\uff71\001\002\000\034\003\uff7e\004" +
    "\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\025\uff7e\026\uff7e" +
    "\040\uff7e\041\uff7e\051\uff7e\054\uff7e\060\uff7e\001\002\000" +
    "\004\055\uffe2\001\002\000\034\003\uff73\004\uff73\006\uff73" +
    "\007\uff73\010\uff73\011\uff73\025\uff73\026\uff73\040\uff73\041" +
    "\uff73\051\uff73\054\uff73\060\uff73\001\002\000\034\003\uff79" +
    "\004\uff79\006\uff79\007\uff79\010\uff79\011\uff79\025\uff79\026" +
    "\uff79\040\uff79\041\uff79\051\uff79\054\uff79\060\uff79\001\002" +
    "\000\034\003\uff7a\004\uff7a\006\uff7a\007\uff7a\010\uff7a\011" +
    "\uff7a\025\uff7a\026\uff7a\040\uff7a\041\uff7a\051\uff7a\054\uff7a" +
    "\060\uff7a\001\002\000\034\003\116\004\120\006\054\007" +
    "\070\010\055\011\067\025\073\026\072\040\105\041\056" +
    "\051\075\054\062\060\101\001\002\000\034\003\116\004" +
    "\120\006\054\007\070\010\055\011\067\025\073\026\072" +
    "\040\105\041\056\051\075\054\062\060\101\001\002\000" +
    "\034\003\uff74\004\uff74\006\uff74\007\uff74\010\uff74\011\uff74" +
    "\025\uff74\026\uff74\040\uff74\041\uff74\051\uff74\054\uff74\060" +
    "\uff74\001\002\000\034\003\uff72\004\uff72\006\uff72\007\uff72" +
    "\010\uff72\011\uff72\025\uff72\026\uff72\040\uff72\041\uff72\051" +
    "\uff72\054\uff72\060\uff72\001\002\000\034\003\uff7f\004\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\011\uff7f\025\uff7f\026\uff7f\040" +
    "\uff7f\041\uff7f\051\uff7f\054\uff7f\060\uff7f\001\002\000\034" +
    "\003\uff7d\004\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\025" +
    "\uff7d\026\uff7d\040\uff7d\041\uff7d\051\uff7d\054\uff7d\060\uff7d" +
    "\001\002\000\072\002\uffa0\003\uffa0\004\uffa0\006\uffa0\007" +
    "\uffa0\010\uffa0\011\uffa0\013\125\025\uffa0\026\uffa0\036\uffa0" +
    "\037\uffa0\040\141\041\130\042\142\043\124\044\126\045" +
    "\134\046\133\047\132\050\140\051\127\052\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\001\002\000\072\002" +
    "\uffa7\003\uffa7\004\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\013\125\025\uffa7\026\uffa7\036\uffa7\037\uffa7\040\141\041" +
    "\130\042\142\043\124\044\126\045\134\046\133\047\132" +
    "\050\140\051\127\052\uffa7\054\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\001\002\000\034\013\125\040\141\041\130" +
    "\042\142\043\124\044\126\045\134\046\133\047\132\050" +
    "\140\051\127\055\uffdf\056\123\001\002\000\004\055\uffe0" +
    "\001\002\000\062\002\uff9e\003\uff9e\004\uff9e\006\uff9e\007" +
    "\uff9e\010\uff9e\011\uff9e\013\125\025\uff9e\026\uff9e\036\uff9e" +
    "\037\uff9e\040\141\041\130\042\142\043\124\044\126\045" +
    "\134\046\133\047\132\050\140\051\uff9e\054\uff9e\060\uff9e" +
    "\001\002\000\004\054\114\001\002\000\072\002\uffa5\003" +
    "\uffa5\004\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\013\uffa5" +
    "\025\uffa5\026\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060" +
    "\uffa5\001\002\000\036\003\116\004\120\006\054\007\070" +
    "\010\055\011\067\025\073\026\072\040\105\041\056\051" +
    "\075\054\062\055\uffb0\060\101\001\002\000\036\013\125" +
    "\040\141\041\130\042\142\043\124\044\126\045\134\046" +
    "\133\047\132\050\140\051\127\055\uffae\056\156\057\uffae" +
    "\001\002\000\004\055\155\001\002\000\042\002\uff8f\003" +
    "\uff8f\004\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\025\uff8f" +
    "\026\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\051\uff8f\054" +
    "\uff8f\060\uff8f\001\002\000\034\003\116\004\120\006\054" +
    "\007\070\010\055\011\067\025\073\026\072\040\105\041" +
    "\056\051\075\054\062\060\101\001\002\000\006\055\uffb1" +
    "\057\uffb1\001\002\000\036\013\125\040\141\041\130\042" +
    "\142\043\124\044\126\045\134\046\133\047\132\050\140" +
    "\051\127\055\uffae\056\156\057\uffae\001\002\000\006\055" +
    "\uffaf\057\uffaf\001\002\000\072\002\uffa6\003\uffa6\004\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\013\125\025\uffa6\026" +
    "\uffa6\036\uffa6\037\uffa6\040\141\041\130\042\142\043\124" +
    "\044\126\045\134\046\133\047\132\050\140\051\127\052" +
    "\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\001\002" +
    "\000\004\057\164\001\002\000\072\002\uffb2\003\uffb2\004" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\013\uffb2\025\uffb2" +
    "\026\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\001" +
    "\002\000\072\002\uffa1\003\uffa1\004\uffa1\006\uffa1\007\uffa1" +
    "\010\uffa1\011\uffa1\013\125\025\uffa1\026\uffa1\036\uffa1\037" +
    "\uffa1\040\141\041\130\042\142\043\124\044\126\045\134" +
    "\046\133\047\uffa1\050\uffa1\051\uffa1\052\uffa1\054\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\001\002\000\032\013\125" +
    "\040\141\041\130\042\142\043\124\044\126\045\134\046" +
    "\133\047\132\050\140\051\127\055\171\001\002\000\032" +
    "\013\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\055\170\001\002" +
    "\000\072\002\uff9f\003\uff9f\004\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\011\uff9f\013\uff9f\025\uff9f\026\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\001\002\000\072\002\uffa9\003" +
    "\uffa9\004\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\013\uffa9" +
    "\025\uffa9\026\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\001\002\000\036\003\116\004\120\006\054\007\070" +
    "\010\055\011\067\025\073\026\072\040\105\041\056\051" +
    "\075\054\062\055\174\060\101\001\002\000\032\013\125" +
    "\040\141\041\130\042\142\043\124\044\126\045\134\046" +
    "\133\047\132\050\140\051\127\055\175\001\002\000\042" +
    "\002\uff91\003\uff91\004\uff91\006\uff91\007\uff91\010\uff91\011" +
    "\uff91\025\uff91\026\uff91\036\uff91\037\uff91\040\uff91\041\uff91" +
    "\051\uff91\054\uff91\060\uff91\001\002\000\042\002\uff92\003" +
    "\uff92\004\uff92\006\uff92\007\uff92\010\uff92\011\uff92\025\uff92" +
    "\026\uff92\036\uff92\037\uff92\040\uff92\041\uff92\051\uff92\054" +
    "\uff92\060\uff92\001\002\000\004\002\uff86\001\002\000\004" +
    "\002\uff80\001\002\000\004\002\001\001\002\000\046\002" +
    "\ufffc\003\ufffc\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\022\ufffc\025\ufffc\026\ufffc\036\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\051\ufffc\053\ufffc\054\ufffc\060\ufffc\001\002\000\006" +
    "\052\uff66\053\uff66\001\002\000\004\054\360\001\002\000" +
    "\006\052\205\053\206\001\002\000\014\003\214\027\215" +
    "\032\220\035\216\053\ufff4\001\002\000\050\002\ufff8\003" +
    "\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\022\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\051\ufff8\053\ufff8\054\ufff8\060\ufff8\001\002\000\012" +
    "\027\215\032\220\035\216\053\ufff4\001\002\000\012\027" +
    "\215\032\220\035\216\053\ufff4\001\002\000\004\053\355" +
    "\001\002\000\050\002\ufff9\003\ufff9\004\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\036\ufff9\037\ufff9\040\ufff9\041\ufff9\051\ufff9\053\ufff9\054" +
    "\ufff9\060\ufff9\001\002\000\012\027\215\032\220\035\216" +
    "\053\ufff4\001\002\000\004\053\uff6e\001\002\000\034\003" +
    "\331\004\120\006\054\007\070\010\055\011\067\025\073" +
    "\026\072\040\105\041\056\051\075\054\062\060\101\001" +
    "\002\000\034\003\267\004\120\006\054\007\070\010\055" +
    "\011\067\025\073\026\072\040\105\041\056\051\075\054" +
    "\265\060\101\001\002\000\004\053\263\001\002\000\006" +
    "\003\221\004\222\001\002\000\010\003\uff61\033\uff61\052" +
    "\uff61\001\002\000\006\003\250\033\247\001\002\000\004" +
    "\033\224\001\002\000\012\003\221\004\231\011\225\034" +
    "\226\001\002\000\006\003\uffd0\052\uffd0\001\002\000\006" +
    "\003\235\054\240\001\002\000\004\052\233\001\002\000" +
    "\006\003\uffcd\052\uffcd\001\002\000\006\003\uffcf\052\uffcf" +
    "\001\002\000\006\003\uffce\052\uffce\001\002\000\014\003" +
    "\214\027\215\032\220\035\216\053\ufff4\001\002\000\012" +
    "\027\uffd3\032\uffd3\035\uffd3\053\uffd3\001\002\000\010\003" +
    "\uff61\052\uff61\055\uff63\001\002\000\004\055\246\001\002" +
    "\000\006\003\uffc9\052\uffc9\001\002\000\004\006\241\001" +
    "\002\000\006\055\243\056\242\001\002\000\004\006\244" +
    "\001\002\000\006\003\uffcb\052\uffcb\001\002\000\004\055" +
    "\245\001\002\000\006\003\uffcc\052\uffcc\001\002\000\006" +
    "\003\uffca\052\uffca\001\002\000\012\003\221\004\231\011" +
    "\225\034\226\001\002\000\012\003\uff62\004\uff62\011\uff62" +
    "\034\uff62\001\002\000\012\003\221\004\231\011\225\034" +
    "\226\001\002\000\004\052\253\001\002\000\014\003\214" +
    "\027\215\032\220\035\216\053\ufff4\001\002\000\012\027" +
    "\uffd1\032\uffd1\035\uffd1\053\uffd1\001\002\000\006\003\221" +
    "\052\257\001\002\000\004\052\261\001\002\000\014\003" +
    "\214\027\215\032\220\035\216\053\ufff4\001\002\000\012" +
    "\027\uffd4\032\uffd4\035\uffd4\053\uffd4\001\002\000\014\003" +
    "\214\027\215\032\220\035\216\053\ufff4\001\002\000\012" +
    "\027\uffd2\032\uffd2\035\uffd2\053\uffd2\001\002\000\062\002" +
    "\uffc0\003\uffc0\004\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\022\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\051\uffc0\053\uffc0\054\uffc0\060\uffc0\001\002\000\030\013" +
    "\125\040\141\041\130\042\142\043\124\044\126\045\134" +
    "\046\133\047\132\050\140\051\127\001\002\000\036\003" +
    "\317\004\120\006\054\007\070\010\055\011\067\025\073" +
    "\026\072\040\105\041\056\051\075\054\062\055\320\060" +
    "\101\001\002\000\034\003\310\013\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\312\001\002\000\034\013\uff6c\040\uff6c" +
    "\041\uff6c\042\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\047" +
    "\uff6c\050\uff6c\051\uff6c\052\uffc6\055\uffc4\001\002\000\004" +
    "\055\304\001\002\000\004\052\272\001\002\000\014\003" +
    "\214\027\215\032\220\035\216\053\ufff4\001\002\000\014" +
    "\027\uffd5\030\275\032\uffd5\035\uffd5\053\uffd5\001\002\000" +
    "\012\027\uffc5\032\uffc5\035\uffc5\053\uffc5\001\002\000\006" +
    "\003\276\052\300\001\002\000\004\052\uff60\001\002\000" +
    "\004\052\302\001\002\000\014\003\214\027\215\032\220" +
    "\035\216\053\ufff4\001\002\000\012\027\uffd7\032\uffd7\035" +
    "\uffd7\053\uffd7\001\002\000\014\003\214\027\215\032\220" +
    "\035\216\053\ufff4\001\002\000\012\027\uffd6\032\uffd6\035" +
    "\uffd6\053\uffd6\001\002\000\004\052\305\001\002\000\014" +
    "\003\214\027\215\032\220\035\216\053\ufff4\001\002\000" +
    "\014\027\uffd5\030\275\032\uffd5\035\uffd5\053\uffd5\001\002" +
    "\000\012\027\uffc3\032\uffc3\035\uffc3\053\uffc3\001\002\000" +
    "\004\052\uff5f\001\002\000\004\052\316\001\002\000\014" +
    "\003\uffbe\027\uffbe\032\uffbe\035\uffbe\053\uffbe\001\002\000" +
    "\014\003\214\027\215\032\220\035\216\053\ufff4\001\002" +
    "\000\014\027\uffd5\030\275\032\uffd5\035\uffd5\053\uffd5\001" +
    "\002\000\012\027\uffc8\032\uffc8\035\uffc8\053\uffc8\001\002" +
    "\000\014\003\uffbd\027\uffbd\032\uffbd\035\uffbd\053\uffbd\001" +
    "\002\000\034\013\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c" +
    "\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052" +
    "\uffc2\055\uff6c\001\002\000\006\003\310\052\312\001\002" +
    "\000\014\003\214\027\215\032\220\035\216\053\ufff4\001" +
    "\002\000\014\027\uffd5\030\275\032\uffd5\035\uffd5\053\uffd5" +
    "\001\002\000\012\027\uffc7\032\uffc7\035\uffc7\053\uffc7\001" +
    "\002\000\004\052\325\001\002\000\014\003\214\027\215" +
    "\032\220\035\216\053\ufff4\001\002\000\014\027\uffd5\030" +
    "\275\032\uffd5\035\uffd5\053\uffd5\001\002\000\012\027\uffc1" +
    "\032\uffc1\035\uffc1\053\uffc1\001\002\000\032\013\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\047\uffa4\050\uffa4\051\uffa4\052\351\001\002\000\032\013" +
    "\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c\045\uff6c" +
    "\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uffdd\001\002\000" +
    "\004\052\333\001\002\000\014\003\214\027\215\032\220" +
    "\035\216\053\ufff4\001\002\000\016\027\uffd5\030\275\031" +
    "\337\032\uffd5\035\uffd5\053\uffd5\001\002\000\012\027\uffd8" +
    "\032\uffd8\035\uffd8\053\uffd8\001\002\000\012\027\uffdc\032" +
    "\uffdc\035\uffdc\053\uffdc\001\002\000\034\003\341\004\120" +
    "\006\054\007\070\010\055\011\067\025\073\026\072\040" +
    "\105\041\056\051\075\054\062\060\101\001\002\000\032" +
    "\013\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\346\001\002" +
    "\000\032\013\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044" +
    "\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uffda" +
    "\001\002\000\004\052\343\001\002\000\014\003\214\027" +
    "\215\032\220\035\216\053\ufff4\001\002\000\016\027\uffd5" +
    "\030\275\031\337\032\uffd5\035\uffd5\053\uffd5\001\002\000" +
    "\012\027\uffd9\032\uffd9\035\uffd9\053\uffd9\001\002\000\014" +
    "\003\214\027\215\032\220\035\216\053\ufff4\001\002\000" +
    "\016\027\uffd5\030\275\031\337\032\uffd5\035\uffd5\053\uffd5" +
    "\001\002\000\012\027\uffdb\032\uffdb\035\uffdb\053\uffdb\001" +
    "\002\000\014\003\214\027\215\032\220\035\216\053\ufff4" +
    "\001\002\000\016\027\uffd5\030\275\031\337\032\uffd5\035" +
    "\uffd5\053\uffd5\001\002\000\012\027\uffde\032\uffde\035\uffde" +
    "\053\uffde\001\002\000\004\053\ufff6\001\002\000\062\002" +
    "\uffbf\003\uffbf\004\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\022\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\051\uffbf\053\uffbf\054\uffbf\060\uffbf\001\002\000\004\053" +
    "\ufff7\001\002\000\004\053\ufff5\001\002\000\006\022\362" +
    "\055\ufff1\001\002\000\004\055\374\001\002\000\006\003" +
    "\363\004\364\001\002\000\006\055\uff65\056\uff65\001\002" +
    "\000\006\055\uffef\056\367\001\002\000\006\055\uffef\056" +
    "\367\001\002\000\004\055\ufff2\001\002\000\004\022\370" +
    "\001\002\000\004\004\371\001\002\000\006\055\uffef\056" +
    "\367\001\002\000\004\055\ufff0\001\002\000\004\055\ufff3" +
    "\001\002\000\004\052\375\001\002\000\014\003\214\027" +
    "\215\032\220\035\216\053\ufff4\001\002\000\050\002\ufffa" +
    "\003\ufffa\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\022" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\051\ufffa\053\ufffa\054\ufffa\060\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\016\002\010\005\006\006\005\007\011\035" +
    "\004\036\013\001\001\000\004\062\203\001\001\000\002" +
    "\001\001\000\006\006\005\007\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\014\001\001\000\002\001\001\000\010\020" +
    "\022\037\021\041\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\022\037\021\041\020\001\001\000" +
    "\002\001\001\000\010\006\005\007\044\043\045\001\001" +
    "\000\006\003\026\051\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\031\051\027\001\001\000\002" +
    "\001\001\000\006\016\042\051\032\001\001\000\006\016" +
    "\034\051\032\001\001\000\002\001\001\000\006\016\040" +
    "\051\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\036\051\032\001\001\000\002\001\001\000\006" +
    "\016\041\051\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\125\047" +
    "\001\001\000\002\001\001\000\006\004\175\020\050\001" +
    "\001\000\006\004\051\020\050\001\001\000\010\003\026" +
    "\051\023\116\052\001\001\000\002\001\001\000\040\013" +
    "\065\054\075\056\073\060\103\061\064\072\057\073\060" +
    "\074\105\075\070\105\102\107\101\111\063\113\077\114" +
    "\062\117\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\102\121\103" +
    "\136\104\134\106\135\001\001\000\002\001\001\000\020" +
    "\013\065\054\075\072\165\073\166\074\105\075\070\105" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\065\054\075\072\164\073" +
    "\060\074\105\075\070\105\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\065\054" +
    "\075\072\152\073\060\074\105\075\070\076\162\105\102" +
    "\001\001\000\002\001\001\000\020\013\065\054\075\072" +
    "\161\073\060\074\105\075\070\105\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\150" +
    "\001\001\000\020\013\065\054\075\072\146\073\060\074" +
    "\105\075\070\105\102\001\001\000\022\013\065\015\116" +
    "\054\075\072\114\073\060\074\105\075\070\105\102\001" +
    "\001\000\014\014\130\102\121\103\136\104\134\106\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\065" +
    "\054\075\072\144\073\060\074\105\075\070\105\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\065\054\075\072\143\073\060\074\105\075\070\105" +
    "\102\001\001\000\020\013\065\054\075\072\142\073\060" +
    "\074\105\075\070\105\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\102\121\103\136\104\134\106\135\001\001\000\012\102" +
    "\121\103\136\104\134\106\135\001\001\000\014\014\145" +
    "\102\121\103\136\104\134\106\135\001\001\000\002\001" +
    "\001\000\012\102\121\103\136\104\134\106\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\065\054" +
    "\075\072\152\073\060\074\105\075\070\076\153\105\102" +
    "\001\001\000\014\077\156\102\121\103\136\104\134\106" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\065\054\075\072\157\073\060\074\105\075\070\105" +
    "\102\001\001\000\002\001\001\000\014\077\160\102\121" +
    "\103\136\104\134\106\135\001\001\000\002\001\001\000" +
    "\012\102\121\103\136\104\134\106\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\102\121\103\136\104" +
    "\134\106\135\001\001\000\012\102\121\103\136\104\134" +
    "\106\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\065\054\075\072\172\073\060" +
    "\074\105\075\070\105\102\001\001\000\012\102\121\103" +
    "\136\104\134\106\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\024\216\026\207\031\212\034" +
    "\206\052\210\115\211\001\001\000\002\001\001\000\012" +
    "\024\356\026\207\031\212\034\206\001\001\000\012\024" +
    "\355\026\207\031\212\034\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\353\026\207\031\212\034" +
    "\206\001\001\000\002\001\001\000\020\013\065\054\075" +
    "\072\263\073\327\074\105\075\070\105\102\001\001\000" +
    "\020\013\065\054\075\072\263\073\265\074\105\075\070" +
    "\105\102\001\001\000\002\001\001\000\004\067\222\001" +
    "\001\000\002\001\001\000\004\065\250\001\001\000\002" +
    "\001\001\000\010\032\226\033\231\067\227\001\001\000" +
    "\002\001\001\000\006\066\235\067\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\024\216\026\207\031\212\034\206\052\210" +
    "\115\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\254" +
    "\033\231\067\227\001\001\000\002\001\001\000\010\032" +
    "\251\033\231\067\227\001\001\000\002\001\001\000\016" +
    "\024\216\026\207\031\212\034\206\052\210\115\253\001" +
    "\001\000\002\001\001\000\004\067\255\001\001\000\002" +
    "\001\001\000\016\024\216\026\207\031\212\034\206\052" +
    "\210\115\257\001\001\000\002\001\001\000\016\024\216" +
    "\026\207\031\212\034\206\052\210\115\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\102\121\103\136" +
    "\104\134\106\135\001\001\000\020\013\065\054\075\072" +
    "\165\073\166\074\105\075\070\105\102\001\001\000\006" +
    "\047\312\071\310\001\001\000\006\122\270\123\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\024\216" +
    "\026\207\031\212\034\206\052\210\115\272\001\001\000" +
    "\004\027\273\001\001\000\002\001\001\000\004\070\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\024" +
    "\216\026\207\031\212\034\206\052\210\115\300\001\001" +
    "\000\002\001\001\000\016\024\216\026\207\031\212\034" +
    "\206\052\210\115\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\024\216\026\207\031\212\034\206\052" +
    "\210\115\305\001\001\000\004\027\306\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\024\216\026\207\031\212\034\206\052\210" +
    "\115\313\001\001\000\004\027\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\124\323\001\001\000\006" +
    "\047\320\071\310\001\001\000\016\024\216\026\207\031" +
    "\212\034\206\052\210\115\321\001\001\000\004\027\322" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\024" +
    "\216\026\207\031\212\034\206\052\210\115\325\001\001" +
    "\000\004\027\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\120\331\001\001\000\002\001\001\000\016" +
    "\024\216\026\207\031\212\034\206\052\210\115\333\001" +
    "\001\000\006\027\334\030\335\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\065\054\075\072\263\073" +
    "\337\074\105\075\070\105\102\001\001\000\002\001\001" +
    "\000\004\121\341\001\001\000\002\001\001\000\016\024" +
    "\216\026\207\031\212\034\206\052\210\115\343\001\001" +
    "\000\006\027\334\030\344\001\001\000\002\001\001\000" +
    "\016\024\216\026\207\031\212\034\206\052\210\115\346" +
    "\001\001\000\006\027\334\030\347\001\001\000\002\001" +
    "\001\000\016\024\216\026\207\031\212\034\206\052\210" +
    "\115\351\001\001\000\006\027\334\030\352\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\360\001\001\000" +
    "\002\001\001\000\004\063\364\001\001\000\002\001\001" +
    "\000\004\012\372\001\001\000\004\012\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\371\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\024\216\026\207\031\212\034\206" +
    "\052\210\115\375\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;

  ArrayList<String> errores;

  public Analizador(java_cup.runtime.Scanner s, boolean type) {
    super(s);
    errores = new ArrayList<String>();
  }
  
  public void addError(String error){
    errores.add(error);
    /*ProyectoCompi.PoyectoCompi.consola.impirmir(error);*/
  }

  public ArrayList<String> retornarLista(){
    return errores;
  }
  public void syntax_error(Symbol s){
    System.out.println("Error en la linea : " + s.value);
   
  }
/*public void unrecovered_syntax_error(Symbol s){
    System.out.println("Error crítico en la linea : " + s.value);
  }*/
protected int error_sync_size(){
    return 1;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {



  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Funcional 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo Funcional."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= OOP 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo OOP."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= error 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Error por final de archivo. (Simbolos extra?)");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Funcional ::= DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcional",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DefFunciones ::= DefFuncion DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DefFunciones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DefFuncion ::= def identificador parenAbierto DefParametrosFact parenCerrado dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DefFuncion ::= def errDecFuncion dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DefFuncion ::= def errDecFuncion puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BloqueNuevo ::= If BloqueNuevo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BloqueNuevo ::= ForFact BloqueNuevo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BloqueNuevo ::= While BloqueNuevo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BloqueNuevo ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DefParametrosFact ::= var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DefParametrosFact ::= var errParametro1 DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DefParametrosFact ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DefParametros ::= coma var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DefParametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Variable ::= var DefVariablesFact 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Variable ::= var errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Variable ::= errDecVariables identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Variables ::= Variables Variable 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Variables ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DefVariablesFact ::= identificador DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariablesFact",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefVariablesFact ::= errDecVariables DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariablesFact",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefVariables ::= coma identificador DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DefVariables ::= errDecVariables identificador DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DefVariables ::= errDecVariables DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DefVariables ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Funcion ::= identificador parenAbierto Parametros parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcion",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Parametros ::= Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Parametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Parametro ::= coma Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Parametro ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // If ::= iif ExpresionB dosPuntos BloquePuntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 parser.addError("Hay un error en la expresion del If" + 
" (revisar dos puntos). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$0",78, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // If ::= iif error NT$0 dosPuntos BloquePuntoComa Elif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Elif ::= elif ExpresionB dosPuntos BloquePuntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 parser.addError("Hay un error en la expresion del If" + 
" (revisar dos puntos). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$1",79, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Elif ::= elif error NT$1 dosPuntos BloquePuntoComa Elif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Elif ::= Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Else ::= eelse dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Else ::= eelse errElse dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Else ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ForFact ::= ffor identificador in For dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ForFact",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ForFact ::= ffor errFor in For dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ForFact",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ForFact ::= ffor identificador in For errFor dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ForFact",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ForFact ::= ffor identificador errIn For dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ForFact",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // For ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // For ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // For ::= Range 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // For ::= errFor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Range ::= range parenAbierto INT coma INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Range ::= range parenAbierto INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Range ::= range errRange parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Range ::= range errFor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // While ::= wwhile ExpresionB DosPuntos BloquePuntoComa Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // While ::= wwhile parenAbierto parenCerrado DosPuntos BloquePuntoComa Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 parser.addError("Falta abrir parentesis" + 
" (revisar dos puntos). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$2",80, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // While ::= wwhile error NT$2 dosPuntos BloquePuntoComa Else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$3 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 parser.addError("Falta cerrar parentesis" + 
". Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$3",81, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // While ::= wwhile error NT$3 parenCerrado dosPuntos BloquePuntoComa Else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 parser.addError("Hay un error en la expresion del While" + 
". Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$4",82, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // While ::= wwhile parenAbierto error NT$4 dosPuntos BloquePuntoComa Else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BloquePuntoComa ::= BloqueNuevo puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",75, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BloquePuntoComa ::= errPuntoYComa puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",75, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DosPuntos ::= dosPuntos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DosPuntos ::= errDosPuntos dosPuntos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Bloques ::= Bloque Bloques 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloques",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Bloques ::= Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloques",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Bloque ::= ForFact Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Bloque ::= While Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Bloque ::= If Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Bloque ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Literal ::= INT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Literal ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Literal ::= CHAR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Literal ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Lista ::= cuadradoAbierto ElementosLista cuadradoCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Lista",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ElementosLista ::= Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MasElementosLista ::= coma Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MasElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expresion ::= Literal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expresion ::= Lista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expresion ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expresion ::= Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expresion ::= parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expresion ::= errExpresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expresion ::= Expresion OpBinario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expresion ::= OpUnario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expresion ::= identificador punto Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expresion ::= ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExpresionB ::= ffalse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpresionB ::= ttrue 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpresionB ::= opNot Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpresionB ::= Expresion OpBinarioB Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExpresionB ::= parenAbierto ExpresionB parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Asignacion ::= identificador opAsignaciones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Asignacion ::= errAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expresiones ::= Expresiones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExpresionesB ::= ExpresionesB ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExpresionesB ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Asignaciones ::= Asignaciones Asignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Asignaciones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FuncionesPredefinidas ::= FuncionesPredefinidas FuncionPredefinida 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",72, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FuncionesPredefinidas ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",72, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FuncionPredefinida ::= Input 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",71, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FuncionPredefinida ::= Print 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",71, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Input ::= iinput parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",73, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Input ::= iinput parenAbierto parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",73, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Input ::= errInput 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",73, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Print ::= pprint parenAbierto ElementosLista parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",74, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Print ::= errPrint 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",74, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CodigoPrincipal ::= Variables CualquierCosas 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CodigoPrincipal",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CualquierCosas ::= CualquierCosas CualquierCosa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosas",76, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CualquierCosas ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosas",76, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CualquierCosa ::= FuncionPredefinida 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosa",77, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CualquierCosa ::= Asignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosa",77, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CualquierCosa ::= Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosa",77, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VariablesOOP ::= Variables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariablesOOP",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FuncionesOOP ::= DefFunciones puntoComa CodigoPrincipal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesOOP",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$5 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 errores.add("Falto el ; de la clase principal en la línea: " + cleft); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$5",83, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FuncionesOOP ::= DefFunciones NT$5 CodigoPrincipal 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesOOP",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OOP ::= HeaderOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OOP",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // BloqueOOP ::= VariablesOOP FuncionesOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueOOP",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // HeaderOOP ::= clas identificador dosPuntos BloqueOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // HeaderOOP ::= clas errHeaderOOP BloqueOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OpAritmeticos ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OpAritmeticos ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OpAritmeticos ::= opMultiplicacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OpAritmeticos ::= opDivision 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OpAritmeticos ::= opDivisionE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OpAritmeticos ::= opModulo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OpAritmeticos ::= opPotencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OpUnario ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OpUnario ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OpBinario ::= OpAritmeticos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinario",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OpBinarioB ::= opComparadores 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OpBinarioB ::= OpLogicos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OpLogicos ::= opAnd 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OpLogicos ::= opOr 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OpLogicos ::= opNot 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // errHeaderOOP ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en el header del fuente de tipo OOP. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errHeaderOOP",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // errDecVariables ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error al declarar variables. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecVariables",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // errPuntoYComa ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Falto cerrar un bloque con ';'. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPuntoYComa",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // errClase ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la clase. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errClase",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // errExpresion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // errExpresionB ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Debe ser booleana. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresionB",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // errAsignacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la asignación. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errAsignacion",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // errIf ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la definicion del if. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errIf",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // errInput ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en input(). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errInput",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // errPrint ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en print() Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPrint",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // errDecFuncion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecFuncion",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // errParametro1 ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de los parametros de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errParametro1",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // errBloque ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error Bloque. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errBloque",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // errRange ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en el range. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errRange",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // errIn ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error, falta 'in'. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errIn",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // errFor ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en el for. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errFor",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // errElse ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error, faltan dos puntos en else. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errElse",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // errDosPuntos ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error, faltan los dos puntos. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDosPuntos",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
