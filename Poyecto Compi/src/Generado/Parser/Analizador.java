
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Generado.Parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\005\003\000\002\007\004" +
    "\000\002\007\003\000\002\006\012\000\002\006\007\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\024\004\000\002\024" +
    "\002\000\002\011\005\000\002\011\005\000\002\011\002" +
    "\000\002\012\006\000\002\012\002\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\020\004\000\002" +
    "\020\002\000\002\017\004\000\002\017\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\004\000\002\016\002" +
    "\000\002\047\003\000\002\047\003\000\002\013\006\000" +
    "\002\015\004\000\002\015\002\000\002\014\005\000\002" +
    "\014\002\000\002\025\005\000\002\026\010\000\002\026" +
    "\010\000\002\026\006\000\002\026\005\000\002\030\010" +
    "\000\002\030\010\000\002\030\006\000\002\030\005\000" +
    "\002\030\003\000\002\027\006\000\002\027\005\000\002" +
    "\027\005\000\002\027\002\000\002\031\010\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\033\010" +
    "\000\002\033\006\000\002\034\007\000\002\110\004\000" +
    "\002\110\004\000\002\023\004\000\002\023\003\000\002" +
    "\022\004\000\002\022\004\000\002\022\004\000\002\022" +
    "\002\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\070\005\000\002\071\004\000" +
    "\002\071\002\000\002\072\005\000\002\072\002\000\002" +
    "\065\003\000\002\065\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\005\000\002\065\003\000\002\065\005" +
    "\000\002\065\004\000\002\065\005\000\002\065\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\004\000\002" +
    "\066\005\000\002\066\005\000\002\102\005\000\002\102" +
    "\003\000\002\073\004\000\002\073\002\000\002\074\004" +
    "\000\002\074\002\000\002\103\004\000\002\103\002\000" +
    "\002\105\004\000\002\105\002\000\002\104\003\000\002" +
    "\104\003\000\002\106\006\000\002\106\005\000\002\106" +
    "\003\000\002\107\006\000\002\107\003\000\002\004\004" +
    "\000\002\111\004\000\002\111\002\000\002\112\003\000" +
    "\002\112\003\000\002\112\003\000\002\037\003\000\002" +
    "\043\005\000\002\113\002\000\002\043\005\000\002\035" +
    "\003\000\002\041\004\000\002\036\006\000\002\036\005" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
    "\075\003\000\002\100\003\000\002\100\003\000\002\077" +
    "\003\000\002\101\003\000\002\101\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\050\003\000" +
    "\002\051\003\000\002\052\003\000\002\053\003\000\002" +
    "\054\003\000\002\057\003\000\002\056\003\000\002\055" +
    "\003\000\002\060\003\000\002\061\003\000\002\062\003" +
    "\000\002\063\003\000\002\064\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\010\003\011\023\014\024\004\001\002\000" +
    "\006\003\206\004\207\001\002\000\004\002\uffff\001\002" +
    "\000\050\002\ufffb\003\046\004\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\022\ufffb\024\004\025\ufffb\026\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\051\ufffb\053\ufffb\054\ufffb\060" +
    "\ufffb\001\002\000\010\003\046\024\004\053\203\001\002" +
    "\000\004\002\000\001\002\000\012\002\ufffe\003\uff6d\024" +
    "\uff6d\053\uff6d\001\002\000\004\002\202\001\002\000\004" +
    "\002\ufffd\001\002\000\006\003\017\004\020\001\002\000" +
    "\004\002\uff8a\001\002\000\010\003\uffe8\022\uffe8\024\uffe8" +
    "\001\002\000\010\003\uff77\022\uff77\024\uff77\001\002\000" +
    "\004\052\021\001\002\000\010\003\uffe8\022\uffe8\024\uffe8" +
    "\001\002\000\004\002\uff88\001\002\000\006\003\046\024" +
    "\004\001\002\000\010\003\026\022\027\024\uff8e\001\002" +
    "\000\004\004\045\001\002\000\050\002\uff76\003\uff76\004" +
    "\uff76\006\uff76\007\uff76\010\uff76\011\uff76\022\uff76\024\uff76" +
    "\025\uff76\026\uff76\036\uff76\037\uff76\040\uff76\041\uff76\051" +
    "\uff76\054\uff76\056\uff76\060\uff76\001\002\000\006\003\026" +
    "\004\032\001\002\000\046\002\uffe9\003\uffe9\004\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\022\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\051\uffe9\054" +
    "\uffe9\060\uffe9\001\002\000\050\002\uffeb\003\026\004\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\022\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\051\uffeb" +
    "\054\uffeb\056\035\060\uffeb\001\002\000\050\002\uffe2\003" +
    "\026\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\022\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\051\uffe2\054\uffe2\056\035\060\uffe2\001\002\000\046" +
    "\002\uffec\003\uffec\004\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\022\uffec\024\uffec\025\uffec\026\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\051\uffec\054\uffec\060\uffec\001\002\000" +
    "\050\002\uffe2\003\026\004\041\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\051\uffe2\054\uffe2\056\035\060\uffe2" +
    "\001\002\000\004\004\037\001\002\000\046\002\uffe7\003" +
    "\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\022\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\051\uffe7\054\uffe7\060\uffe7\001\002\000\050\002\uffe2" +
    "\003\026\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\022" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\051\uffe2\054\uffe2\056\035\060\uffe2\001\002\000" +
    "\046\002\uffe5\003\uffe5\004\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\051\uffe5\054\uffe5\060\uffe5\001\002" +
    "\000\050\002\uffe2\003\026\004\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\051\uffe2\054\uffe2\056\035\060" +
    "\uffe2\001\002\000\046\002\uffe3\003\uffe3\004\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\022\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\051\uffe3\054\uffe3" +
    "\060\uffe3\001\002\000\046\002\uffe4\003\uffe4\004\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\022\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\051\uffe4\054" +
    "\uffe4\060\uffe4\001\002\000\046\002\uffe6\003\uffe6\004\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\022\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\051\uffe6" +
    "\054\uffe6\060\uffe6\001\002\000\046\002\uffea\003\uffea\004" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\022\uffea\024\uffea" +
    "\025\uffea\026\uffea\036\uffea\037\uffea\040\uffea\041\uffea\051" +
    "\uffea\054\uffea\060\uffea\001\002\000\010\003\uff6d\024\uff6d" +
    "\053\uff6d\001\002\000\046\002\uff8c\003\uff8c\004\uff8c\006" +
    "\uff8c\007\uff8c\010\uff8c\011\uff8c\022\uff8c\025\uff8c\026\uff8c" +
    "\036\uff8c\037\uff8c\040\uff8c\041\uff8c\051\uff8c\053\052\054" +
    "\uff8c\060\uff8c\001\002\000\004\002\uff89\001\002\000\044" +
    "\002\uffe8\003\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\022\uffe8\025\uffe8\026\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\051\uffe8\054\uffe8\060\uffe8\001\002\000\044\002" +
    "\uffe8\003\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\022\uffe8\025\uffe8\026\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\051\uffe8\054\uffe8\060\uffe8\001\002\000\004\002\uff8d" +
    "\001\002\000\044\002\uff92\003\026\004\uff92\006\uff92\007" +
    "\uff92\010\uff92\011\uff92\022\027\025\uff92\026\uff92\036\uff92" +
    "\037\uff92\040\uff92\041\uff92\051\uff92\054\uff92\060\uff92\001" +
    "\002\000\042\002\uff94\003\101\004\112\006\056\007\072" +
    "\010\057\011\070\025\076\026\075\036\111\037\061\040" +
    "\107\041\060\051\077\054\063\060\103\001\002\000\072" +
    "\002\uffbd\003\uffbd\004\uffbd\006\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\013\uffbd\025\uffbd\026\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\001\002\000\072\002\uffbb\003\uffbb\004" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\013\uffbb\025\uffbb" +
    "\026\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\001" +
    "\002\000\034\003\uff7e\004\uff7e\006\uff7e\007\uff7e\010\uff7e" +
    "\011\uff7e\025\uff7e\026\uff7e\040\uff7e\041\uff7e\051\uff7e\054" +
    "\uff7e\060\uff7e\001\002\000\004\054\174\001\002\000\062" +
    "\002\uff8f\003\uff8f\004\uff8f\006\uff8f\007\uff8f\010\uff8f\011" +
    "\uff8f\013\127\025\uff8f\026\uff8f\036\uff8f\037\uff8f\040\142" +
    "\041\132\042\143\043\126\044\130\045\136\046\135\047" +
    "\134\050\141\051\131\054\uff8f\060\uff8f\001\002\000\034" +
    "\003\120\004\122\006\056\007\072\010\057\011\070\025" +
    "\076\026\075\040\107\041\060\051\077\054\063\060\103" +
    "\001\002\000\072\002\uffab\003\uffab\004\uffab\006\uffab\007" +
    "\uffab\010\uffab\011\uffab\013\uffab\025\uffab\026\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\054\uffab" +
    "\055\uffab\056\uffab\057\uffab\060\uffab\001\002\000\042\002" +
    "\uff9a\003\uff9a\004\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a" +
    "\025\uff9a\026\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\051" +
    "\uff9a\054\uff9a\060\uff9a\001\002\000\042\002\uff91\003\uff91" +
    "\004\uff91\006\uff91\007\uff91\010\uff91\011\uff91\025\uff91\026" +
    "\uff91\036\uff91\037\uff91\040\uff91\041\uff91\051\uff91\054\uff91" +
    "\060\uff91\001\002\000\042\002\uff95\003\uff95\004\uff95\006" +
    "\uff95\007\uff95\010\uff95\011\uff95\025\uff95\026\uff95\036\uff95" +
    "\037\uff95\040\uff95\041\uff95\051\uff95\054\uff95\060\uff95\001" +
    "\002\000\072\002\uffba\003\uffba\004\uffba\006\uffba\007\uffba" +
    "\010\uffba\011\uffba\013\uffba\025\uffba\026\uffba\036\uffba\037" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\uffba\001\002\000\072\002\uffb1" +
    "\003\uffb1\004\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\013" +
    "\uffb1\025\uffb1\026\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\001\002\000\072\002\uffbc\003\uffbc\004\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\013\uffbc\025\uffbc\026\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\001\002\000" +
    "\072\002\uffb3\003\uffb3\004\uffb3\006\uffb3\007\uffb3\010\uffb3" +
    "\011\uffb3\013\uffb3\025\uffb3\026\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\054\uffb3\055\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\001\002\000\042\002\uffa4\003\uffa4" +
    "\004\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\025\uffa4\026" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\051\uffa4\054\uffa4" +
    "\060\uffa4\001\002\000\072\002\uffa9\003\uffa9\004\uffa9\006" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\013\uffa9\025\uffa9\026\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\001\002\000" +
    "\072\002\uffaa\003\uffaa\004\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\013\uffaa\025\uffaa\026\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\052\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\001\002\000\034\003\120\004\122" +
    "\006\056\007\072\010\057\011\070\025\076\026\075\040" +
    "\107\041\060\051\077\054\063\060\103\001\002\000\072" +
    "\002\uffaf\003\uffaf\004\uffaf\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\013\uffaf\025\uffaf\026\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\001\002\000\062\002\uff73\003\uff73\004" +
    "\uff73\006\uff73\007\uff73\010\uff73\011\uff73\013\uff73\025\uff73" +
    "\026\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043" +
    "\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73\051\uff73" +
    "\054\uff73\060\uff73\001\002\000\042\002\uff9b\003\uff9b\004" +
    "\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\025\uff9b\026\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\051\uff9b\054\uff9b\060" +
    "\uff9b\001\002\000\036\003\120\004\122\006\056\007\072" +
    "\010\057\011\070\025\076\026\075\040\107\041\060\051" +
    "\077\054\063\057\uffb7\060\103\001\002\000\042\002\uff90" +
    "\003\uff90\004\uff90\006\uff90\007\uff90\010\uff90\011\uff90\025" +
    "\uff90\026\uff90\036\uff90\037\uff90\040\uff90\041\uff90\051\uff90" +
    "\054\uff90\060\uff90\001\002\000\034\003\120\004\122\006" +
    "\056\007\072\010\057\011\070\025\076\026\075\040\107" +
    "\041\060\051\077\054\063\060\103\001\002\000\042\002" +
    "\uff97\003\uff97\004\uff97\006\uff97\007\uff97\010\uff97\011\uff97" +
    "\025\uff97\026\uff97\036\uff97\037\uff97\040\uff97\041\uff97\051" +
    "\uff97\054\uff97\060\uff97\001\002\000\034\003\uff7f\004\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\011\uff7f\025\uff7f\026\uff7f\040" +
    "\uff7f\041\uff7f\051\uff7f\054\uff7f\060\uff7f\001\002\000\072" +
    "\002\uffb4\003\uffb4\004\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\013\uffb4\025\uffb4\026\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\001\002\000\004\054\154\001\002\000" +
    "\066\002\uffb2\003\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\013\uffb2\014\115\025\uffb2\026\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\054\116\060\uffb2\061" +
    "\114\001\002\000\042\002\uff93\003\uff93\004\uff93\006\uff93" +
    "\007\uff93\010\uff93\011\uff93\025\uff93\026\uff93\036\uff93\037" +
    "\uff93\040\uff93\041\uff93\051\uff93\054\uff93\060\uff93\001\002" +
    "\000\004\004\152\001\002\000\034\003\120\004\122\006" +
    "\056\007\072\010\057\011\070\025\076\026\075\040\107" +
    "\041\060\051\077\054\063\060\103\001\002\000\036\003" +
    "\120\004\122\006\056\007\072\010\057\011\070\025\076" +
    "\026\075\040\107\041\060\051\077\054\063\055\uffdd\060" +
    "\103\001\002\000\034\013\127\040\142\041\132\042\143" +
    "\043\126\044\130\045\136\046\135\047\134\050\141\051" +
    "\131\055\uffdb\056\125\001\002\000\072\002\uff73\003\uff73" +
    "\004\uff73\006\uff73\007\uff73\010\uff73\011\uff73\013\uff73\025" +
    "\uff73\026\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73" +
    "\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73\051" +
    "\uff73\052\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73" +
    "\001\002\000\004\055\123\001\002\000\074\002\uffb2\003" +
    "\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\013\uffb2" +
    "\025\uffb2\026\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\054\116\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\114\001\002\000\072\002\uffdf\003\uffdf\004\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\013\uffdf\025\uffdf\026" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\001\002" +
    "\000\034\003\uff7d\004\uff7d\006\uff7d\007\uff7d\010\uff7d\011" +
    "\uff7d\025\uff7d\026\uff7d\040\uff7d\041\uff7d\051\uff7d\054\uff7d" +
    "\060\uff7d\001\002\000\034\003\120\004\122\006\056\007" +
    "\072\010\057\011\070\025\076\026\075\040\107\041\060" +
    "\051\077\054\063\060\103\001\002\000\034\003\uff83\004" +
    "\uff83\006\uff83\007\uff83\010\uff83\011\uff83\025\uff83\026\uff83" +
    "\040\uff83\041\uff83\051\uff83\054\uff83\060\uff83\001\002\000" +
    "\034\003\uff7c\004\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c" +
    "\025\uff7c\026\uff7c\040\uff7c\041\uff7c\051\uff7c\054\uff7c\060" +
    "\uff7c\001\002\000\034\003\uff82\004\uff82\006\uff82\007\uff82" +
    "\010\uff82\011\uff82\025\uff82\026\uff82\040\uff82\041\uff82\051" +
    "\uff82\054\uff82\060\uff82\001\002\000\034\003\uff78\004\uff78" +
    "\006\uff78\007\uff78\010\uff78\011\uff78\025\uff78\026\uff78\040" +
    "\uff78\041\uff78\051\uff78\054\uff78\060\uff78\001\002\000\034" +
    "\003\uff85\004\uff85\006\uff85\007\uff85\010\uff85\011\uff85\025" +
    "\uff85\026\uff85\040\uff85\041\uff85\051\uff85\054\uff85\060\uff85" +
    "\001\002\000\004\055\uffde\001\002\000\034\003\uff7a\004" +
    "\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\025\uff7a\026\uff7a" +
    "\040\uff7a\041\uff7a\051\uff7a\054\uff7a\060\uff7a\001\002\000" +
    "\034\003\uff80\004\uff80\006\uff80\007\uff80\010\uff80\011\uff80" +
    "\025\uff80\026\uff80\040\uff80\041\uff80\051\uff80\054\uff80\060" +
    "\uff80\001\002\000\034\003\uff81\004\uff81\006\uff81\007\uff81" +
    "\010\uff81\011\uff81\025\uff81\026\uff81\040\uff81\041\uff81\051" +
    "\uff81\054\uff81\060\uff81\001\002\000\034\003\120\004\122" +
    "\006\056\007\072\010\057\011\070\025\076\026\075\040" +
    "\107\041\060\051\077\054\063\060\103\001\002\000\034" +
    "\003\120\004\122\006\056\007\072\010\057\011\070\025" +
    "\076\026\075\040\107\041\060\051\077\054\063\060\103" +
    "\001\002\000\034\003\uff79\004\uff79\006\uff79\007\uff79\010" +
    "\uff79\011\uff79\025\uff79\026\uff79\040\uff79\041\uff79\051\uff79" +
    "\054\uff79\060\uff79\001\002\000\034\003\uff86\004\uff86\006" +
    "\uff86\007\uff86\010\uff86\011\uff86\025\uff86\026\uff86\040\uff86" +
    "\041\uff86\051\uff86\054\uff86\060\uff86\001\002\000\034\003" +
    "\uff84\004\uff84\006\uff84\007\uff84\010\uff84\011\uff84\025\uff84" +
    "\026\uff84\040\uff84\041\uff84\051\uff84\054\uff84\060\uff84\001" +
    "\002\000\034\003\uff7b\004\uff7b\006\uff7b\007\uff7b\010\uff7b" +
    "\011\uff7b\025\uff7b\026\uff7b\040\uff7b\041\uff7b\051\uff7b\054" +
    "\uff7b\060\uff7b\001\002\000\072\002\uffa7\003\uffa7\004\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\011\uffa7\013\127\025\uffa7\026" +
    "\uffa7\036\uffa7\037\uffa7\040\142\041\132\042\143\043\126" +
    "\044\130\045\136\046\135\047\134\050\141\051\131\052" +
    "\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\001\002" +
    "\000\072\002\uffae\003\uffae\004\uffae\006\uffae\007\uffae\010" +
    "\uffae\011\uffae\013\127\025\uffae\026\uffae\036\uffae\037\uffae" +
    "\040\142\041\132\042\143\043\126\044\130\045\136\046" +
    "\135\047\134\050\141\051\131\052\uffae\054\uffae\055\uffae" +
    "\056\uffae\057\uffae\060\uffae\001\002\000\034\013\127\040" +
    "\142\041\132\042\143\043\126\044\130\045\136\046\135" +
    "\047\134\050\141\051\131\055\uffdb\056\125\001\002\000" +
    "\004\055\uffdc\001\002\000\062\002\uffa5\003\uffa5\004\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\011\uffa5\013\127\025\uffa5\026" +
    "\uffa5\036\uffa5\037\uffa5\040\142\041\132\042\143\043\126" +
    "\044\130\045\136\046\135\047\134\050\141\051\uffa5\054" +
    "\uffa5\060\uffa5\001\002\000\004\054\116\001\002\000\072" +
    "\002\uffac\003\uffac\004\uffac\006\uffac\007\uffac\010\uffac\011" +
    "\uffac\013\uffac\025\uffac\026\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\054\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\001\002\000\036\003\120\004\122\006" +
    "\056\007\072\010\057\011\070\025\076\026\075\040\107" +
    "\041\060\051\077\054\063\055\uffb7\060\103\001\002\000" +
    "\036\013\127\040\142\041\132\042\143\043\126\044\130" +
    "\045\136\046\135\047\134\050\141\051\131\055\uffb5\056" +
    "\160\057\uffb5\001\002\000\004\055\157\001\002\000\042" +
    "\002\uff96\003\uff96\004\uff96\006\uff96\007\uff96\010\uff96\011" +
    "\uff96\025\uff96\026\uff96\036\uff96\037\uff96\040\uff96\041\uff96" +
    "\051\uff96\054\uff96\060\uff96\001\002\000\034\003\120\004" +
    "\122\006\056\007\072\010\057\011\070\025\076\026\075" +
    "\040\107\041\060\051\077\054\063\060\103\001\002\000" +
    "\006\055\uffb8\057\uffb8\001\002\000\036\013\127\040\142" +
    "\041\132\042\143\043\126\044\130\045\136\046\135\047" +
    "\134\050\141\051\131\055\uffb5\056\160\057\uffb5\001\002" +
    "\000\006\055\uffb6\057\uffb6\001\002\000\072\002\uffad\003" +
    "\uffad\004\uffad\006\uffad\007\uffad\010\uffad\011\uffad\013\127" +
    "\025\uffad\026\uffad\036\uffad\037\uffad\040\142\041\132\042" +
    "\143\043\126\044\130\045\136\046\135\047\134\050\141" +
    "\051\131\052\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060" +
    "\uffad\001\002\000\004\057\166\001\002\000\072\002\uffb9" +
    "\003\uffb9\004\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\013" +
    "\uffb9\025\uffb9\026\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9" +
    "\060\uffb9\001\002\000\072\002\uffa8\003\uffa8\004\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\013\127\025\uffa8\026\uffa8" +
    "\036\uffa8\037\uffa8\040\142\041\132\042\143\043\126\044" +
    "\130\045\136\046\135\047\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\001\002\000" +
    "\032\013\127\040\142\041\132\042\143\043\126\044\130" +
    "\045\136\046\135\047\134\050\141\051\131\055\173\001" +
    "\002\000\032\013\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\055" +
    "\172\001\002\000\072\002\uffa6\003\uffa6\004\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\013\uffa6\025\uffa6\026\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\054" +
    "\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\001\002\000\072" +
    "\002\uffb0\003\uffb0\004\uffb0\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\013\uffb0\025\uffb0\026\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\054\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\001\002\000\036\003\120\004\122\006" +
    "\056\007\072\010\057\011\070\025\076\026\075\040\107" +
    "\041\060\051\077\054\063\055\176\060\103\001\002\000" +
    "\032\013\127\040\142\041\132\042\143\043\126\044\130" +
    "\045\136\046\135\047\134\050\141\051\131\055\177\001" +
    "\002\000\042\002\uff98\003\uff98\004\uff98\006\uff98\007\uff98" +
    "\010\uff98\011\uff98\025\uff98\026\uff98\036\uff98\037\uff98\040" +
    "\uff98\041\uff98\051\uff98\054\uff98\060\uff98\001\002\000\042" +
    "\002\uff99\003\uff99\004\uff99\006\uff99\007\uff99\010\uff99\011" +
    "\uff99\025\uff99\026\uff99\036\uff99\037\uff99\040\uff99\041\uff99" +
    "\051\uff99\054\uff99\060\uff99\001\002\000\004\002\uff8b\001" +
    "\002\000\004\002\uff87\001\002\000\004\002\001\001\002" +
    "\000\050\002\ufff4\003\ufff4\004\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\022\ufff4\024\ufff4\025\ufff4\026\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\051\ufff4\053\ufff4\054\ufff4\060" +
    "\ufff4\001\002\000\050\002\ufff5\003\ufff5\004\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\022\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\051\ufff5\053\ufff5" +
    "\054\ufff5\060\ufff5\001\002\000\046\002\ufffc\003\ufffc\004" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\022\ufffc\025\ufffc" +
    "\026\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\051\ufffc\053" +
    "\ufffc\054\ufffc\060\ufffc\001\002\000\052\002\uff75\003\uff75" +
    "\004\uff75\006\uff75\007\uff75\010\uff75\011\uff75\022\uff75\024" +
    "\uff75\025\uff75\026\uff75\036\uff75\037\uff75\040\uff75\041\uff75" +
    "\051\uff75\052\uff6d\053\uff75\054\uff75\060\uff75\001\002\000" +
    "\004\054\275\001\002\000\050\002\ufff6\003\ufff6\004\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\022\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\051\ufff6" +
    "\053\ufff6\054\ufff6\060\ufff6\001\002\000\006\052\212\053" +
    "\213\001\002\000\006\027\215\053\ufff2\001\002\000\050" +
    "\002\ufff8\003\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\022\ufff8\024\ufff8\025\ufff8\026\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\051\ufff8\053\ufff8\054\ufff8\060\ufff8\001" +
    "\002\000\004\053\273\001\002\000\034\003\224\004\122" +
    "\006\056\007\072\010\057\011\070\025\076\026\075\040" +
    "\107\041\060\051\077\054\063\060\103\001\002\000\006" +
    "\027\215\053\ufff2\001\002\000\006\027\ufff3\053\ufff3\001" +
    "\002\000\004\053\271\001\002\000\012\027\uffcd\030\234" +
    "\031\233\053\uffcd\001\002\000\030\013\127\040\142\041" +
    "\132\042\143\043\126\044\130\045\136\046\135\047\134" +
    "\050\141\051\131\001\002\000\032\013\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\264\001\002\000\042\013\uff73\027" +
    "\uff75\030\uff75\031\uff75\040\uff73\041\uff73\042\uff73\043\uff73" +
    "\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73\051\uff73\052" +
    "\uff72\053\uff75\001\002\000\004\052\226\001\002\000\006" +
    "\027\215\053\ufff2\001\002\000\004\053\230\001\002\000" +
    "\012\027\uffcd\030\234\031\233\053\uffcd\001\002\000\006" +
    "\027\uffd1\053\uffd1\001\002\000\006\027\uffd8\053\uffd8\001" +
    "\002\000\034\003\224\004\122\006\056\007\072\010\057" +
    "\011\070\025\076\026\075\040\107\041\060\051\077\054" +
    "\063\060\103\001\002\000\006\003\235\052\240\001\002" +
    "\000\006\027\uff75\053\uff75\001\002\000\004\053\244\001" +
    "\002\000\006\027\215\053\ufff2\001\002\000\006\027\215" +
    "\053\ufff2\001\002\000\004\053\242\001\002\000\006\027" +
    "\uffd0\053\uffd0\001\002\000\006\027\uffce\053\uffce\001\002" +
    "\000\006\027\uffcf\053\uffcf\001\002\000\004\053\262\001" +
    "\002\000\012\027\uffcd\030\234\031\233\053\uffcd\001\002" +
    "\000\032\013\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\255" +
    "\001\002\000\004\052\251\001\002\000\006\027\215\053" +
    "\ufff2\001\002\000\004\053\253\001\002\000\012\027\uffcd" +
    "\030\234\031\233\053\uffcd\001\002\000\006\027\uffd4\053" +
    "\uffd4\001\002\000\006\027\215\053\ufff2\001\002\000\004" +
    "\053\257\001\002\000\012\027\uffcd\030\234\031\233\053" +
    "\uffcd\001\002\000\006\027\uffd5\053\uffd5\001\002\000\006" +
    "\027\uffd2\053\uffd2\001\002\000\012\027\uffcd\030\234\031" +
    "\233\053\uffcd\001\002\000\006\027\uffd3\053\uffd3\001\002" +
    "\000\006\027\215\053\ufff2\001\002\000\004\053\266\001" +
    "\002\000\012\027\uffcd\030\234\031\233\053\uffcd\001\002" +
    "\000\006\027\uffd9\053\uffd9\001\002\000\006\027\uffd6\053" +
    "\uffd6\001\002\000\012\027\uffcd\030\234\031\233\053\uffcd" +
    "\001\002\000\006\027\uffd7\053\uffd7\001\002\000\050\002" +
    "\ufff9\003\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\022\ufff9\024\ufff9\025\ufff9\026\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\051\ufff9\053\ufff9\054\ufff9\060\ufff9\001\002" +
    "\000\050\002\ufff7\003\ufff7\004\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\051\ufff7\053\ufff7\054\ufff7\060" +
    "\ufff7\001\002\000\006\022\277\055\uffef\001\002\000\004" +
    "\055\311\001\002\000\006\003\300\004\301\001\002\000" +
    "\006\055\uff6c\056\uff6c\001\002\000\006\055\uffed\056\304" +
    "\001\002\000\006\055\uffed\056\304\001\002\000\004\055" +
    "\ufff0\001\002\000\004\022\305\001\002\000\004\004\306" +
    "\001\002\000\006\055\uffed\056\304\001\002\000\004\055" +
    "\uffee\001\002\000\004\055\ufff1\001\002\000\004\052\312" +
    "\001\002\000\006\027\215\053\ufff2\001\002\000\004\053" +
    "\314\001\002\000\050\002\ufffa\003\ufffa\004\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\022\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\051\ufffa\053\ufffa" +
    "\054\ufffa\060\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\020\002\011\005\007\006\005\007\012\035" +
    "\004\036\014\062\006\001\001\000\006\052\207\062\210" +
    "\001\001\000\002\001\001\000\010\006\005\007\204\062" +
    "\006\001\001\000\006\006\203\062\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\015\001\001\000\002\001\001\000\010" +
    "\020\023\037\022\041\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\023\037\022\041\021\001\001" +
    "\000\002\001\001\000\012\006\005\007\046\043\047\062" +
    "\006\001\001\000\006\003\027\051\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\032\051\030\001" +
    "\001\000\002\001\001\000\006\016\043\051\033\001\001" +
    "\000\006\016\035\051\033\001\001\000\002\001\001\000" +
    "\006\016\041\051\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\037\051\033\001\001\000\002\001" +
    "\001\000\006\016\042\051\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\113\050\001\001\000\002\001\001" +
    "\000\006\004\177\020\053\001\001\000\006\004\052\020" +
    "\053\001\001\000\002\001\001\000\010\003\027\051\024" +
    "\111\054\001\001\000\040\013\070\054\077\056\073\060" +
    "\105\061\066\065\061\066\063\067\107\070\072\100\104" +
    "\102\103\104\065\106\101\107\064\112\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\075\123\076\143\077\136\101\137\001" +
    "\001\000\020\013\070\054\077\065\167\066\170\067\107" +
    "\070\072\100\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\070\054\077\065\166\066\063\067\107\070\072\100" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\070\054\077\065\154\066\063\067" +
    "\107\070\072\071\164\100\104\001\001\000\002\001\001" +
    "\000\020\013\070\054\077\065\163\066\063\067\107\070" +
    "\072\100\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\152\001\001\000\020\013\070" +
    "\054\077\065\150\066\063\067\107\070\072\100\104\001" +
    "\001\000\022\013\070\015\120\054\077\065\116\066\063" +
    "\067\107\070\072\100\104\001\001\000\014\014\132\075" +
    "\123\076\143\077\136\101\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\070\054\077\065\146\066\063" +
    "\067\107\070\072\100\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\070\054\077\065\145" +
    "\066\063\067\107\070\072\100\104\001\001\000\020\013" +
    "\070\054\077\065\144\066\063\067\107\070\072\100\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\075\123\076\143\077\136" +
    "\101\137\001\001\000\012\075\123\076\143\077\136\101" +
    "\137\001\001\000\014\014\147\075\123\076\143\077\136" +
    "\101\137\001\001\000\002\001\001\000\012\075\123\076" +
    "\143\077\136\101\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\070\054\077\065\154\066\063\067" +
    "\107\070\072\071\155\100\104\001\001\000\014\072\160" +
    "\075\123\076\143\077\136\101\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\070\054\077\065\161" +
    "\066\063\067\107\070\072\100\104\001\001\000\002\001" +
    "\001\000\014\072\162\075\123\076\143\077\136\101\137" +
    "\001\001\000\002\001\001\000\012\075\123\076\143\077" +
    "\136\101\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\075\123\076\143\077\136\101\137\001\001\000" +
    "\012\075\123\076\143\077\136\101\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\070\054\077\065\174\066\063\067\107\070\072\100\104" +
    "\001\001\000\012\075\123\076\143\077\136\101\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\273\062\006\001\001\000\002\001" +
    "\001\000\006\024\213\026\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\013\070\052\220\054\077\055" +
    "\217\057\224\065\221\066\222\067\107\070\072\100\104" +
    "\001\001\000\006\024\216\026\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\230\030\267\001\001" +
    "\000\012\075\123\076\143\077\136\101\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\226\026\215\001\001\000\002\001\001\000\006\027" +
    "\230\030\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\013\070\052\245\054\077\055\244\057\247\065" +
    "\221\066\246\067\107\070\072\100\104\001\001\000\006" +
    "\052\236\055\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\242\026\215\001\001\000\006\024\240" +
    "\026\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\230\030\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\251\026\215\001\001\000\002\001\001" +
    "\000\006\027\230\030\253\001\001\000\002\001\001\000" +
    "\006\024\255\026\215\001\001\000\002\001\001\000\006" +
    "\027\230\030\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\230\030\262\001\001\000\002\001\001" +
    "\000\006\024\264\026\215\001\001\000\002\001\001\000" +
    "\006\027\230\030\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\230\030\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\275" +
    "\001\001\000\002\001\001\000\004\063\301\001\001\000" +
    "\002\001\001\000\004\012\307\001\001\000\004\012\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\312\026\215\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;

  ArrayList<String> errores;

  public Analizador(java_cup.runtime.Scanner s, boolean type) {
    super(s);
    errores = new ArrayList<String>();
  }
  
  public void addError(String error){
    errores.add(error);
    /*ProyectoCompi.PoyectoCompi.consola.impirmir(error);*/
  }

  public ArrayList<String> retornarLista(){
    return errores;
  }
  public void syntax_error(Symbol s){
    System.out.println("Error en la linea : " + s.value);
   
  }
/*public void unrecovered_syntax_error(Symbol s){
    System.out.println("Error crítico en la linea : " + s.value);
  }*/
protected int error_sync_size(){
    return 1;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {



  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Funcional 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo Funcional."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= OOP 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo OOP."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= error 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Error por final de archivo.");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Funcional ::= DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcional",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DefFunciones ::= DefFuncion DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DefFunciones ::= DefFuncion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DefFuncion ::= def identificador parenAbierto DefParametrosFact parenCerrado dosPuntos BloqueNuevo puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DefFuncion ::= def errDecFuncion dosPuntos BloqueNuevo puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DefFuncion ::= def errDecFuncion puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DefFuncion ::= def errPuntoYComa DefFuncion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DefFuncion ::= def errPuntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DefFuncion ::= errDecFuncion DefFuncion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DefFuncion ::= errDecFuncion puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BloqueNuevo ::= If BloqueNuevo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BloqueNuevo ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DefParametrosFact ::= var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DefParametrosFact ::= var errParametro1 DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DefParametrosFact ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DefParametros ::= coma var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DefParametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Variable ::= var DefVariablesFact 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Variable ::= var errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Variable ::= errDecVariables identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Variables ::= Variables Variable 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Variables ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefVariablesFact ::= identificador DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariablesFact",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DefVariablesFact ::= errDecVariables DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariablesFact",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DefVariables ::= coma identificador DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DefVariables ::= errDecVariables identificador DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DefVariables ::= errDecVariables DefVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DefVariables ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefVariables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DosPuntos ::= dosPuntos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DosPuntos ::= errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Funcion ::= identificador parenAbierto Parametros parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcion",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Parametros ::= Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Parametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Parametro ::= coma Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Parametro ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DecIf ::= DecIf Elif Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DecIf",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // If ::= iif ExpresionB dosPuntos BloqueNuevo puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // If ::= iif errExpresionB dosPuntos BloqueNuevo puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // If ::= iif errIf puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // If ::= iif errPuntoYComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Elif ::= elif ExpresionB dosPuntos BloqueNuevo puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Elif ::= elif errExpresionB dosPuntos BloqueNuevo puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Elif ::= elif errIf puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Elif ::= elif errPuntoYComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Elif ::= Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Else ::= eelse dosPuntos BloqueNuevo puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Else ::= eelse errIf puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Else ::= eelse errPuntoYComa BloqueNuevo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Else ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ForFact ::= ffor identificador in For DosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ForFact",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // For ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // For ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // For ::= Range 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Range ::= range parenAbierto INT coma INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Range ::= range parenAbierto INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // While ::= wwhile ExpresionB DosPuntos BloquePuntoComa Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BloquePuntoComa ::= Bloque puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BloquePuntoComa ::= Bloque errPuntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Bloques ::= Bloque Bloques 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloques",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Bloques ::= Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloques",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Bloque ::= ForFact Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Bloque ::= While Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Bloque ::= If Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Bloque ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Literal ::= INT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Literal ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Literal ::= CHAR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Literal ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Lista ::= cuadradoAbierto ElementosLista cuadradoCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Lista",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ElementosLista ::= Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MasElementosLista ::= coma Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MasElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expresion ::= Literal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expresion ::= Lista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expresion ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expresion ::= Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expresion ::= parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expresion ::= errExpresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expresion ::= Expresion OpBinario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expresion ::= OpUnario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expresion ::= identificador punto Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expresion ::= ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExpresionB ::= ffalse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExpresionB ::= ttrue 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExpresionB ::= opNot Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExpresionB ::= Expresion OpBinarioB Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpresionB ::= parenAbierto ExpresionB parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Asignacion ::= identificador opAsignaciones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Asignacion ::= errAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expresiones ::= Expresiones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpresionesB ::= ExpresionesB ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpresionesB ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Asignaciones ::= Asignaciones Asignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Asignaciones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FuncionesPredefinidas ::= FuncionesPredefinidas FuncionPredefinida 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FuncionesPredefinidas ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FuncionPredefinida ::= Input 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FuncionPredefinida ::= Print 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Input ::= iinput parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Input ::= iinput parenAbierto parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Input ::= errInput 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Print ::= pprint parenAbierto ElementosLista parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Print ::= errPrint 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CodigoPrincipal ::= Variables CualquierCosas 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CodigoPrincipal",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CualquierCosas ::= CualquierCosas CualquierCosa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosas",71, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CualquierCosas ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosas",71, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CualquierCosa ::= FuncionPredefinida 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosa",72, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CualquierCosa ::= Asignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosa",72, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CualquierCosa ::= Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CualquierCosa",72, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VariablesOOP ::= Variables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariablesOOP",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FuncionesOOP ::= DefFunciones puntoComa CodigoPrincipal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesOOP",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$0 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 errores.add("Falto el ; de la clase principal en la línea: " + cleft); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$0",73, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FuncionesOOP ::= DefFunciones NT$0 CodigoPrincipal 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesOOP",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OOP ::= HeaderOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OOP",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BloqueOOP ::= VariablesOOP FuncionesOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueOOP",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // HeaderOOP ::= clas identificador dosPuntos BloqueOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // HeaderOOP ::= clas errHeaderOOP BloqueOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OpAritmeticos ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OpAritmeticos ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OpAritmeticos ::= opMultiplicacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OpAritmeticos ::= opDivision 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OpAritmeticos ::= opDivisionE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OpAritmeticos ::= opModulo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OpAritmeticos ::= opPotencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OpUnario ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OpUnario ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OpBinario ::= OpAritmeticos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinario",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OpBinarioB ::= opComparadores 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OpBinarioB ::= OpLogicos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OpLogicos ::= opAnd 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OpLogicos ::= opOr 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OpLogicos ::= opNot 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // errHeaderOOP ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en el header del fuente de tipo OOP. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errHeaderOOP",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // errDecVariables ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error al declarar variables. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecVariables",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // errPuntoYComa ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Falto cerrar un bloque con ';'. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPuntoYComa",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // errClase ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la clase. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errClase",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // errExpresion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // errExpresionB ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Debe ser booleana. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresionB",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // errAsignacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la asignación. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errAsignacion",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // errIf ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la definicion del if. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errIf",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // errInput ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en input(). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errInput",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // errPrint ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en print() Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPrint",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // errDecFuncion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecFuncion",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // errParametro1 ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de los parametros de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errParametro1",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // errBloque ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error Bloque. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errBloque",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
