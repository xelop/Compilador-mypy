package Generado.Parser;
import java_cup.runtime.*;
import java.util.ArrayList;
parser code
{:
  public boolean syntaxErrors;

  ArrayList<String> errores;

  public Analizador(java_cup.runtime.Scanner s, boolean type) {
    super(s);
    errores = new ArrayList<String>();
  }
  
  public void addError(String error){
    String error2 = errores.get(errores.size()-1);
    error2 = error + error2;
    errores.set(errores.size()-1, error2);
    /*ProyectoCompi.PoyectoCompi.consola.impirmir(error);*/
  }

  public ArrayList<String> retornarLista(){
    return errores;
  }
  public void syntax_error(Symbol s){
    errores.add(". En el token: " + s.value + " En la linea: " + s.left + " En la columna: " + s.right);
    System.out.println("Error en la linea : (" + s.left + ") " + s.value);
   
  }
/*public void unrecovered_syntax_error(Symbol s){
    System.out.println("Error crítico en la linea : " + s.value);
  }*/
protected int error_sync_size(){
    return 1;
}

:}
action code
{:
:}

/*----------------------------------------------------------------------*/
/* Declaracion de terminales */
terminal identificador,palabraReservada, INT,FLOAT,CHAR,STRING,opAritmeticos,opComparadores,opAsignaciones,opDelimitadores,opBits,opLogicos,ERROR,END;

terminal var,clas,def,ffalse,ttrue,iif,eelse,elif;

terminal ffor,in,range,wwhile,pprint,iinput,ttry,eexcept,ffinally,bbreak,ccontinue;

/* operadores */
terminal opSuma, opResta, opMultiplicacion, opDivision, opDivisionE,opModulo,opPotencia;
terminal opAnd, opOr, opNot;

/*Delimitadores*/
terminal dosPuntos,puntoComa,parenAbierto,parenCerrado,coma,cuadradoCerrado,cuadradoAbierto,punto;

/*--------------------------------------------------------------------------*/

/* Declaracion de no terminales */
non terminal Programa, Variable, CodigoPrincipal;
non terminal Funcional,DefFuncion,DefFunciones,DefFunciones2,DefFuncionesFact,DefParametrosFact,DefParametros,Funcion,Parametro,Parametros,DefVariables,DefVariablesFact;
non terminal Variables,VariableRec;
non terminal Bloque,Bloques,BloqueNuevo, DecIf,If, Else, Elif, ForFact, For, Range, While;

/* Zona OOP */
non terminal OOP, HeaderOOP, VariablesOOP, Clase,BloqueOOP, cuerpoOOP,FuncionesOOP,PuntoComaOOP, VariableOOP, FuncionesOOP2;

/* Operadores*/
non terminal PuntoComa,DosPuntos;

/**Errores**/
non terminal errHeaderOOP, errDecVariables, errPuntoYComa, errClase,errExpresion, errIf, errAsignacion,errExpresionB;
non terminal errInput, errPrint,errDecFuncion,errParametro1,errParametro,errBloque,errIn,errRange,errFor,errElse,errDosPuntos;
non terminal errTry, errExcept, errFinally,errInt,errParen;

/* Común para todos */
non terminal Expresion,ExpresionB,Literal,Lista,ElementosLista,MasElementosLista, Expresiones,ExpresionesB ;
non terminal OpAritmeticos, OpLogicos, OpBinario, OpUnario,OpBinarioB;
non terminal Asignacion,Asignaciones;
non terminal FuncionPredefinida,FuncionesPredefinidas, Input, Print,BloquePuntoComa;
non terminal CualquierCosas,CualquierCosa;
non terminal TryExceptFinally, Try , Except , Finally,IntFuncion;

/*------------------------------Precendencias--------------------------------------*/


precedence left opNot,opOr,opAnd;
precedence left opAsignaciones;
precedence left opComparadores;
precedence left opSuma, opResta;
precedence left opMultiplicacion, opDivisionE, opModulo, opDivision;
precedence left opPotencia;
precedence left parenAbierto, parenCerrado;
precedence left eelse,elif,iif,wwhile,ffor;
precedence left dosPuntos,puntoComa,def;
precedence left pprint, iinput;



/*--------------------- Configuraciones --------------------------------------- */

/* inicio de gramatica */
start with Programa ;


/*----------------- Producciones ----------------------------------------------------- */
Programa::= Funcional {: ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo Funcional."); :}
| OOP                 {: ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo OOP."); :}
| error               {: ProyectoCompi.PoyectoCompi.consola.impirmir("Error por final de archivo. (Simbolos extra?)");:}
;

Funcional ::= DefFunciones CodigoPrincipal;




DefFunciones ::= DefFuncion DefFunciones | ;
DefFuncion ::= def identificador parenAbierto DefParametrosFact dosPuntos CualquierCosas puntoComa 
| def identificador parenAbierto DefParametrosFact dosPuntos CualquierCosas errPuntoYComa
| def errDecFuncion dosPuntos CualquierCosas puntoComa
| def errDecFuncion puntoComa  /* si no ponen los dos puntos no lee todo el bloque siguiente */
| def errPuntoYComa DefFuncion
| def errPuntoYComa /* usado para EOF por falta de punto y coma */
| errDecFuncion DefFuncion
| errDecFuncion puntoComa
;



DefParametrosFact ::= var identificador DefParametros | var errParametro1 DefParametros| identificador errParametro1 DefParametros | parenCerrado; 
DefParametros::= coma var identificador  DefParametros | parenCerrado | errParametro1 ; 


/*-----------------------------------------------------------------------------------------*/

Variable::= var DefVariablesFact | var errDecVariables | errDecVariables identificador;
Variables ::= Variables Variable| ;

DefVariablesFact ::= identificador DefVariables | errDecVariables DefVariables; 
DefVariables::= coma identificador  DefVariables 
|  errDecVariables identificador DefVariables | errDecVariables DefVariables |; 


/*---------------------------------------------------------------------------------------*/
Funcion::= identificador parenAbierto Parametros
| identificador errParen parenCerrado
;

Parametros ::= Expresion Parametro | parenCerrado |errParen;
Parametro ::= coma Expresion Parametro | parenCerrado | errParametro parenCerrado ;

If ::= iif ExpresionB dosPuntos BloquePuntoComa Elif
| iif error:e {: parser.addError("Hay un error en la expresion del If" + 
" (revisar dos puntos). Línea: "  + eleft+ ". Columna: " + eright); :}
 dosPuntos BloquePuntoComa Elif
;

Elif ::= elif ExpresionB dosPuntos BloquePuntoComa Elif 
| elif error:e {: parser.addError("Hay un error en la expresion del If" + 
" (revisar dos puntos). Línea: "  + eleft+ ". Columna: " + eright); :}
dosPuntos BloquePuntoComa Elif
| Else; 

Else::= eelse dosPuntos BloquePuntoComa
| eelse errElse dosPuntos BloquePuntoComa
|
;

ForFact ::= ffor identificador in For dosPuntos BloquePuntoComa
| ffor errFor in For dosPuntos BloquePuntoComa
| ffor identificador in For errFor dosPuntos BloquePuntoComa
| ffor identificador errIn For dosPuntos BloquePuntoComa ;

For ::= STRING | identificador | Range | errFor ;
Range ::= range parenAbierto INT coma INT parenCerrado | range parenAbierto INT parenCerrado | range errRange parenCerrado| range parenAbierto INT errRange | range parenAbierto INT coma INT errRange| range errFor;

While ::= wwhile ExpresionB dosPuntos BloquePuntoComa Else
| wwhile parenAbierto parenCerrado dosPuntos BloquePuntoComa Else
| wwhile error:e dosPuntos {: parser.addError("Hay un error en la expresion del While" + 
". Línea: "  + eleft+ ". Columna: " + eright); :}  BloquePuntoComa Else
| wwhile ExpresionB error:e dosPuntos {: parser.addError("Hay un error en la expresion del While" + 
". Línea: "  + eleft+ ". Columna: " + eright); :}  BloquePuntoComa Else    
; 

BloquePuntoComa ::= CualquierCosas puntoComa | errPuntoYComa puntoComa ;

BloqueNuevo ::= If BloqueNuevo | ForFact BloqueNuevo | While BloqueNuevo 
| Try BloqueNuevo |  errBloque puntoComa ; 

Bloques::= Bloque Bloques | Bloque;
Bloque ::= ForFact Bloque | While Bloque | If Bloque | Try Bloque;


Try::= ttry dosPuntos BloquePuntoComa 
| ttry errTry  BloquePuntoComa 
;


Except::= eexcept identificador dosPuntos BloquePuntoComa Finally
;

Finally::= ffinally dosPuntos BloquePuntoComa
| ffinally errFinally dosPuntos BloquePuntoComa
|
;


Literal ::= INT|FLOAT|CHAR|STRING;
Lista::= cuadradoAbierto ElementosLista cuadradoCerrado;
ElementosLista::= Expresion MasElementosLista| ;
MasElementosLista::= coma Expresion MasElementosLista | ;
Expresion ::= Literal|Lista|identificador
        | parenAbierto Expresion parenCerrado
        | errExpresion /*solo un error general para expresiones */
        | parenAbierto errParen
        | errParen parenCerrado;
Expresion ::= Expresion OpBinario Expresion;

Expresion ::= OpUnario Expresion;
Expresion ::= identificador punto Funcion;
Expresion ::= ExpresionB;
Expresion ::= FuncionPredefinida;

ExpresionB ::= ffalse | ttrue| Funcion |opNot Expresion| Expresion OpBinarioB Expresion | parenAbierto ExpresionB parenCerrado ;

Expresion ::= identificador opAsignaciones Expresion;


Expresiones ::= Expresiones Expresion | ;
ExpresionesB ::= ExpresionesB ExpresionB | ;
Asignaciones ::= Asignaciones Asignacion | ;
FuncionesPredefinidas::= FuncionesPredefinidas FuncionPredefinida | ;

FuncionPredefinida::= Input | Print | IntFuncion ;
IntFuncion ::= var parenAbierto FuncionPredefinida parenCerrado | var parenAbierto Funcion parenCerrado|var parenAbierto STRING parenCerrado | errInput;
Input ::= iinput parenAbierto Expresion parenCerrado | iinput parenAbierto parenCerrado| iinput errInput | errInput;
Print ::= pprint parenAbierto ElementosLista parenCerrado | errPrint;

CodigoPrincipal::= Variables CualquierCosas;
CualquierCosas::= CualquierCosas CualquierCosa | ;
CualquierCosa::= Expresion |If | ForFact | While | Try |  errBloque puntoComa | bbreak|ccontinue  ; /* hace falta while for if try ... y listo*/
/*----------------------------------------------------------------------------------------*/
/*VariableOOP  ::= var identificador | var errDecVariables | errDecVariables identificador; 
VariablesOOP ::= VariablesOOP VariableOOP | VariableOOP;*/

VariablesOOP ::= Variable Variables;
/*PuntoComaOOP ::= puntoComa CodigoPrincipal | errPuntoYComa CodigoPrincipal;*/

FuncionesOOP ::= DefFunciones2 puntoComa CodigoPrincipal 
| DefFunciones2:c {: errores.add("Falto el ; de la clase principal en la línea: " + cleft); :} CodigoPrincipal 
| puntoComa:c {: errores.add("debe venir al menos un método al definir la clase, en la línea:  " + cleft); :} CodigoPrincipal;

DefFunciones2 ::= DefFuncion DefFunciones2 | DefFuncion ;

FuncionesOOP2 ::= DefFunciones puntoComa CodigoPrincipal 
| DefFunciones:c {: errores.add("Falto el ; de la clase principal en la línea: " + cleft); :} CodigoPrincipal; 

OOP ::= HeaderOOP;
/*Clase ::= BloqueOOP;*/
BloqueOOP::= VariablesOOP FuncionesOOP

| DefFuncion:c {: errores.add("debe venir al menos una variable al definir la clase, en la línea:  " + cleft); :} FuncionesOOP2
| puntoComa:c {: errores.add("debe venir al menos una variable y un método al definir la clase, en la línea:  " + cleft); :} CodigoPrincipal;

HeaderOOP ::= clas identificador dosPuntos BloqueOOP| clas errHeaderOOP BloqueOOP;


OpAritmeticos ::= opSuma | opResta | opMultiplicacion | opDivisionE | opDivision | opModulo | opPotencia ;

OpUnario ::= opSuma | opResta;
OpBinario ::= OpAritmeticos;
OpBinarioB ::= opComparadores | OpLogicos;

OpLogicos ::= opAnd | opOr | opNot;

/*-----------------------------------------------------------------------------------------*/


/* --- Errores personalizados --- */
errHeaderOOP::= error:e       {: parser.addError("Hay un error en el header del fuente de tipo OOP. Línea: "  + eleft+ ". Columna: " + eright); :};
errDecVariables::= error:e    {: parser.addError("Hay un error al declarar variables. Línea: "  + eleft+ ". Columna: " + eright ); :};
errPuntoYComa::= error:e      {: parser.addError("Falto cerrar un bloque con ';'. Línea: "  + eleft+ ". Columna: " + eright); :};
errClase::= error:e           {: parser.addError("Hay un error en la clase. Línea: "  + eleft+ ". Columna: " + eright); :};
errExpresion::= error:e       {: parser.addError("Hay un error en la expresión. Línea: "  + eleft+ ". Columna: " + eright ); :};
errExpresionB::= error:e      {: parser.addError("Hay un error en la expresión. Debe ser booleana. Línea: "  + eleft+ ". Columna: " + eright); :};

errIf::= error:e              {: parser.addError("Hay un error en la definicion del if. Línea: "  + eleft+ ". Columna: " + eright); :};
errInput::= error:e           {: parser.addError("Hay un error en input(). Línea: "  + eleft+ ". Columna: " + eright); :};
errPrint::= error:e           {: parser.addError("Hay un error en print() Línea: "  + eleft+ ". Columna: " + eright); :};
errDecFuncion::= error:e      {: parser.addError("Hay un error en la declaracion de la funcion. Linea: "+eleft+ ". Columna: " + eright); :};
errParametro1::= error:e      {: parser.addError("Hay un error en la declaracion de los parametros de la funcion. Linea: "+eleft+ ". Columna: " + eright); :};
errParametro::= error:e      {: parser.addError("Hay un error,falta la coma. Linea: "+eleft+ ". Columna: " + eright); :};
errBloque::= error:e          {: parser.addError("Hay un error Bloque. Linea: "+eleft+ ". Columna: " + eright); :};
errRange::= error:e           {: parser.addError("Hay un error en el range. Linea: "+eleft+ ". Columna: " + eright); :};
errIn::= error:e              {: parser.addError("Hay un error, falta 'in'. Linea: "+eleft+ ". Columna: " + eright); :};
errFor::= error:e             {: parser.addError("Hay un error en el for. Linea: "+eleft+ ". Columna: " + eright); :};
errElse::= error:e            {: parser.addError("Hay un error, faltan dos puntos en else. Línea: "  + eleft+ ". Columna: " + eright); :};
errDosPuntos ::= error:e      {: parser.addError("Hay un error, faltan los dos puntos. Línea: "  + eleft+ ". Columna: " + eright); :};

errTry ::= error:e                      {: parser.addError("Hay un error, en el try. Faltan dos puntos. Línea: "  + eleft+ ". Columna: " + eright); :};
errExcept ::= error:e                   {: parser.addError("Hay un error, except. Línea: "  + eleft+ ". Columna: " + eright); :};
errFinally ::= error:e                  {: parser.addError("Hay un error, finally. Faltan dos puntos. Línea: "  + eleft+ ". Columna: " + eright); :};
errInt ::= error:e                  {: parser.addError("Hay un error, en la funcion Int. Línea: "  + eleft+ ". Columna: " + eright); :};
errParen ::= error:e                  {: parser.addError("Error parentesis. Línea: "  + eleft+ ". Columna: " + eright); :};