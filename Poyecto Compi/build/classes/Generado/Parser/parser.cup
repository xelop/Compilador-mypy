package Generado.Parser;
import java_cup.runtime.*;
import java.util.ArrayList;
parser code
{:
  public boolean syntaxErrors;

  ArrayList<String> errores;

  public Analizador(java_cup.runtime.Scanner s, boolean type) {
    super(s);
    errores = new ArrayList<String>();
  }
  
  public void addError(String error){
    errores.add(error);
    /*ProyectoCompi.PoyectoCompi.consola.impirmir(error);*/
  }

  public ArrayList<String> retornarLista(){
    return errores;
  }
  public void syntax_error(Symbol s){
    System.out.println("Error en la linea : " + s.value);
   
  }
/*public void unrecovered_syntax_error(Symbol s){
    System.out.println("Error crítico en la linea : " + s.value);
  }*/
protected int error_sync_size(){
return 1;
}

:}
action code
{:
:}

/*----------------------------------------------------------------------*/
/* Declaracion de terminales */
terminal identificador,palabraReservada, INT,FLOAT,CHAR,STRING,opAritmeticos,opComparadores,opAsignaciones,opDelimitadores,opBits,opLogicos,ERROR,END;

terminal var,clas,def,ffalse,ttrue,iif,eelse,elif;

/*Delimitadores*/
terminal dosPuntos,puntoComa,parenAbierto,parenCerrado,coma,cuadradoCerrado,cuadradoAbierto;

/*--------------------------------------------------------------------------*/

/* Declaracion de no terminales */
non terminal Programa, Variable, CodigoPrincipal;
non terminal Funcional,DefFuncion,DefFunciones,DefFuncionesFact,DefParametrosFact,DefParametros,Funcion,Parametro,Parametros;
non terminal Variables,VariableRec;
non terminal Bloque, If, Else, Elif, Finif;

/* Zona OOP */
non terminal OOP, HeaderOOP, VariablesOOP, Clase,BloqueOOP, cuerpoOOP;

/* Operadores*/
non terminal PuntoComa,DosPuntos;

/**Errores**/
non terminal errHeaderOOP, errDecVariables, errPuntoYComa, errClase,errExpresion, errIf;

/* Común para todos */
non terminal Expresion,Literal,Lista,ElementosLista,MasElementosLista;

/*--------------------- Configuraciones -------------- */
precedence left opDelimitadores,var;

/* inicio de gramatica */
start with Programa;


/*----------------- Producciones ---------------------- */
Programa::= Funcional {: ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo Funcional."); :}
| OOP                 {: ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo OOP."); :}
| If                 {: ProyectoCompi.PoyectoCompi.consola.impirmir("if reconocido"); :}
| 
; 


Funcional ::= DefFuncionesFact;

DefFuncionesFact ::= DefFuncion DefFunciones;
DefFunciones ::= DefFuncion DefFunciones | ;
DefFuncion ::= def identificador parenAbierto DefParametrosFact parenCerrado dosPuntos;

/* mae creo que hay que hacer una diferencia entre función y declaración función. La diferencia es el def pero es que una funcion es una expresion y así la podemos usar en otro lado*/

DefParametrosFact ::= Variable DefParametros | ; 
DefParametros::= coma Variable  DefParametros | ; 

CodigoPrincipal::=  identificador;
/*-----------------------------------------------------------------------------------------*/

Variable::= var identificador | errDecVariables; 
Variables ::= Variables Variable| ;

PuntoComa ::= puntoComa| errPuntoYComa;
DosPuntos ::= dosPuntos | errDecVariables;
/*---------------------------------------------------------------------------------------*/
Funcion::= identificador parenAbierto Parametros parenCerrado;
Parametros ::= Literal Parametro | ; 
Parametro ::= coma Literal Parametro | ;

If ::= iif Expresion DosPuntos Elif Else PuntoComa | errIf; 
Finif ::= PuntoComa;
Else::= eelse Bloque | ;
Elif ::= elif Expresion dosPuntos Bloque Elif | ;

Bloque ::=  ;

Literal ::= INT|FLOAT|CHAR|STRING;
Lista::= cuadradoAbierto ElementosLista cuadradoCerrado;
ElementosLista::= Expresion MasElementosLista| ;
MasElementosLista::= coma Expresion MasElementosLista | ;
Expresion ::= Literal|Lista|identificador|Funcion
        | parenAbierto Expresion parenCerrado |
        | ffalse | ttrue | errExpresion; /*solo un error general para expresiones */

/*----------------------------------------------------------------------------------------*/

VariablesOOP ::= Variables PuntoComa;

OOP ::= Clase Variables;
Clase ::= BloqueOOP;
BloqueOOP::= HeaderOOP;

HeaderOOP ::= clas identificador dosPuntos VariablesOOP| clas errHeaderOOP VariablesOOP;




/*-----------------------------------------------------------------------------------------*/


/* --- Errores personalizados --- */
errHeaderOOP::= error:e       {: parser.addError("Hay un error en el header del fuente de tipo OOP. Línea: "  + eleft+ ". Columna: " + eright); :};
errDecVariables::= error:e    {: parser.addError("Hay un error al declarar variables. Línea: "  + eleft+ ". Columna: " + eright); :};
errPuntoYComa::= error:e      {: parser.addError("Falto cerrar un bloque con ';'. Línea: "  + eleft+ ". Columna: " + eright); :};
errClase::= error:e           {: parser.addError("Hay un error en la clase. Línea: "  + eleft+ ". Columna: " + eright); :};
errExpresion::= error:e       {: parser.addError("Hay un error en la expresión. Línea: "  + eleft+ ". Columna: " + eright); :};
errIf::= error:e              {: parser.addError("Hay un error en el if. Línea: "  + eleft+ ". Columna: " + eright); :};