package Generado.Parser;
import java_cup.runtime.*;
import java.util.ArrayList;
parser code
{:
  public boolean syntaxErrors;

  ArrayList<String> errores;

  public Analizador(java_cup.runtime.Scanner s, boolean type) {
    super(s);
    errores = new ArrayList<String>();
  }
  
  public void addError(String error){
    errores.add(error);
    /*ProyectoCompi.PoyectoCompi.consola.impirmir(error);*/
  }

  public ArrayList<String> retornarLista(){
    return errores;
  }
  public void syntax_error(Symbol s){
    System.out.println("Error en la linea : " + s.value);
   
  }
/*public void unrecovered_syntax_error(Symbol s){
    System.out.println("Error crítico en la linea : " + s.value);
  }*/
protected int error_sync_size(){
    return 1;
}

:}
action code
{:
:}

/*----------------------------------------------------------------------*/
/* Declaracion de terminales */
terminal identificador,palabraReservada, INT,FLOAT,CHAR,STRING,opAritmeticos,opComparadores,opAsignaciones,opDelimitadores,opBits,opLogicos,ERROR,END;

terminal var,clas,def,ffalse,ttrue,iif,eelse,elif;

terminal ffor,in,range,wwhile,pprint,iinput;

/* operadores */
terminal opSuma, opResta, opMultiplicacion, opDivision, opDivisionE,opModulo,opPotencia;
terminal opAnd, opOr, opNot;

/*Delimitadores*/
terminal dosPuntos,puntoComa,parenAbierto,parenCerrado,coma,cuadradoCerrado,cuadradoAbierto,punto;

/*--------------------------------------------------------------------------*/

/* Declaracion de no terminales */
non terminal Programa, Variable, CodigoPrincipal;
non terminal Funcional,DefFuncion,DefFunciones,DefFuncionesFact,DefParametrosFact,DefParametros,Funcion,Parametro,Parametros,DefVariables,DefVariablesFact;
non terminal Variables,VariableRec;
non terminal Bloque,Bloques,BloqueNuevo, DecIf,If, Else, Elif, ForFact, For, Range, While;

/* Zona OOP */
non terminal OOP, HeaderOOP, VariablesOOP, Clase,BloqueOOP, cuerpoOOP,FuncionesOOP,PuntoComaOOP, VariableOOP;

/* Operadores*/
non terminal PuntoComa,DosPuntos;

/**Errores**/
non terminal errHeaderOOP, errDecVariables, errPuntoYComa, errClase,errExpresion, errIf, errAsignacion,errExpresionB;
non terminal errInput, errPrint,errDecFuncion,errParametro1,errBloque,errIn,errRange,errFor,errElse,errDosPuntos;

/* Común para todos */
non terminal Expresion,ExpresionB,Literal,Lista,ElementosLista,MasElementosLista, Expresiones,ExpresionesB ;
non terminal OpAritmeticos, OpLogicos, OpBinario, OpUnario,OpBinarioB;
non terminal Asignacion,Asignaciones;
non terminal FuncionPredefinida,FuncionesPredefinidas, Input, Print,BloquePuntoComa;
non terminal CualquierCosas,CualquierCosa;

/*------------------------------Precendencias--------------------------------------*/


precedence left opNot,opOr,opAnd;
precedence left opAsignaciones;
precedence left opComparadores;
precedence left opSuma, opResta;
precedence left opMultiplicacion, opDivision, opModulo, opDivisionE;
precedence left opPotencia;
precedence left parenAbierto, parenCerrado;
precedence left eelse,elif,iif,wwhile,ffor;
precedence left def,dosPuntos,puntoComa;
precedence left pprint, iinput;



/*--------------------- Configuraciones --------------------------------------- */

/* inicio de gramatica */
start with Programa ;


/*----------------- Producciones ----------------------------------------------------- */
Programa::= Funcional {: ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo Funcional."); :}
| OOP                 {: ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo OOP."); :}
| error             {: ProyectoCompi.PoyectoCompi.consola.impirmir("Error por final de archivo. (Simbolos extra?)");:}
;


Funcional ::= DefFunciones;

DefFunciones ::= DefFuncion DefFunciones | ;
DefFuncion ::= def identificador parenAbierto DefParametrosFact parenCerrado dosPuntos BloquePuntoComa 
| def errDecFuncion dosPuntos BloquePuntoComa
| def errDecFuncion puntoComa  /* si no ponen los dos puntos no lee todo el bloque siguiente */

;

BloqueNuevo ::= If BloqueNuevo | ForFact BloqueNuevo | While BloqueNuevo |  ; 


DefParametrosFact ::= var identificador DefParametros | var errParametro1 DefParametros| ; 
DefParametros::= coma var identificador  DefParametros |  ; 


/*-----------------------------------------------------------------------------------------*/

Variable::= var DefVariablesFact | var errDecVariables | errDecVariables identificador;
Variables ::= Variables Variable| ;

DefVariablesFact ::= identificador DefVariables | errDecVariables DefVariables; 
DefVariables::= coma identificador  DefVariables 
|  errDecVariables identificador DefVariables | errDecVariables DefVariables |; 


/*---------------------------------------------------------------------------------------*/
Funcion::= identificador parenAbierto Parametros parenCerrado;
Parametros ::= Expresion Parametro | ;
Parametro ::= coma Expresion Parametro | ;

If ::= iif ExpresionB dosPuntos BloquePuntoComa Elif
| iif error:e {: parser.addError("Hay un error en la expresion del If" + 
" (revisar dos puntos). Línea: "  + eleft+ ". Columna: " + eright); :}
 dosPuntos BloquePuntoComa Elif
;
Elif ::= elif ExpresionB dosPuntos BloquePuntoComa Elif 
| elif error:e {: parser.addError("Hay un error en la expresion del If" + 
" (revisar dos puntos). Línea: "  + eleft+ ". Columna: " + eright); :}
dosPuntos BloquePuntoComa Elif
| Else; 

Else::= eelse dosPuntos BloquePuntoComa
| eelse errElse dosPuntos BloquePuntoComa
|
;

ForFact ::= ffor identificador in For dosPuntos BloquePuntoComa
| ffor errFor in For dosPuntos BloquePuntoComa
| ffor identificador in For errFor dosPuntos BloquePuntoComa
| ffor identificador errIn For dosPuntos BloquePuntoComa ;

For ::= STRING | identificador | Range | errFor ;
Range ::= range parenAbierto INT coma INT parenCerrado | range parenAbierto INT parenCerrado | range errRange parenCerrado | range errFor;

While ::= wwhile ExpresionB DosPuntos BloquePuntoComa Else
| wwhile parenAbierto parenCerrado DosPuntos BloquePuntoComa Else
| wwhile error:e {: parser.addError("Falta abrir parentesis" + 
" (revisar dos puntos). Línea: "  + eleft+ ". Columna: " + eright); :} dosPuntos BloquePuntoComa Else
| wwhile error:e {: parser.addError("Falta cerrar parentesis" + 
". Línea: "  + eleft+ ". Columna: " + eright); :} parenCerrado dosPuntos BloquePuntoComa Else
| wwhile parenAbierto error:e {: parser.addError("Hay un error en la expresion del While" + 
". Línea: "  + eleft+ ". Columna: " + eright); :} dosPuntos BloquePuntoComa Else  
; 

BloquePuntoComa ::= BloqueNuevo puntoComa | errPuntoYComa puntoComa ;
DosPuntos ::= dosPuntos | errDosPuntos dosPuntos;

Bloques::= Bloque Bloques | Bloque;
Bloque ::= ForFact Bloque | While Bloque | If Bloque | ;

/* Palabras reservadas que faltan:
and break continue except finally for in input is not or print return try while list boolean */

Literal ::= INT|FLOAT|CHAR|STRING;
Lista::= cuadradoAbierto ElementosLista cuadradoCerrado;
ElementosLista::= Expresion MasElementosLista| ;
MasElementosLista::= coma Expresion MasElementosLista | ;
Expresion ::= Literal|Lista|identificador|Funcion
        | parenAbierto Expresion parenCerrado
        | errExpresion; /*solo un error general para expresiones */

Expresion ::= Expresion OpBinario Expresion;

Expresion ::= OpUnario Expresion;
Expresion ::= identificador punto Funcion;
Expresion ::= ExpresionB;
/*Expresion ::= FuncionPredefinida; esta causa mucho reduce reduce */

ExpresionB ::= ffalse | ttrue| opNot Expresion| Expresion OpBinarioB Expresion | parenAbierto ExpresionB parenCerrado ;

Asignacion ::= identificador opAsignaciones Expresion | errAsignacion;


Expresiones ::= Expresiones Expresion | ;
ExpresionesB ::= ExpresionesB ExpresionB | ;
Asignaciones ::= Asignaciones Asignacion | ;
FuncionesPredefinidas::= FuncionesPredefinidas FuncionPredefinida | ;

FuncionPredefinida::= Input | Print;
Input ::= iinput parenAbierto Expresion parenCerrado | iinput parenAbierto parenCerrado| errInput;
Print ::= pprint parenAbierto ElementosLista parenCerrado | errPrint;

CodigoPrincipal::=  Variables CualquierCosas;
CualquierCosas::= CualquierCosas CualquierCosa | ;
CualquierCosa::= FuncionPredefinida| Asignacion | Expresion; /* hace falta while for if try ... y listo*/
/*----------------------------------------------------------------------------------------*/
/*VariableOOP  ::= var identificador | var errDecVariables | errDecVariables identificador; 
VariablesOOP ::= VariablesOOP VariableOOP | VariableOOP;*/

VariablesOOP ::= Variables;
/*PuntoComaOOP ::= puntoComa CodigoPrincipal | errPuntoYComa CodigoPrincipal;*/

FuncionesOOP ::= DefFunciones puntoComa CodigoPrincipal 
| DefFunciones:c {: errores.add("Falto el ; de la clase principal en la línea: " + cleft); :} CodigoPrincipal 
; 



OOP ::= HeaderOOP;
/*Clase ::= BloqueOOP;*/
BloqueOOP::= VariablesOOP FuncionesOOP;

HeaderOOP ::= clas identificador dosPuntos BloqueOOP| clas errHeaderOOP BloqueOOP;


OpAritmeticos ::= opSuma | opResta | opMultiplicacion | opDivision | opDivisionE | opModulo | opPotencia ;

OpUnario ::= opSuma | opResta;
OpBinario ::= OpAritmeticos;
OpBinarioB ::= opComparadores | OpLogicos;

OpLogicos ::= opAnd | opOr | opNot;

/*-----------------------------------------------------------------------------------------*/


/* --- Errores personalizados --- */
errHeaderOOP::= error:e       {: parser.addError("Hay un error en el header del fuente de tipo OOP. Línea: "  + eleft+ ". Columna: " + eright); :};
errDecVariables::= error:e    {: parser.addError("Hay un error al declarar variables. Línea: "  + eleft+ ". Columna: " + eright); :};
errPuntoYComa::= error:e      {: parser.addError("Falto cerrar un bloque con ';'. Línea: "  + eleft+ ". Columna: " + eright); :};
errClase::= error:e           {: parser.addError("Hay un error en la clase. Línea: "  + eleft+ ". Columna: " + eright); :};
errExpresion::= error:e       {: parser.addError("Hay un error en la expresión. Línea: "  + eleft+ ". Columna: " + eright); :};
errExpresionB::= error:e      {: parser.addError("Hay un error en la expresión. Debe ser booleana. Línea: "  + eleft+ ". Columna: " + eright); :};
errAsignacion::= error:e      {: parser.addError("Hay un error en la asignación. Línea: "  + eleft+ ". Columna: " + eright); :};
errIf::= error:e              {: parser.addError("Hay un error en la definicion del if. Línea: "  + eleft+ ". Columna: " + eright); :};
errInput::= error:e           {: parser.addError("Hay un error en input(). Línea: "  + eleft+ ". Columna: " + eright); :};
errPrint::= error:e           {: parser.addError("Hay un error en print() Línea: "  + eleft+ ". Columna: " + eright); :};
errDecFuncion::= error:e      {: parser.addError("Hay un error en la declaracion de la funcion. Linea: "+eleft+ ". Columna: " + eright); :};
errParametro1::= error:e      {: parser.addError("Hay un error en la declaracion de los parametros de la funcion. Linea: "+eleft+ ". Columna: " + eright); :};
errBloque::= error:e          {: parser.addError("Hay un error Bloque. Linea: "+eleft+ ". Columna: " + eright); :};
errRange::= error:e           {: parser.addError("Hay un error en el range. Linea: "+eleft+ ". Columna: " + eright); :};
errIn::= error:e              {: parser.addError("Hay un error, falta 'in'. Linea: "+eleft+ ". Columna: " + eright); :};
errFor::= error:e             {: parser.addError("Hay un error en el for. Linea: "+eleft+ ". Columna: " + eright); :};
errElse::= error:e            {: parser.addError("Hay un error, faltan dos puntos en else. Línea: "  + eleft+ ". Columna: " + eright); :};
errDosPuntos ::= error:e      {: parser.addError("Hay un error, faltan los dos puntos. Línea: "  + eleft+ ". Columna: " + eright); :};