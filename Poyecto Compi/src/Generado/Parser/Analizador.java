
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Generado.Parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\005\003\000\002\007\004" +
    "\000\002\007\003\000\002\006\012\000\002\006\007\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\022\004\000\002\022" +
    "\002\000\002\011\005\000\002\011\005\000\002\011\002" +
    "\000\002\012\006\000\002\012\002\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\016\004\000\002" +
    "\016\002\000\002\045\003\000\002\045\003\000\002\013" +
    "\006\000\002\015\004\000\002\015\002\000\002\014\005" +
    "\000\002\014\002\000\002\023\005\000\002\024\010\000" +
    "\002\024\010\000\002\024\006\000\002\024\005\000\002" +
    "\026\010\000\002\026\010\000\002\026\006\000\002\026" +
    "\005\000\002\026\003\000\002\025\006\000\002\025\005" +
    "\000\002\025\005\000\002\025\002\000\002\027\010\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\031\010\000\002\031\006\000\002\032\007\000\002\106" +
    "\004\000\002\106\004\000\002\021\004\000\002\021\003" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\002\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\066\005\000\002\067" +
    "\004\000\002\067\002\000\002\070\005\000\002\070\002" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\005\000\002\063\003\000\002" +
    "\063\005\000\002\063\004\000\002\063\005\000\002\063" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\004" +
    "\000\002\064\005\000\002\064\005\000\002\100\005\000" +
    "\002\100\003\000\002\071\004\000\002\071\002\000\002" +
    "\072\004\000\002\072\002\000\002\101\004\000\002\101" +
    "\002\000\002\103\004\000\002\103\002\000\002\102\003" +
    "\000\002\102\003\000\002\104\006\000\002\104\003\000" +
    "\002\105\006\000\002\105\003\000\002\004\003\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\035" +
    "\004\000\002\035\003\000\002\041\005\000\002\107\002" +
    "\000\002\041\005\000\002\033\003\000\002\037\004\000" +
    "\002\034\006\000\002\034\005\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\076\003\000\002\076\003" +
    "\000\002\075\003\000\002\077\003\000\002\077\003\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\046\003\000\002\047\003\000\002\050\003\000\002\051" +
    "\003\000\002\052\003\000\002\055\003\000\002\054\003" +
    "\000\002\053\003\000\002\056\003\000\002\057\003\000" +
    "\002\060\003\000\002\061\003\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\010\003\011\023\015\024\004\001\002\000" +
    "\006\003\060\004\061\001\002\000\004\002\uffff\001\002" +
    "\000\014\002\ufffb\003\054\022\ufffb\024\004\053\ufffb\001" +
    "\002\000\010\003\054\024\004\053\055\001\002\000\004" +
    "\002\000\001\002\000\012\002\ufffe\003\uff76\024\uff76\053" +
    "\uff76\001\002\000\004\002\053\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\uff92\001\002\000\006\003\017\004" +
    "\020\001\002\000\006\003\024\022\025\001\002\000\006" +
    "\003\uff80\022\uff80\001\002\000\004\052\021\001\002\000" +
    "\006\003\024\022\025\001\002\000\004\004\051\001\002" +
    "\000\004\002\uff90\001\002\000\014\002\uff7f\003\uff7f\004" +
    "\uff7f\022\uff7f\024\uff7f\001\002\000\006\003\024\004\050" +
    "\001\002\000\010\003\uff96\022\uff96\024\uff96\001\002\000" +
    "\010\003\030\022\025\024\004\001\002\000\012\003\uff76" +
    "\004\uff7f\024\uff76\053\uff76\001\002\000\012\002\uff94\003" +
    "\uff94\022\uff94\053\035\001\002\000\010\003\uff97\022\uff97" +
    "\024\uff97\001\002\000\004\002\uff91\001\002\000\010\002" +
    "\uffe8\003\uffe8\022\uffe8\001\002\000\010\002\uffe8\003\uffe8" +
    "\022\uffe8\001\002\000\004\002\uff95\001\002\000\010\002" +
    "\uff9b\003\024\022\041\001\002\000\004\004\045\001\002" +
    "\000\006\003\024\004\044\001\002\000\010\002\uffe9\003" +
    "\uffe9\022\uffe9\001\002\000\010\002\uffeb\003\uffeb\022\uffeb" +
    "\001\002\000\010\002\uffec\003\uffec\022\uffec\001\002\000" +
    "\010\002\uffea\003\uffea\022\uffea\001\002\000\004\002\uff93" +
    "\001\002\000\010\003\uff99\022\uff99\024\uff99\001\002\000" +
    "\010\003\uff9a\022\uff9a\024\uff9a\001\002\000\010\003\uff98" +
    "\022\uff98\024\uff98\001\002\000\004\002\uff8f\001\002\000" +
    "\004\002\001\001\002\000\010\003\uff76\024\uff76\053\uff76" +
    "\001\002\000\014\002\ufff4\003\ufff4\022\ufff4\024\ufff4\053" +
    "\ufff4\001\002\000\014\002\ufff5\003\ufff5\022\ufff5\024\ufff5" +
    "\053\ufff5\001\002\000\012\002\ufffc\003\ufffc\022\ufffc\053" +
    "\ufffc\001\002\000\016\002\uff7e\003\uff7e\022\uff7e\024\uff7e" +
    "\052\uff76\053\uff7e\001\002\000\004\054\242\001\002\000" +
    "\014\002\ufff6\003\ufff6\022\ufff6\024\ufff6\053\ufff6\001\002" +
    "\000\006\052\064\053\065\001\002\000\006\027\067\053" +
    "\ufff2\001\002\000\014\002\ufff8\003\ufff8\022\ufff8\024\ufff8" +
    "\053\ufff8\001\002\000\004\053\240\001\002\000\034\003" +
    "\112\004\120\006\073\007\104\010\074\011\103\025\106" +
    "\026\107\040\116\041\076\051\110\054\100\060\114\001" +
    "\002\000\006\027\067\053\ufff2\001\002\000\006\027\ufff3" +
    "\053\ufff3\001\002\000\004\053\236\001\002\000\036\013" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\001\002\000\036\013\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\047\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\001\002\000\012\027\uffd3" +
    "\030\174\031\173\053\uffd3\001\002\000\034\003\uff87\004" +
    "\uff87\006\uff87\007\uff87\010\uff87\011\uff87\025\uff87\026\uff87" +
    "\040\uff87\041\uff87\051\uff87\054\uff87\060\uff87\001\002\000" +
    "\026\013\133\040\144\041\136\042\146\043\132\044\134" +
    "\045\142\047\140\050\145\051\135\001\002\000\034\003" +
    "\125\004\120\006\073\007\104\010\074\011\103\025\106" +
    "\026\107\040\116\041\076\051\110\054\100\060\114\001" +
    "\002\000\030\013\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\047\uffb1\050\uffb1\051\uffb1\052\225\001" +
    "\002\000\036\013\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\055" +
    "\uffb7\056\uffb7\057\uffb7\001\002\000\036\013\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\055\uffc0\056\uffc0\057\uffc0\001\002" +
    "\000\036\013\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\001\002\000\036\013\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\055\uffb9\056\uffb9\057\uffb9\001\002\000" +
    "\036\013\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\055\uffb0\056" +
    "\uffb0\057\uffb0\001\002\000\036\013\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\055\uffaf\056\uffaf\057\uffaf\001\002\000\034" +
    "\003\125\004\120\006\073\007\104\010\074\011\103\025" +
    "\106\026\107\040\116\041\076\051\110\054\100\060\114" +
    "\001\002\000\036\013\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\001\002\000\040\013\uff7c\027" +
    "\uff7e\030\uff7e\031\uff7e\040\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7b\053" +
    "\uff7e\001\002\000\004\052\166\001\002\000\036\003\125" +
    "\004\120\006\073\007\104\010\074\011\103\025\106\026" +
    "\107\040\116\041\076\051\110\054\100\057\uffbd\060\114" +
    "\001\002\000\034\003\125\004\120\006\073\007\104\010" +
    "\074\011\103\025\106\026\107\040\116\041\076\051\110" +
    "\054\100\060\114\001\002\000\034\003\uff88\004\uff88\006" +
    "\uff88\007\uff88\010\uff88\011\uff88\025\uff88\026\uff88\040\uff88" +
    "\041\uff88\051\uff88\054\uff88\060\uff88\001\002\000\036\013" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\055\uffba\056\uffba\057" +
    "\uffba\001\002\000\042\013\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\054\122\055\uffb8\056\uffb8\057\uffb8\061\121\001\002" +
    "\000\004\004\154\001\002\000\036\003\125\004\120\006" +
    "\073\007\104\010\074\011\103\025\106\026\107\040\116" +
    "\041\076\051\110\054\100\055\uffe3\060\114\001\002\000" +
    "\032\013\133\040\144\041\136\042\146\043\132\044\134" +
    "\045\142\047\140\050\145\051\135\055\uffe1\056\131\001" +
    "\002\000\036\013\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\001\002\000\036\013\uff7c\040\uff7c" +
    "\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\047\uff7c\050" +
    "\uff7c\051\uff7c\052\uff7c\055\uff7c\056\uff7c\057\uff7c\001\002" +
    "\000\004\055\127\001\002\000\036\013\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\055\uffe5\056\uffe5\057\uffe5\001\002\000" +
    "\034\003\uff86\004\uff86\006\uff86\007\uff86\010\uff86\011\uff86" +
    "\025\uff86\026\uff86\040\uff86\041\uff86\051\uff86\054\uff86\060" +
    "\uff86\001\002\000\034\003\125\004\120\006\073\007\104" +
    "\010\074\011\103\025\106\026\107\040\116\041\076\051" +
    "\110\054\100\060\114\001\002\000\034\003\uff8b\004\uff8b" +
    "\006\uff8b\007\uff8b\010\uff8b\011\uff8b\025\uff8b\026\uff8b\040" +
    "\uff8b\041\uff8b\051\uff8b\054\uff8b\060\uff8b\001\002\000\034" +
    "\003\uff85\004\uff85\006\uff85\007\uff85\010\uff85\011\uff85\025" +
    "\uff85\026\uff85\040\uff85\041\uff85\051\uff85\054\uff85\060\uff85" +
    "\001\002\000\034\003\uff8a\004\uff8a\006\uff8a\007\uff8a\010" +
    "\uff8a\011\uff8a\025\uff8a\026\uff8a\040\uff8a\041\uff8a\051\uff8a" +
    "\054\uff8a\060\uff8a\001\002\000\034\003\uff81\004\uff81\006" +
    "\uff81\007\uff81\010\uff81\011\uff81\025\uff81\026\uff81\040\uff81" +
    "\041\uff81\051\uff81\054\uff81\060\uff81\001\002\000\034\003" +
    "\uff8d\004\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\025\uff8d" +
    "\026\uff8d\040\uff8d\041\uff8d\051\uff8d\054\uff8d\060\uff8d\001" +
    "\002\000\004\055\uffe4\001\002\000\034\003\uff83\004\uff83" +
    "\006\uff83\007\uff83\010\uff83\011\uff83\025\uff83\026\uff83\040" +
    "\uff83\041\uff83\051\uff83\054\uff83\060\uff83\001\002\000\034" +
    "\003\125\004\120\006\073\007\104\010\074\011\103\025" +
    "\106\026\107\040\116\041\076\051\110\054\100\060\114" +
    "\001\002\000\034\003\uff89\004\uff89\006\uff89\007\uff89\010" +
    "\uff89\011\uff89\025\uff89\026\uff89\040\uff89\041\uff89\051\uff89" +
    "\054\uff89\060\uff89\001\002\000\034\003\125\004\120\006" +
    "\073\007\104\010\074\011\103\025\106\026\107\040\116" +
    "\041\076\051\110\054\100\060\114\001\002\000\034\003" +
    "\uff8e\004\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\025\uff8e" +
    "\026\uff8e\040\uff8e\041\uff8e\051\uff8e\054\uff8e\060\uff8e\001" +
    "\002\000\034\003\uff82\004\uff82\006\uff82\007\uff82\010\uff82" +
    "\011\uff82\025\uff82\026\uff82\040\uff82\041\uff82\051\uff82\054" +
    "\uff82\060\uff82\001\002\000\034\003\uff8c\004\uff8c\006\uff8c" +
    "\007\uff8c\010\uff8c\011\uff8c\025\uff8c\026\uff8c\040\uff8c\041" +
    "\uff8c\051\uff8c\054\uff8c\060\uff8c\001\002\000\034\003\uff84" +
    "\004\uff84\006\uff84\007\uff84\010\uff84\011\uff84\025\uff84\026" +
    "\uff84\040\uff84\041\uff84\051\uff84\054\uff84\060\uff84\001\002" +
    "\000\036\013\133\040\144\041\136\042\146\043\132\044" +
    "\134\045\142\047\140\050\145\051\135\052\uffad\055\uffad" +
    "\056\uffad\057\uffad\001\002\000\036\013\133\040\144\041" +
    "\136\042\146\043\132\044\134\045\142\047\140\050\145" +
    "\051\135\052\uffb4\055\uffb4\056\uffb4\057\uffb4\001\002\000" +
    "\032\013\133\040\144\041\136\042\146\043\132\044\134" +
    "\045\142\047\140\050\145\051\135\055\uffe1\056\131\001" +
    "\002\000\004\055\uffe2\001\002\000\004\054\122\001\002" +
    "\000\036\013\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\001\002\000\036\013\133\040\144\041" +
    "\136\042\146\043\132\044\134\045\142\047\140\050\145" +
    "\051\135\052\uffb3\055\uffb3\056\uffb3\057\uffb3\001\002\000" +
    "\032\013\133\040\144\041\136\042\146\043\132\044\134" +
    "\045\142\047\140\050\145\051\135\056\162\057\uffbb\001" +
    "\002\000\004\057\161\001\002\000\036\013\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\055\uffbf\056\uffbf\057\uffbf\001\002" +
    "\000\034\003\125\004\120\006\073\007\104\010\074\011" +
    "\103\025\106\026\107\040\116\041\076\051\110\054\100" +
    "\060\114\001\002\000\004\057\uffbe\001\002\000\032\013" +
    "\133\040\144\041\136\042\146\043\132\044\134\045\142" +
    "\047\140\050\145\051\135\056\162\057\uffbb\001\002\000" +
    "\004\057\uffbc\001\002\000\006\027\067\053\ufff2\001\002" +
    "\000\004\053\170\001\002\000\012\027\uffd3\030\174\031" +
    "\173\053\uffd3\001\002\000\006\027\uffd7\053\uffd7\001\002" +
    "\000\006\027\uffde\053\uffde\001\002\000\034\003\112\004" +
    "\120\006\073\007\104\010\074\011\103\025\106\026\107" +
    "\040\116\041\076\051\110\054\100\060\114\001\002\000" +
    "\006\003\175\052\200\001\002\000\006\027\uff7e\053\uff7e" +
    "\001\002\000\004\053\204\001\002\000\006\027\067\053" +
    "\ufff2\001\002\000\006\027\067\053\ufff2\001\002\000\004" +
    "\053\202\001\002\000\006\027\uffd6\053\uffd6\001\002\000" +
    "\006\027\uffd4\053\uffd4\001\002\000\006\027\uffd5\053\uffd5" +
    "\001\002\000\004\053\222\001\002\000\012\027\uffd3\030" +
    "\174\031\173\053\uffd3\001\002\000\030\013\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\215\001\002\000\004\052\211\001\002" +
    "\000\006\027\067\053\ufff2\001\002\000\004\053\213\001" +
    "\002\000\012\027\uffd3\030\174\031\173\053\uffd3\001\002" +
    "\000\006\027\uffda\053\uffda\001\002\000\006\027\067\053" +
    "\ufff2\001\002\000\004\053\217\001\002\000\012\027\uffd3" +
    "\030\174\031\173\053\uffd3\001\002\000\006\027\uffdb\053" +
    "\uffdb\001\002\000\006\027\uffd8\053\uffd8\001\002\000\012" +
    "\027\uffd3\030\174\031\173\053\uffd3\001\002\000\006\027" +
    "\uffd9\053\uffd9\001\002\000\036\013\133\040\144\041\136" +
    "\042\146\043\132\044\134\045\142\047\uffae\050\uffae\051" +
    "\uffae\052\uffae\055\uffae\056\uffae\057\uffae\001\002\000\006" +
    "\027\067\053\ufff2\001\002\000\004\053\227\001\002\000" +
    "\012\027\uffd3\030\174\031\173\053\uffd3\001\002\000\006" +
    "\027\uffdf\053\uffdf\001\002\000\030\013\133\040\144\041" +
    "\136\042\146\043\132\044\134\045\142\047\140\050\145" +
    "\051\135\055\234\001\002\000\030\013\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\055\233\001\002\000\036\013\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\055\uffac\056\uffac\057\uffac\001\002\000" +
    "\036\013\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\001\002\000\006\027\uffdc\053\uffdc\001\002" +
    "\000\012\027\uffd3\030\174\031\173\053\uffd3\001\002\000" +
    "\006\027\uffdd\053\uffdd\001\002\000\014\002\ufff9\003\ufff9" +
    "\022\ufff9\024\ufff9\053\ufff9\001\002\000\014\002\ufff7\003" +
    "\ufff7\022\ufff7\024\ufff7\053\ufff7\001\002\000\006\022\244" +
    "\055\uffef\001\002\000\004\055\256\001\002\000\006\003" +
    "\245\004\246\001\002\000\006\055\uff75\056\uff75\001\002" +
    "\000\006\055\uffed\056\251\001\002\000\006\055\uffed\056" +
    "\251\001\002\000\004\055\ufff0\001\002\000\004\022\252" +
    "\001\002\000\004\004\253\001\002\000\006\055\uffed\056" +
    "\251\001\002\000\004\055\uffee\001\002\000\004\055\ufff1" +
    "\001\002\000\004\052\257\001\002\000\006\027\067\053" +
    "\ufff2\001\002\000\004\053\261\001\002\000\014\002\ufffa" +
    "\003\ufffa\022\ufffa\024\ufffa\053\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\020\002\011\005\007\006\005\007\012\033" +
    "\004\034\013\060\006\001\001\000\006\050\061\060\062" +
    "\001\001\000\002\001\001\000\010\006\005\007\056\060" +
    "\006\001\001\000\006\006\055\060\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\015\001\001\000\012" +
    "\035\026\037\051\043\025\047\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\035\026\037\022\043\025" +
    "\047\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\046\001\001\000\002\001\001" +
    "\000\016\006\005\007\030\041\032\043\031\047\021\060" +
    "\006\001\001\000\002\001\001\000\004\107\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\045\016" +
    "\036\001\001\000\006\004\035\016\036\001\001\000\002" +
    "\001\001\000\006\003\041\047\037\001\001\000\002\001" +
    "\001\000\004\047\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\240\060\006\001" +
    "\001\000\002\001\001\000\006\022\065\024\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\013\101\050" +
    "\074\052\110\053\071\055\112\063\076\064\100\065\116" +
    "\066\104\076\114\001\001\000\006\022\070\024\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\170\026\234\001\001\000" +
    "\002\001\001\000\012\073\127\074\146\075\140\077\142" +
    "\001\001\000\020\013\101\052\110\063\230\064\231\065" +
    "\116\066\104\076\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\101" +
    "\052\110\063\223\064\123\065\116\066\104\076\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\101\052\110\063\156\064\123\065\116\066" +
    "\104\067\157\076\114\001\001\000\020\013\101\052\110" +
    "\063\155\064\123\065\116\066\104\076\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\154\001\001\000\022\013\101\015\125\052\110\063" +
    "\122\064\123\065\116\066\104\076\114\001\001\000\014" +
    "\014\136\073\127\074\146\075\140\077\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\101\052\110\063" +
    "\151\064\123\065\116\066\104\076\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\101\052\110\063\150\064\123\065\116\066" +
    "\104\076\114\001\001\000\002\001\001\000\020\013\101" +
    "\052\110\063\147\064\123\065\116\066\104\076\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\073\127\074\146\075\140\077" +
    "\142\001\001\000\012\073\127\074\146\075\140\077\142" +
    "\001\001\000\014\014\152\073\127\074\146\075\140\077" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\073\127\074\146\075\140\077\142\001" +
    "\001\000\014\070\162\073\127\074\146\075\140\077\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\101\052\110\063\163\064\123\065\116\066\104\076\114" +
    "\001\001\000\002\001\001\000\014\070\164\073\127\074" +
    "\146\075\140\077\142\001\001\000\002\001\001\000\006" +
    "\022\166\024\067\001\001\000\002\001\001\000\006\025" +
    "\170\026\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\013\101\050\205\052\110\053\204\055\207\063" +
    "\076\064\206\065\116\066\104\076\114\001\001\000\006" +
    "\050\176\053\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\202\024\067\001\001\000\006\022\200" +
    "\024\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\170\026\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\211\024\067\001\001\000\002\001\001" +
    "\000\006\025\170\026\213\001\001\000\002\001\001\000" +
    "\006\022\215\024\067\001\001\000\002\001\001\000\006" +
    "\025\170\026\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\170\026\222\001\001\000\002\001\001" +
    "\000\012\073\127\074\146\075\140\077\142\001\001\000" +
    "\006\022\225\024\067\001\001\000\002\001\001\000\006" +
    "\025\170\026\227\001\001\000\002\001\001\000\012\073" +
    "\127\074\146\075\140\077\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\170\026\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\242\001\001\000" +
    "\002\001\001\000\004\061\246\001\001\000\002\001\001" +
    "\000\004\012\254\001\001\000\004\012\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\257\024\067\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;

  ArrayList<String> errores;

  public Analizador(java_cup.runtime.Scanner s, boolean type) {
    super(s);
    errores = new ArrayList<String>();
  }
  
  public void addError(String error){
    errores.add(error);
    /*ProyectoCompi.PoyectoCompi.consola.impirmir(error);*/
  }

  public ArrayList<String> retornarLista(){
    return errores;
  }
  public void syntax_error(Symbol s){
    System.out.println("Error en la linea : " + s.value);
   
  }
/*public void unrecovered_syntax_error(Symbol s){
    System.out.println("Error crítico en la linea : " + s.value);
  }*/
protected int error_sync_size(){
    return 1;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {



  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Funcional 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo Funcional."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= OOP 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo OOP."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= error 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Error por final de archivo.");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Funcional ::= DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcional",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DefFunciones ::= DefFuncion DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DefFunciones ::= DefFuncion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DefFuncion ::= def identificador parenAbierto DefParametrosFact parenCerrado dosPuntos BloqueNuevo puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DefFuncion ::= def errDecFuncion dosPuntos BloqueNuevo puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DefFuncion ::= def errDecFuncion puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DefFuncion ::= def errPuntoYComa DefFuncion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DefFuncion ::= def errPuntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DefFuncion ::= errDecFuncion DefFuncion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DefFuncion ::= errDecFuncion puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BloqueNuevo ::= If BloqueNuevo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BloqueNuevo ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueNuevo",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DefParametrosFact ::= var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DefParametrosFact ::= var errParametro1 DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DefParametrosFact ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DefParametros ::= coma var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DefParametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Variable ::= var identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Variable ::= var errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Variable ::= errDecVariables identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Variables ::= Variables Variable 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Variables ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DosPuntos ::= dosPuntos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DosPuntos ::= errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Funcion ::= identificador parenAbierto Parametros parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcion",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Parametros ::= Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Parametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Parametro ::= coma Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Parametro ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DecIf ::= DecIf Elif Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DecIf",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // If ::= iif ExpresionB dosPuntos BloqueNuevo puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // If ::= iif errExpresionB dosPuntos BloqueNuevo puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // If ::= iif errIf puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // If ::= iif errPuntoYComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Elif ::= elif ExpresionB dosPuntos BloqueNuevo puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Elif ::= elif errExpresionB dosPuntos BloqueNuevo puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Elif ::= elif errIf puntoComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Elif ::= elif errPuntoYComa Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Elif ::= Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Else ::= eelse dosPuntos BloqueNuevo puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Else ::= eelse errIf puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Else ::= eelse errPuntoYComa BloqueNuevo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Else ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ForFact ::= ffor identificador in For DosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ForFact",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // For ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // For ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // For ::= Range 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Range ::= range parenAbierto INT coma INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Range ::= range parenAbierto INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // While ::= wwhile ExpresionB DosPuntos BloquePuntoComa Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BloquePuntoComa ::= Bloque puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BloquePuntoComa ::= Bloque errPuntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Bloques ::= Bloque Bloques 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloques",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Bloques ::= Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloques",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Bloque ::= ForFact Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Bloque ::= While Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Bloque ::= If Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Bloque ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Literal ::= INT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Literal ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Literal ::= CHAR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Literal ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Lista ::= cuadradoAbierto ElementosLista cuadradoCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Lista",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ElementosLista ::= Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MasElementosLista ::= coma Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MasElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expresion ::= Literal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expresion ::= Lista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expresion ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expresion ::= Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expresion ::= parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expresion ::= errExpresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expresion ::= Expresion OpBinario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expresion ::= OpUnario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expresion ::= identificador punto Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expresion ::= ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExpresionB ::= ffalse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExpresionB ::= ttrue 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExpresionB ::= opNot Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExpresionB ::= Expresion OpBinarioB Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExpresionB ::= parenAbierto ExpresionB parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Asignacion ::= identificador opAsignaciones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Asignacion ::= errAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expresiones ::= Expresiones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExpresionesB ::= ExpresionesB ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpresionesB ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Asignaciones ::= Asignaciones Asignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Asignaciones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FuncionesPredefinidas ::= FuncionesPredefinidas FuncionPredefinida 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FuncionesPredefinidas ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FuncionPredefinida ::= Input 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FuncionPredefinida ::= Print 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Input ::= iinput parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Input ::= errInput 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Print ::= pprint parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Print ::= errPrint 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CodigoPrincipal ::= Variables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CodigoPrincipal",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VariableOOP ::= var identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariableOOP",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VariableOOP ::= var errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariableOOP",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VariableOOP ::= errDecVariables identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariableOOP",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VariablesOOP ::= VariablesOOP VariableOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariablesOOP",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VariablesOOP ::= VariableOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariablesOOP",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FuncionesOOP ::= DefFunciones puntoComa CodigoPrincipal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesOOP",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$0 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 errores.add("Falto el ; de la clase principal en la línea: " + cleft); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$0",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FuncionesOOP ::= DefFunciones NT$0 CodigoPrincipal 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesOOP",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OOP ::= HeaderOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OOP",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BloqueOOP ::= VariablesOOP FuncionesOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueOOP",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // HeaderOOP ::= clas identificador dosPuntos BloqueOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // HeaderOOP ::= clas errHeaderOOP BloqueOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OpAritmeticos ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OpAritmeticos ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OpAritmeticos ::= opMultiplicacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OpAritmeticos ::= opDivision 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OpAritmeticos ::= opDivisionE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OpAritmeticos ::= opModulo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OpUnario ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OpUnario ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OpBinario ::= OpAritmeticos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinario",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OpBinarioB ::= opComparadores 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OpBinarioB ::= OpLogicos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OpLogicos ::= opAnd 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OpLogicos ::= opOr 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OpLogicos ::= opNot 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // errHeaderOOP ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en el header del fuente de tipo OOP. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errHeaderOOP",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // errDecVariables ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error al declarar variables. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecVariables",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // errPuntoYComa ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Falto cerrar un bloque con ';'. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPuntoYComa",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // errClase ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la clase. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errClase",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // errExpresion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresion",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // errExpresionB ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Debe ser booleana. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresionB",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // errAsignacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la asignación. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errAsignacion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // errIf ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la definicion del if. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errIf",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // errInput ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en input(). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errInput",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // errPrint ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en print() Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPrint",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // errDecFuncion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecFuncion",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // errParametro1 ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de los parametros de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errParametro1",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // errBloque ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error Bloque. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errBloque",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
