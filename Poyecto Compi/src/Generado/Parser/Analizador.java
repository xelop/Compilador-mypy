
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Generado.Parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\005\003\000\002\010\004" +
    "\000\002\007\004\000\002\007\002\000\002\006\011\000" +
    "\002\006\011\000\002\006\006\000\002\006\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\002\000\002\012" +
    "\006\000\002\012\002\000\002\004\003\000\002\003\004" +
    "\000\002\003\003\000\002\016\004\000\002\016\002\000" +
    "\002\041\003\000\002\041\003\000\002\042\003\000\002" +
    "\042\003\000\002\013\006\000\002\015\004\000\002\015" +
    "\002\000\002\014\005\000\002\014\002\000\002\021\010" +
    "\000\002\021\003\000\002\024\003\000\002\022\006\000" +
    "\002\022\002\000\002\023\007\000\002\023\002\000\002" +
    "\025\011\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\027\010\000\002\027\006\000\002\030\010" +
    "\000\002\102\004\000\002\102\003\000\002\020\004\000" +
    "\002\020\004\000\002\020\002\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\062" +
    "\005\000\002\063\004\000\002\063\002\000\002\064\005" +
    "\000\002\064\002\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\005\000\002" +
    "\057\003\000\002\057\005\000\002\057\004\000\002\057" +
    "\005\000\002\057\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\004\000\002\060\005\000\002\074\005\000" +
    "\002\074\003\000\002\065\004\000\002\065\002\000\002" +
    "\066\004\000\002\066\002\000\002\075\004\000\002\075" +
    "\002\000\002\077\004\000\002\077\002\000\002\076\003" +
    "\000\002\076\003\000\002\100\006\000\002\100\003\000" +
    "\002\101\006\000\002\101\003\000\002\033\005\000\002" +
    "\040\004\000\002\040\004\000\002\037\004\000\002\031" +
    "\004\000\002\034\003\000\002\035\003\000\002\032\006" +
    "\000\002\032\004\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\072\003\000\002\072\003\000\002\071" +
    "\003\000\002\073\003\000\002\073\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\043\003\000" +
    "\002\044\003\000\002\045\003\000\002\046\003\000\002" +
    "\047\003\000\002\052\003\000\002\051\003\000\002\050" +
    "\003\000\002\053\003\000\002\054\003\000\002\055\003" +
    "\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\010\003\013\023\017\024\004\001\002\000" +
    "\006\003\143\004\144\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\uffff\001\002\000\012\002\ufffa\003\ufffa\022" +
    "\ufffa\024\004\001\002\000\004\024\004\001\002\000\004" +
    "\002\000\001\002\000\010\002\uffec\003\uffec\022\uffec\001" +
    "\002\000\006\002\ufffe\024\uff91\001\002\000\010\002\uffa3" +
    "\003\uffa3\022\uffa3\001\002\000\004\002\135\001\002\000" +
    "\010\002\uffa2\003\uffa2\022\uffa2\001\002\000\004\004\020" +
    "\001\002\000\004\052\021\001\002\000\004\024\004\001" +
    "\002\000\006\003\025\022\026\001\002\000\010\002\uffa1" +
    "\003\uffa1\022\uffa1\001\002\000\012\002\uffee\003\uffee\022" +
    "\uffee\053\uffee\001\002\000\016\002\uff90\003\uff90\022\uff90" +
    "\032\uff90\035\uff90\053\uff90\001\002\000\004\004\134\001" +
    "\002\000\010\003\uffec\022\uffec\053\uffec\001\002\000\010" +
    "\002\uffa5\003\uffa5\022\uffa5\001\002\000\010\003\033\022" +
    "\026\053\036\001\002\000\010\002\uffa8\003\uffa8\022\uffa8" +
    "\001\002\000\042\002\uff8f\003\uff90\004\uff8f\006\uff8f\007" +
    "\uff8f\010\uff8f\011\uff8f\022\uff90\025\uff8f\026\uff8f\040\uff8f" +
    "\041\uff8f\051\uff8f\053\uff90\054\uff8f\060\uff8f\001\002\000" +
    "\012\002\uffed\003\uffed\022\uffed\053\uffed\001\002\000\040" +
    "\002\uffb5\003\uffb5\004\uffb5\006\uffb5\007\uffb5\010\uffb5\011" +
    "\uffb5\022\uffb5\025\uffb5\026\uffb5\040\uffb5\041\uffb5\051\uffb5" +
    "\054\uffb5\060\uffb5\001\002\000\040\002\uffb5\003\uffb5\004" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\022\uffb5\025\uffb5" +
    "\026\uffb5\040\uffb5\041\uffb5\051\uffb5\054\uffb5\060\uffb5\001" +
    "\002\000\040\002\ufff0\003\057\004\064\006\041\007\051" +
    "\010\042\011\050\022\ufff0\025\053\026\054\040\062\041" +
    "\043\051\055\054\045\060\060\001\002\000\010\002\uffa7" +
    "\003\uffa7\022\uffa7\001\002\000\066\002\uffcf\003\uffcf\004" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf\022\uffcf" +
    "\025\uffcf\026\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\001\002\000\066\002" +
    "\uffcd\003\uffcd\004\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\013\uffcd\022\uffcd\025\uffcd\026\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\001" +
    "\002\000\034\003\uff98\004\uff98\006\uff98\007\uff98\010\uff98" +
    "\011\uff98\025\uff98\026\uff98\040\uff98\041\uff98\051\uff98\054" +
    "\uff98\060\uff98\001\002\000\056\002\uffb6\003\uffb6\004\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\013\075\022\uffb6\025" +
    "\uffb6\026\uffb6\040\106\041\100\042\110\043\074\044\076" +
    "\045\104\047\102\050\107\051\077\054\uffb6\060\uffb6\001" +
    "\002\000\034\003\057\004\064\006\041\007\051\010\042" +
    "\011\050\025\053\026\054\040\062\041\043\051\055\054" +
    "\045\060\060\001\002\000\066\002\uffbd\003\uffbd\004\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\013\uffbd\022\uffbd\025" +
    "\uffbd\026\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\001\002\000\066\002\uffc3" +
    "\003\uffc3\004\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\013" +
    "\uffc3\022\uffc3\025\uffc3\026\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\001\002" +
    "\000\066\002\uffcc\003\uffcc\004\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\013\uffcc\022\uffcc\025\uffcc\026\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\052\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\001\002\000\066\002\uffce\003\uffce\004\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\013\uffce\022\uffce\025\uffce" +
    "\026\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\060\uffce\001\002\000\066\002\uffc5\003" +
    "\uffc5\004\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5" +
    "\022\uffc5\025\uffc5\026\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\001\002\000" +
    "\066\002\uffbc\003\uffbc\004\uffbc\006\uffbc\007\uffbc\010\uffbc" +
    "\011\uffbc\013\uffbc\022\uffbc\025\uffbc\026\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\001\002\000\066\002\uffbb\003\uffbb\004\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\011\uffbb\013\uffbb\022\uffbb\025\uffbb\026" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\001\002\000\034\003\057\004\064" +
    "\006\041\007\051\010\042\011\050\025\053\026\054\040" +
    "\062\041\043\051\055\054\045\060\060\001\002\000\066" +
    "\002\uffc1\003\uffc1\004\uffc1\006\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\013\uffc1\022\uffc1\025\uffc1\026\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\045\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1" +
    "\001\002\000\066\002\uff8d\003\uff8d\004\uff8d\006\uff8d\007" +
    "\uff8d\010\uff8d\011\uff8d\013\uff8d\022\uff8d\025\uff8d\026\uff8d" +
    "\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\047" +
    "\uff8d\050\uff8d\051\uff8d\052\uff8d\054\uff8d\055\uff8d\056\uff8d" +
    "\057\uff8d\060\uff8d\001\002\000\036\003\057\004\064\006" +
    "\041\007\051\010\042\011\050\025\053\026\054\040\062" +
    "\041\043\051\055\054\045\057\uffc9\060\060\001\002\000" +
    "\034\003\057\004\064\006\041\007\051\010\042\011\050" +
    "\025\053\026\054\040\062\041\043\051\055\054\045\060" +
    "\060\001\002\000\034\003\uff99\004\uff99\006\uff99\007\uff99" +
    "\010\uff99\011\uff99\025\uff99\026\uff99\040\uff99\041\uff99\051" +
    "\uff99\054\uff99\060\uff99\001\002\000\066\002\uffc6\003\uffc6" +
    "\004\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\013\uffc6\022" +
    "\uffc6\025\uffc6\026\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\001\002\000\070" +
    "\002\uffc4\003\uffc4\004\uffc4\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\013\uffc4\022\uffc4\025\uffc4\026\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\054\066\055\uffc4\056\uffc4\057\uffc4\060\uffc4" +
    "\061\065\001\002\000\004\004\116\001\002\000\036\003" +
    "\057\004\064\006\041\007\051\010\042\011\050\025\053" +
    "\026\054\040\062\041\043\051\055\054\045\055\uffe5\060" +
    "\060\001\002\000\032\013\075\040\106\041\100\042\110" +
    "\043\074\044\076\045\104\047\102\050\107\051\077\055" +
    "\uffe3\056\073\001\002\000\004\055\071\001\002\000\066" +
    "\002\uffe7\003\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\013\uffe7\022\uffe7\025\uffe7\026\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\001\002\000\034\003\uff97\004\uff97\006\uff97\007\uff97\010" +
    "\uff97\011\uff97\025\uff97\026\uff97\040\uff97\041\uff97\051\uff97" +
    "\054\uff97\060\uff97\001\002\000\034\003\057\004\064\006" +
    "\041\007\051\010\042\011\050\025\053\026\054\040\062" +
    "\041\043\051\055\054\045\060\060\001\002\000\034\003" +
    "\uff9c\004\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\025\uff9c" +
    "\026\uff9c\040\uff9c\041\uff9c\051\uff9c\054\uff9c\060\uff9c\001" +
    "\002\000\034\003\uff96\004\uff96\006\uff96\007\uff96\010\uff96" +
    "\011\uff96\025\uff96\026\uff96\040\uff96\041\uff96\051\uff96\054" +
    "\uff96\060\uff96\001\002\000\034\003\uff9b\004\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\011\uff9b\025\uff9b\026\uff9b\040\uff9b\041" +
    "\uff9b\051\uff9b\054\uff9b\060\uff9b\001\002\000\034\003\uff92" +
    "\004\uff92\006\uff92\007\uff92\010\uff92\011\uff92\025\uff92\026" +
    "\uff92\040\uff92\041\uff92\051\uff92\054\uff92\060\uff92\001\002" +
    "\000\034\003\uff9e\004\uff9e\006\uff9e\007\uff9e\010\uff9e\011" +
    "\uff9e\025\uff9e\026\uff9e\040\uff9e\041\uff9e\051\uff9e\054\uff9e" +
    "\060\uff9e\001\002\000\004\055\uffe6\001\002\000\034\003" +
    "\uff94\004\uff94\006\uff94\007\uff94\010\uff94\011\uff94\025\uff94" +
    "\026\uff94\040\uff94\041\uff94\051\uff94\054\uff94\060\uff94\001" +
    "\002\000\034\003\057\004\064\006\041\007\051\010\042" +
    "\011\050\025\053\026\054\040\062\041\043\051\055\054" +
    "\045\060\060\001\002\000\034\003\uff9a\004\uff9a\006\uff9a" +
    "\007\uff9a\010\uff9a\011\uff9a\025\uff9a\026\uff9a\040\uff9a\041" +
    "\uff9a\051\uff9a\054\uff9a\060\uff9a\001\002\000\034\003\057" +
    "\004\064\006\041\007\051\010\042\011\050\025\053\026" +
    "\054\040\062\041\043\051\055\054\045\060\060\001\002" +
    "\000\034\003\uff9f\004\uff9f\006\uff9f\007\uff9f\010\uff9f\011" +
    "\uff9f\025\uff9f\026\uff9f\040\uff9f\041\uff9f\051\uff9f\054\uff9f" +
    "\060\uff9f\001\002\000\034\003\uff93\004\uff93\006\uff93\007" +
    "\uff93\010\uff93\011\uff93\025\uff93\026\uff93\040\uff93\041\uff93" +
    "\051\uff93\054\uff93\060\uff93\001\002\000\034\003\uff9d\004" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\025\uff9d\026\uff9d" +
    "\040\uff9d\041\uff9d\051\uff9d\054\uff9d\060\uff9d\001\002\000" +
    "\034\003\uff95\004\uff95\006\uff95\007\uff95\010\uff95\011\uff95" +
    "\025\uff95\026\uff95\040\uff95\041\uff95\051\uff95\054\uff95\060" +
    "\uff95\001\002\000\066\002\uffb9\003\uffb9\004\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\011\uffb9\013\075\022\uffb9\025\uffb9\026" +
    "\uffb9\040\106\041\100\042\110\043\074\044\076\045\104" +
    "\047\102\050\107\051\077\052\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\001\002\000\066\002\uffc0\003\uffc0" +
    "\004\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\013\075\022" +
    "\uffc0\025\uffc0\026\uffc0\040\106\041\100\042\110\043\074" +
    "\044\076\045\104\047\102\050\107\051\077\052\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\001\002\000\032" +
    "\013\075\040\106\041\100\042\110\043\074\044\076\045" +
    "\104\047\102\050\107\051\077\055\uffe3\056\073\001\002" +
    "\000\004\055\uffe4\001\002\000\004\054\066\001\002\000" +
    "\066\002\uffbe\003\uffbe\004\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\013\uffbe\022\uffbe\025\uffbe\026\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\001\002\000\066\002\uffbf\003\uffbf\004\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\013\075\022\uffbf\025\uffbf\026" +
    "\uffbf\040\106\041\100\042\110\043\074\044\076\045\104" +
    "\047\102\050\107\051\077\052\uffbf\054\uffbf\055\uffbf\056" +
    "\uffbf\057\uffbf\060\uffbf\001\002\000\032\013\075\040\106" +
    "\041\100\042\110\043\074\044\076\045\104\047\102\050" +
    "\107\051\077\056\124\057\uffc7\001\002\000\004\057\123" +
    "\001\002\000\066\002\uffcb\003\uffcb\004\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\013\uffcb\022\uffcb\025\uffcb\026\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\001\002\000\034\003\057\004\064\006" +
    "\041\007\051\010\042\011\050\025\053\026\054\040\062" +
    "\041\043\051\055\054\045\060\060\001\002\000\004\057" +
    "\uffca\001\002\000\032\013\075\040\106\041\100\042\110" +
    "\043\074\044\076\045\104\047\102\050\107\051\077\056" +
    "\124\057\uffc7\001\002\000\004\057\uffc8\001\002\000\066" +
    "\002\uffba\003\uffba\004\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\013\075\022\uffba\025\uffba\026\uffba\040\106\041\100" +
    "\042\110\043\074\044\076\045\104\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\001\002\000\030\013\075\040\106\041\100\042\110\043" +
    "\074\044\076\045\104\047\102\050\107\051\077\055\132" +
    "\001\002\000\066\002\uffc2\003\uffc2\004\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\013\uffc2\022\uffc2\025\uffc2\026\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\057\uffc2\060\uffc2\001\002\000\010\002\uffa6\003\uffa6\022" +
    "\uffa6\001\002\000\012\002\uffef\003\uffef\022\uffef\053\uffef" +
    "\001\002\000\004\002\001\001\002\000\010\002\uffa4\003" +
    "\025\022\026\001\002\000\010\002\uffa0\003\uffa0\022\uffa0" +
    "\001\002\000\010\002\ufffc\003\ufffc\022\ufffc\001\002\000" +
    "\012\002\ufffa\003\ufffa\022\ufffa\024\004\001\002\000\010" +
    "\002\ufffb\003\ufffb\022\ufffb\001\002\000\014\003\uff87\032" +
    "\uff87\035\uff87\052\uff87\053\uff87\001\002\000\004\054\220" +
    "\001\002\000\014\003\153\032\156\035\154\052\155\053" +
    "\uffd0\001\002\000\012\003\uffd0\032\156\035\154\053\uffd0" +
    "\001\002\000\004\053\216\001\002\000\012\002\uffd3\003" +
    "\uffd3\022\uffd3\024\uffd3\001\002\000\012\002\ufff6\003\ufff6" +
    "\022\ufff6\024\ufff6\001\002\000\012\003\uffd0\032\156\035" +
    "\154\053\uffd0\001\002\000\022\002\uff8f\003\uff8f\022\uff8f" +
    "\024\uff8f\030\uff8f\032\uff8f\035\uff8f\053\uff8f\001\002\000" +
    "\034\003\057\004\064\006\041\007\051\010\042\011\050" +
    "\025\053\026\054\040\062\041\043\051\055\054\045\060" +
    "\060\001\002\000\012\003\153\032\156\035\154\053\uffd0" +
    "\001\002\000\004\004\157\001\002\000\004\033\160\001" +
    "\002\000\010\004\164\011\161\034\162\001\002\000\006" +
    "\003\uffda\052\uffda\001\002\000\004\054\175\001\002\000" +
    "\006\003\025\052\170\001\002\000\006\003\uffd9\052\uffd9" +
    "\001\002\000\006\003\uffd8\052\uffd8\001\002\000\012\003" +
    "\uffe8\032\uffe8\035\uffe8\053\uffe8\001\002\000\012\003\uffd0" +
    "\032\156\035\154\053\uffd0\001\002\000\012\003\uffe9\032" +
    "\uffe9\035\uffe9\053\uffe9\001\002\000\006\003\153\053\173" +
    "\001\002\000\014\003\uffea\030\uffea\032\uffea\035\uffea\053" +
    "\uffea\001\002\000\014\003\uffeb\030\uffeb\032\uffeb\035\uffeb" +
    "\053\uffeb\001\002\000\012\003\uffdb\032\uffdb\035\uffdb\053" +
    "\uffdb\001\002\000\004\006\176\001\002\000\006\055\200" +
    "\056\177\001\002\000\004\006\201\001\002\000\006\003" +
    "\uffd6\052\uffd6\001\002\000\004\055\202\001\002\000\006" +
    "\003\uffd7\052\uffd7\001\002\000\012\002\ufff7\003\ufff7\022" +
    "\ufff7\024\ufff7\001\002\000\032\003\025\013\075\040\106" +
    "\041\100\042\110\043\074\044\076\045\104\047\102\050" +
    "\107\051\077\052\170\001\002\000\012\003\uffd0\032\156" +
    "\035\154\053\uffd0\001\002\000\006\003\153\053\173\001" +
    "\002\000\014\003\uffde\030\211\032\uffde\035\uffde\053\uffde" +
    "\001\002\000\012\003\uffd5\032\uffd5\035\uffd5\053\uffd5\001" +
    "\002\000\004\052\212\001\002\000\010\032\156\035\154" +
    "\053\uffd0\001\002\000\004\053\214\001\002\000\012\003" +
    "\uffdf\032\uffdf\035\uffdf\053\uffdf\001\002\000\006\003\uffd2" +
    "\053\uffd2\001\002\000\012\002\uffd4\003\uffd4\022\uffd4\024" +
    "\uffd4\001\002\000\006\003\uffd1\053\uffd1\001\002\000\006" +
    "\022\222\055\ufff3\001\002\000\004\055\234\001\002\000" +
    "\006\003\223\004\224\001\002\000\006\055\uff86\056\uff86" +
    "\001\002\000\006\055\ufff1\056\227\001\002\000\006\055" +
    "\ufff1\056\227\001\002\000\004\055\ufff4\001\002\000\004" +
    "\022\230\001\002\000\004\004\231\001\002\000\006\055" +
    "\ufff1\056\227\001\002\000\004\055\ufff2\001\002\000\004" +
    "\055\ufff5\001\002\000\006\003\143\052\235\001\002\000" +
    "\012\003\153\032\156\035\154\053\uffd0\001\002\000\012" +
    "\003\153\032\156\035\154\053\uffd0\001\002\000\012\002" +
    "\ufff8\003\ufff8\022\ufff8\024\ufff8\001\002\000\012\002\ufff9" +
    "\003\ufff9\022\ufff9\024\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\024\002\014\005\010\006\006\010\004\031" +
    "\005\032\015\034\011\035\013\043\007\001\001\000\004" +
    "\055\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\140\007\137\001\001\000\010\006\006\010\021" +
    "\037\136\001\001\000\002\001\001\000\004\016\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\006\010\021\037\022\001\001\000\010\003\026" +
    "\033\027\044\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\030" +
    "\001\001\000\002\001\001\000\012\003\033\040\031\044" +
    "\023\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\132\065\036\001\001\000" +
    "\006\004\037\065\036\001\001\000\020\013\046\047\055" +
    "\057\043\060\045\061\062\062\051\072\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\067\071\070\110\071\102\073\104\001" +
    "\001\000\020\013\046\047\055\057\130\060\045\061\062" +
    "\062\051\072\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\046\047" +
    "\055\057\127\060\045\061\062\062\051\072\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\046\047" +
    "\055\057\120\060\045\061\062\062\051\063\121\072\060" +
    "\001\001\000\020\013\046\047\055\057\117\060\045\061" +
    "\062\062\051\072\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\116\001\001\000" +
    "\022\013\046\015\067\047\055\057\066\060\045\061\062" +
    "\062\051\072\060\001\001\000\014\014\100\067\071\070" +
    "\110\071\102\073\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\046\047\055\057" +
    "\113\060\045\061\062\062\051\072\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\046\047\055\057\112\060\045\061\062\062" +
    "\051\072\060\001\001\000\002\001\001\000\020\013\046" +
    "\047\055\057\111\060\045\061\062\062\051\072\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\067\071\070\110\071\102\073" +
    "\104\001\001\000\012\067\071\070\110\071\102\073\104" +
    "\001\001\000\014\014\114\067\071\070\110\071\102\073" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\067\071\070\110\071\102\073\104\001" +
    "\001\000\014\064\124\067\071\070\110\071\102\073\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\046\047\055\057\125\060\045\061\062\062\051\072\060" +
    "\001\001\000\002\001\001\000\014\064\126\067\071\070" +
    "\110\071\102\073\104\001\001\000\002\001\001\000\012" +
    "\067\071\070\110\071\102\073\104\001\001\000\012\067" +
    "\071\070\110\071\102\073\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\033\044\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\140\007\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\146" +
    "\025\151\030\145\045\147\102\150\001\001\000\010\020" +
    "\216\025\151\030\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\214\025\151\030" +
    "\145\001\001\000\002\001\001\000\020\013\046\047\055" +
    "\057\203\060\045\061\062\062\051\072\060\001\001\000" +
    "\014\020\146\025\151\030\145\045\147\102\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\162\027" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\166\044\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\170\025\151\030\145" +
    "\001\001\000\002\001\001\000\006\041\173\045\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\042\204\044\165\067\071\070\110\071" +
    "\102\073\104\001\001\000\010\020\205\025\151\030\145" +
    "\001\001\000\006\041\206\045\171\001\001\000\004\022" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\212\025\151\030\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\220\001\001\000\002\001\001\000" +
    "\004\056\224\001\001\000\002\001\001\000\004\012\232" +
    "\001\001\000\004\012\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\235\001" +
    "\001\000\014\020\146\025\151\030\145\045\147\102\237" +
    "\001\001\000\014\020\146\025\151\030\145\045\147\102" +
    "\236\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;

  ArrayList<String> errores;

  public Analizador(java_cup.runtime.Scanner s, boolean type) {
    super(s);
    errores = new ArrayList<String>();
  }
  
  public void addError(String error){
    errores.add(error);
    /*ProyectoCompi.PoyectoCompi.consola.impirmir(error);*/
  }

  public ArrayList<String> retornarLista(){
    return errores;
  }
  public void syntax_error(Symbol s){
    System.out.println("Error en la linea : " + s.value);
   
  }
/*public void unrecovered_syntax_error(Symbol s){
    System.out.println("Error crítico en la linea : " + s.value);
  }*/
protected int error_sync_size(){
    return 1;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {



  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Funcional 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo Funcional."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= OOP 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Parseo realizado exitosamente. De tipo OOP."); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= error 
            {
              Object RESULT =null;
		 ProyectoCompi.PoyectoCompi.consola.impirmir("Error por final de archivo.");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Funcional ::= DefFuncionesFact 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcional",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DefFuncionesFact ::= DefFuncion DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncionesFact",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DefFunciones ::= DefFuncion DefFunciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DefFunciones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFunciones",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DefFuncion ::= def identificador parenAbierto DefParametrosFact parenCerrado dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DefFuncion ::= def identificador parenAbierto DefParametrosFact parenCerrado errDecFuncion BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DefFuncion ::= def errDecFuncion dosPuntos BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DefFuncion ::= def errDecFuncion BloquePuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefFuncion",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DefParametrosFact ::= var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DefParametrosFact ::= var errParametro1 DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DefParametrosFact ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametrosFact",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DefParametros ::= coma var identificador DefParametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DefParametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DefParametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CodigoPrincipal ::= Expresiones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CodigoPrincipal",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Variable ::= var identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Variable ::= errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variable",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Variables ::= Variables Variable 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Variables ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Variables",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PuntoComa ::= puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PuntoComa",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PuntoComa ::= errPuntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PuntoComa",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DosPuntos ::= dosPuntos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DosPuntos ::= errDecVariables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DosPuntos",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Funcion ::= identificador parenAbierto Parametros parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Funcion",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Parametros ::= Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Parametros ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Parametro ::= coma Expresion Parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Parametro ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // If ::= iif Expresion DosPuntos Elif Else PuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // If ::= errIf 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("If",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Finif ::= PuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Finif",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Else ::= eelse dosPuntos Bloque puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Else ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Elif ::= elif Expresion dosPuntos Bloque Elif 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Elif ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Elif",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ForFact ::= ffor identificador in For DosPuntos Bloque PuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ForFact",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // For ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // For ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // For ::= Range 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("For",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Range ::= range parenAbierto INT coma INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Range ::= range parenAbierto INT parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Range",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // While ::= wwhile Expresion DosPuntos Bloque PuntoComa Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("While",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BloquePuntoComa ::= Bloque puntoComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BloquePuntoComa ::= errPuntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloquePuntoComa",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Bloque ::= ForFact Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Bloque ::= While Bloque 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bloque ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Literal ::= INT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Literal ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Literal ::= CHAR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Literal ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Literal",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Lista ::= cuadradoAbierto ElementosLista cuadradoCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Lista",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ElementosLista ::= Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ElementosLista",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MasElementosLista ::= coma Expresion MasElementosLista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MasElementosLista ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("MasElementosLista",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expresion ::= Literal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expresion ::= Lista 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expresion ::= identificador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expresion ::= Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expresion ::= parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expresion ::= errExpresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expresion ::= Expresion OpBinario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expresion ::= OpUnario Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expresion ::= identificador punto Funcion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expresion ::= ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExpresionB ::= ffalse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExpresionB ::= ttrue 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExpresionB ::= opNot Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExpresionB ::= Expresion OpBinarioB Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionB",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Asignacion ::= identificador opAsignaciones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Asignacion ::= errAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignacion",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expresiones ::= Expresiones Expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresiones",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ExpresionesB ::= ExpresionesB ExpresionB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ExpresionesB ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ExpresionesB",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Asignaciones ::= Asignaciones Asignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Asignaciones ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Asignaciones",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FuncionesPredefinidas ::= FuncionesPredefinidas FuncionPredefinida 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FuncionesPredefinidas ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesPredefinidas",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FuncionPredefinida ::= Input 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FuncionPredefinida ::= Print 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionPredefinida",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Input ::= iinput parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Input ::= errInput 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Input",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Print ::= pprint parenAbierto Expresion parenCerrado 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Print ::= errPrint 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Print",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VariablesOOP ::= Variable Variables PuntoComaOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VariablesOOP",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PuntoComaOOP ::= puntoComa CodigoPrincipal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PuntoComaOOP",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PuntoComaOOP ::= errPuntoYComa CodigoPrincipal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PuntoComaOOP",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FuncionesOOP ::= DefFuncionesFact VariablesOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FuncionesOOP",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OOP ::= Clase Variables 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OOP",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Clase ::= BloqueOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Clase",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BloqueOOP ::= HeaderOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueOOP",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // HeaderOOP ::= clas identificador dosPuntos FuncionesOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // HeaderOOP ::= errHeaderOOP FuncionesOOP 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("HeaderOOP",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OpAritmeticos ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OpAritmeticos ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OpAritmeticos ::= opMultiplicacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OpAritmeticos ::= opDivision 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OpAritmeticos ::= opDivisionE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OpAritmeticos ::= opModulo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpAritmeticos",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OpUnario ::= opSuma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OpUnario ::= opResta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpUnario",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OpBinario ::= OpAritmeticos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinario",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OpBinarioB ::= opComparadores 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OpBinarioB ::= OpLogicos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpBinarioB",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OpLogicos ::= opAnd 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OpLogicos ::= opOr 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OpLogicos ::= opNot 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("OpLogicos",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // errHeaderOOP ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en el header del fuente de tipo OOP. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errHeaderOOP",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // errDecVariables ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error al declarar variables. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecVariables",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // errPuntoYComa ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Falto cerrar un bloque con ';'. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPuntoYComa",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // errClase ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la clase. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errClase",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // errExpresion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresion",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // errExpresionB ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la expresión. Debe ser booleana. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errExpresionB",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // errAsignacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la asignación. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errAsignacion",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // errIf ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en el if. Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errIf",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // errInput ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en input(). Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errInput",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // errPrint ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en print() Línea: "  + eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errPrint",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // errDecFuncion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errDecFuncion",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // errParametro1 ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 parser.addError("Hay un error en la declaracion de los parametros de la funcion. Linea: "+eleft+ ". Columna: " + eright); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("errParametro1",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
